"use strict";

exports.__esModule = true;
exports["default"] = exports.inputRender = void 0;

var _formatUtils = require("@opuscapita/format-utils");

var _reactFormattedInput = require("@opuscapita/react-formatted-input");

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var inputRender = function inputRender(formattedInputProps) {
  return /*#__PURE__*/_react["default"].createElement(_reactFormattedInput.FormattedInputCurrency, formattedInputProps);
};

exports.inputRender = inputRender;

var getCurrencyKeyPath = function getCurrencyKeyPath(col) {
  return col.valueOptions && col.valueOptions.currencyKeyPath || ['currency'];
};

var _default = {
  // currencyValueRender
  valRender: function valRender(col, gridData, rowIndex, thousandSeparator, decimalSeparator, valueRender) {
    return valueRender(rowIndex, function (v) {
      return (0, _formatUtils.formatCurrencyAmount)(v, {
        currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
        decimals: col.valueOptions && col.valueOptions.decimals,
        thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
        decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
        multiplier: col.valueOptions && col.valueOptions.multiplier
      });
    });
  },
  cellEdit: function cellEdit(col, column, tabIndex, rowIndex, gridId, functions, editValueParser, getComponentDisabledState, gridData, thousandSeparator, decimalSeparator) {
    var cellName = 'edit';

    var props = _extends({
      className: 'form-control',
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, function (val) {
        return val;
      }),
      inputProps: {
        disabled: getComponentDisabledState(rowIndex, col, cellName),
        id: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        name: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        ref: functions.handleCellRef(rowIndex, col),
        style: column.style
      },
      currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
      decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
      thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
      decimals: col.valueOptions && col.valueOptions.decimals,
      tabIndex: tabIndex,
      onBlur: functions.onCellBlur(rowIndex, col)
    }, col.editComponentProps);

    return inputRender(_extends({}, props));
  },
  cellCreate: function cellCreate(col, column, tabIndex, rowIndex, gridId, functions, editValueParser, getComponentDisabledState, gridData, thousandSeparator, decimalSeparator) {
    var cellName = 'create';

    var props = _extends({
      className: 'form-control',
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, function (val) {
        return val;
      }),
      inputProps: {
        disabled: getComponentDisabledState(rowIndex, col, cellName),
        id: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        name: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        ref: functions.handleCellRef(rowIndex, col),
        style: column.style
      },
      currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
      decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
      thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
      decimals: col.valueOptions && col.valueOptions.decimals,
      tabIndex: tabIndex,
      onBlur: functions.onCellBlur(rowIndex, col)
    }, col.createComponentProps);

    return inputRender(_extends({}, props));
  } // Cell filtering is handled by primitive-renderers cellFilter function
  // Check column-service.jsx

};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,