'use strict';

exports.__esModule = true;
exports.dateRender = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactIntl = require('react-intl');

var _reactDatetime = require('@opuscapita/react-datetime');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dateRender = exports.dateRender = function dateRender(dateProps) {
  return _react2.default.createElement(_reactDatetime.DateInput, dateProps);
};

var dateIsValid = function dateIsValid(val) {
  return (0, _moment2.default)(val).isValid();
};

var dateIsValidFormat = function dateIsValidFormat(val, dateFormat) {
  return (0, _moment2.default)(val, dateFormat, true).isValid();
};

var className = 'oc-data-grid-date';

exports.default = {
  // dateValueRender
  valRender: function valRender(rowIndex, dateFormat, valueRender) {
    return valueRender(rowIndex, function (v) {
      if (dateIsValidFormat(v, dateFormat)) {
        return _moment2.default.utc(v, dateFormat).format(dateFormat);
      }
      if (dateIsValid(v)) {
        return _moment2.default.utc(v).format(dateFormat);
      }
      return _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'Grid.InvalidDate' });
    });
  },

  // dateCellEdit
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, region, dateFormat, valueParser, functions, getComponentDisabledState) {
    var cellName = 'edit';
    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      locale: region,
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      inputRef: functions.handleCellRef(rowIndex, col),
      inputProps: {
        tabIndex: tabIndex,
        id: 'ocDatagridEditInput-' + gridId + '-' + column.columnKey + '-' + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        onBlur: functions.onCellBlur(rowIndex, col),
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        style: column.style
      },
      disabled: getComponentDisabledState(rowIndex, col, cellName)
    }, col.editComponentProps);
    return dateRender(_extends({}, dateProps));
  },

  // dateCellCreate
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, region, dateFormat, valueParser, functions, getComponentDisabledState) {
    var cellName = 'create';
    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      locale: region,
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      inputRef: functions.handleCellRef(rowIndex, col),
      inputProps: {
        tabIndex: tabIndex,
        id: 'ocDatagridCreateInput-' + gridId + '-' + column.columnKey + '-' + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        onBlur: functions.onCellBlur(rowIndex, col),
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        style: column.style
      },
      disabled: getComponentDisabledState(rowIndex, col, cellName)
    }, col.createComponentProps);
    return dateRender(_extends({}, dateProps));
  },

  // dateFilterCell
  cellFilter: function cellFilter(col, column, tabIndex, gridId, region, dateFormat, valueParser, functions) {
    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      value: functions.getItemValue(col),
      onChange: functions.onCellValueChange(col, valueParser),
      locale: region,
      inputProps: {
        tabIndex: tabIndex,
        id: 'ocDatagridFilterInput-' + gridId + '-' + column.columnKey,
        style: column.style
      }
    }, col.filterComponentProps);
    return dateRender(_extends({}, dateProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,