'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFloatingSelect = require('@opuscapita/react-floating-select');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultiValueContainer = function MultiValueContainer(label) {
  return function (properties) {
    return properties.selectProps.value && properties.selectProps.value.findIndex(function (selectProp) {
      return selectProp.value === properties.data.value;
    }) === 0 ? _react2.default.createElement(
      'span',
      null,
      label.replace('{n}', properties.selectProps.value.length)
    ) : null;
  };
};

exports.default = {
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var value = functions.getItemValue(col, { selectOptions: selectOptions });
    var options = opts.map(function (option) {
      return value && value.some(function (o) {
        return option.value === o.value;
      }) ? _extends({}, option, { checked: true }) : option;
    });

    var fsProps = _extends({}, col.filterComponentProps, selectTranslations, {
      closeMenuOnSelect: false,
      components: { MultiValueContainer: MultiValueContainer(selectTranslations.selected) },
      hideSelectedOptions: false,
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      isMulti: true,
      name: 'ocDatagridFilterInput-' + gridId + '-' + column.columnKey,
      onChange: functions.onCellValueChange(col, editValueParser),
      options: options,
      tabSelectsValue: false,
      tabIndex: tabIndex,
      value: value
    });

    return _react2.default.createElement(_reactFloatingSelect.FloatingSelectPortal, fsProps);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvbXVsdGlzZWxlY3QtcmVuZGVyZXJzLmpzeCJdLCJuYW1lcyI6WyJNdWx0aVZhbHVlQ29udGFpbmVyIiwicHJvcGVydGllcyIsInNlbGVjdFByb3BzIiwidmFsdWUiLCJmaW5kSW5kZXgiLCJzZWxlY3RQcm9wIiwiZGF0YSIsImxhYmVsIiwicmVwbGFjZSIsImxlbmd0aCIsImNlbGxGaWx0ZXIiLCJjb2wiLCJjb2x1bW4iLCJ0YWJJbmRleCIsImdyaWRJZCIsInNlbGVjdE9wdGlvbnMiLCJzZWxlY3RUcmFuc2xhdGlvbnMiLCJlZGl0VmFsdWVQYXJzZXIiLCJmdW5jdGlvbnMiLCJvcHRzIiwiZmlsdGVyU2VsZWN0T3B0aW9uc01vZCIsInNsaWNlIiwiZ2V0SXRlbVZhbHVlIiwib3B0aW9ucyIsIm1hcCIsInNvbWUiLCJvcHRpb24iLCJvIiwiY2hlY2tlZCIsImZzUHJvcHMiLCJmaWx0ZXJDb21wb25lbnRQcm9wcyIsImNsb3NlTWVudU9uU2VsZWN0IiwiY29tcG9uZW50cyIsInNlbGVjdGVkIiwiaGlkZVNlbGVjdGVkT3B0aW9ucyIsImlzU2VhcmNoYWJsZSIsImlzQ2xlYXJhYmxlIiwiaXNNdWx0aSIsIm5hbWUiLCJjb2x1bW5LZXkiLCJvbkNoYW5nZSIsIm9uQ2VsbFZhbHVlQ2hhbmdlIiwidGFiU2VsZWN0c1ZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUEsSUFBTUEsc0JBQXNCLFNBQXRCQSxtQkFBc0I7QUFBQSxTQUFTO0FBQUEsV0FDbkNDLFdBQVdDLFdBQVgsQ0FBdUJDLEtBQXZCLElBQ0dGLFdBQVdDLFdBQVgsQ0FBdUJDLEtBQXZCLENBQTZCQyxTQUE3QixDQUF1QztBQUFBLGFBQ3hDQyxXQUFXRixLQUFYLEtBQXFCRixXQUFXSyxJQUFYLENBQWdCSCxLQURHO0FBQUEsS0FBdkMsTUFDK0MsQ0FGbEQsR0FHSTtBQUFBO0FBQUE7QUFBT0ksWUFBTUMsT0FBTixDQUFjLEtBQWQsRUFBcUJQLFdBQVdDLFdBQVgsQ0FBdUJDLEtBQXZCLENBQTZCTSxNQUFsRDtBQUFQLEtBSEosR0FJSSxJQUwrQjtBQUFBLEdBQVQ7QUFBQSxDQUE1Qjs7a0JBUWU7QUFDYkMsWUFEYSxzQkFFWEMsR0FGVyxFQUdYQyxNQUhXLEVBSVhDLFFBSlcsRUFLWEMsTUFMVyxFQU1YQyxhQU5XLEVBT1hDLGtCQVBXLEVBUVhDLGVBUlcsRUFTWEMsU0FUVyxFQVVYO0FBQ0EsUUFBTUMsT0FBT1IsSUFBSVMsc0JBQUosSUFBOEJMLGFBQTlCLEdBQ1hKLElBQUlTLHNCQUFKLENBQTJCTCxjQUFjTSxLQUFkLEVBQTNCLEVBQWtEVixHQUFsRCxDQURXLEdBRVhJLGFBRkY7QUFHQSxRQUFNWixRQUFRZSxVQUFVSSxZQUFWLENBQXVCWCxHQUF2QixFQUE0QixFQUFFSSw0QkFBRixFQUE1QixDQUFkO0FBQ0EsUUFBTVEsVUFBVUosS0FBS0ssR0FBTCxDQUFTO0FBQUEsYUFDdkJyQixTQUFTQSxNQUFNc0IsSUFBTixDQUFXO0FBQUEsZUFBS0MsT0FBT3ZCLEtBQVAsS0FBaUJ3QixFQUFFeEIsS0FBeEI7QUFBQSxPQUFYLENBQVQsZ0JBQ1N1QixNQURULElBQ2lCRSxTQUFTLElBRDFCLE1BRUlGLE1BSG1CO0FBQUEsS0FBVCxDQUFoQjs7QUFNQSxRQUFNRyx1QkFDRGxCLElBQUltQixvQkFESCxFQUVEZCxrQkFGQztBQUdKZSx5QkFBbUIsS0FIZjtBQUlKQyxrQkFBWSxFQUFFaEMscUJBQXFCQSxvQkFBb0JnQixtQkFBbUJpQixRQUF2QyxDQUF2QixFQUpSO0FBS0pDLDJCQUFxQixLQUxqQjtBQU1KQyxvQkFBY3BCLGlCQUFrQkEsY0FBY04sTUFBZCxHQUF1QixDQU5uRDtBQU9KMkIsbUJBQWEsSUFQVDtBQVFKQyxlQUFTLElBUkw7QUFTSkMsdUNBQStCeEIsTUFBL0IsU0FBeUNGLE9BQU8yQixTQVQ1QztBQVVKQyxnQkFBVXRCLFVBQVV1QixpQkFBVixDQUE0QjlCLEdBQTVCLEVBQWlDTSxlQUFqQyxDQVZOO0FBV0pNLHNCQVhJO0FBWUptQix1QkFBaUIsS0FaYjtBQWFKN0Isd0JBYkk7QUFjSlY7QUFkSSxNQUFOOztBQWlCQSxXQUFPLDhCQUFDLHlDQUFELEVBQTBCMEIsT0FBMUIsQ0FBUDtBQUNEO0FBdkNZLEMiLCJmaWxlIjoibXVsdGlzZWxlY3QtcmVuZGVyZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZsb2F0aW5nU2VsZWN0UG9ydGFsIH0gZnJvbSAnQG9wdXNjYXBpdGEvcmVhY3QtZmxvYXRpbmctc2VsZWN0JztcblxuY29uc3QgTXVsdGlWYWx1ZUNvbnRhaW5lciA9IGxhYmVsID0+IHByb3BlcnRpZXMgPT4gKFxuICBwcm9wZXJ0aWVzLnNlbGVjdFByb3BzLnZhbHVlXG4gICYmIHByb3BlcnRpZXMuc2VsZWN0UHJvcHMudmFsdWUuZmluZEluZGV4KHNlbGVjdFByb3AgPT5cbiAgICBzZWxlY3RQcm9wLnZhbHVlID09PSBwcm9wZXJ0aWVzLmRhdGEudmFsdWUpID09PSAwXG4gICAgPyA8c3Bhbj57bGFiZWwucmVwbGFjZSgne259JywgcHJvcGVydGllcy5zZWxlY3RQcm9wcy52YWx1ZS5sZW5ndGgpfTwvc3Bhbj5cbiAgICA6IG51bGxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2VsbEZpbHRlcihcbiAgICBjb2wsXG4gICAgY29sdW1uLFxuICAgIHRhYkluZGV4LFxuICAgIGdyaWRJZCxcbiAgICBzZWxlY3RPcHRpb25zLFxuICAgIHNlbGVjdFRyYW5zbGF0aW9ucyxcbiAgICBlZGl0VmFsdWVQYXJzZXIsXG4gICAgZnVuY3Rpb25zLFxuICApIHtcbiAgICBjb25zdCBvcHRzID0gY29sLmZpbHRlclNlbGVjdE9wdGlvbnNNb2QgJiYgc2VsZWN0T3B0aW9ucyA/XG4gICAgICBjb2wuZmlsdGVyU2VsZWN0T3B0aW9uc01vZChzZWxlY3RPcHRpb25zLnNsaWNlKCksIGNvbCkgOlxuICAgICAgc2VsZWN0T3B0aW9ucztcbiAgICBjb25zdCB2YWx1ZSA9IGZ1bmN0aW9ucy5nZXRJdGVtVmFsdWUoY29sLCB7IHNlbGVjdE9wdGlvbnMgfSk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdHMubWFwKG9wdGlvbiA9PiAoXG4gICAgICB2YWx1ZSAmJiB2YWx1ZS5zb21lKG8gPT4gb3B0aW9uLnZhbHVlID09PSBvLnZhbHVlKVxuICAgICAgICA/IHsgLi4ub3B0aW9uLCBjaGVja2VkOiB0cnVlIH1cbiAgICAgICAgOiBvcHRpb25cbiAgICApKTtcblxuICAgIGNvbnN0IGZzUHJvcHMgPSB7XG4gICAgICAuLi5jb2wuZmlsdGVyQ29tcG9uZW50UHJvcHMsXG4gICAgICAuLi5zZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgICBjbG9zZU1lbnVPblNlbGVjdDogZmFsc2UsXG4gICAgICBjb21wb25lbnRzOiB7IE11bHRpVmFsdWVDb250YWluZXI6IE11bHRpVmFsdWVDb250YWluZXIoc2VsZWN0VHJhbnNsYXRpb25zLnNlbGVjdGVkKSB9LFxuICAgICAgaGlkZVNlbGVjdGVkT3B0aW9uczogZmFsc2UsXG4gICAgICBpc1NlYXJjaGFibGU6IHNlbGVjdE9wdGlvbnMgJiYgKHNlbGVjdE9wdGlvbnMubGVuZ3RoID4gOSksXG4gICAgICBpc0NsZWFyYWJsZTogdHJ1ZSxcbiAgICAgIGlzTXVsdGk6IHRydWUsXG4gICAgICBuYW1lOiBgb2NEYXRhZ3JpZEZpbHRlcklucHV0LSR7Z3JpZElkfS0ke2NvbHVtbi5jb2x1bW5LZXl9YCxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbnMub25DZWxsVmFsdWVDaGFuZ2UoY29sLCBlZGl0VmFsdWVQYXJzZXIpLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHRhYlNlbGVjdHNWYWx1ZTogZmFsc2UsXG4gICAgICB0YWJJbmRleCxcbiAgICAgIHZhbHVlLFxuICAgIH07XG5cbiAgICByZXR1cm4gPEZsb2F0aW5nU2VsZWN0UG9ydGFsIHsuLi5mc1Byb3BzfSAvPjtcbiAgfSxcbn07XG4iXX0=