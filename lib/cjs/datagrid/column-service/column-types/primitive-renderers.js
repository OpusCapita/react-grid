"use strict";

exports.__esModule = true;
exports["default"] = exports.primitiveRender = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactFormattedInput = _interopRequireDefault(require("@opuscapita/react-formatted-input"));

var _formatUtils = require("@opuscapita/format-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var primitiveRender = function primitiveRender(formattedInputProps) {
  return _react["default"].createElement(_reactFormattedInput["default"], formattedInputProps);
};

exports.primitiveRender = primitiveRender;
var _default = {
  // primitiveNumberValueRender
  numberValRender: function numberValRender(col, rowIndex, thousandSeparator, decimalSeparator, valueRender) {
    var decimals = col.componentType === 'number' ? 0 : 2;
    return valueRender(rowIndex, function (v) {
      return (0, _formatUtils.formatNumber)(v, {
        decimals: col.valueOptions && col.valueOptions.decimals || decimals,
        thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
        decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator
      });
    });
  },
  // primitiveCellEdit
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, editValueParser, formControlType, functions, getComponentDisabledState) {
    var cellName = 'edit';

    var primitiveProps = _extends({
      tabIndex: tabIndex,
      className: 'form-control',
      inputProps: {
        disabled: getComponentDisabledState(rowIndex, col, cellName),
        id: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        ref: functions.handleCellRef(rowIndex, col),
        style: column.style,
        type: formControlType
      },
      value: functions.getItemValue(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser)
    }, col.editComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  },
  // primitiveCellCreate
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, createValueParser, formControlType, functions, getComponentDisabledState) {
    var cellName = 'create';

    var primitiveProps = _extends({
      tabIndex: tabIndex,
      className: 'form-control',
      inputProps: {
        disabled: getComponentDisabledState(rowIndex, col, cellName),
        id: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        onKeyDown: functions.onCellKeyDown(rowIndex, col, false),
        ref: functions.handleCellRef(rowIndex, col),
        style: column.style,
        type: formControlType || col.componentType
      },
      value: functions.getItemValue(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, createValueParser)
    }, col.createComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  },
  // primitiveCellFilter
  cellFilter: function cellFilter(col, column, tabIndex, gridId, filterValueParser, formControlType, functions) {
    var primitiveProps = _extends({
      tabIndex: tabIndex,
      className: 'form-control',
      inputProps: {
        id: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
        style: column.style,
        type: formControlType
      },
      value: functions.getItemValue(col),
      onChange: functions.onCellValueChange(col, filterValueParser)
    }, col.filterComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,