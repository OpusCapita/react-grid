"use strict";

exports.__esModule = true;
exports["default"] = exports.primitiveRender = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactBootstrap = require("react-bootstrap");

var _formatUtils = require("@opuscapita/format-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var primitiveRender = function primitiveRender(primitiveProps) {
  return _react["default"].createElement(_reactBootstrap.FormControl, primitiveProps);
};

exports.primitiveRender = primitiveRender;
var _default = {
  // primitiveNumberValueRender
  numberValRender: function numberValRender(col, rowIndex, thousandSeparator, decimalSeparator, valueRender) {
    var decimals = col.componentType === 'number' ? 0 : 2;
    return valueRender(rowIndex, function (v) {
      return (0, _formatUtils.formatNumber)(v, {
        decimals: col.valueOptions && col.valueOptions.decimals || decimals,
        thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
        decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator
      });
    });
  },
  // primitiveCellEdit
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, editValueParser, formControlType, functions, getComponentDisabledState) {
    var cellName = 'edit';

    var primitiveProps = _extends({
      id: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      style: column.style,
      tabIndex: tabIndex,
      type: formControlType,
      value: functions.getItemValue(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      inputRef: functions.handleCellRef(rowIndex, col),
      disabled: getComponentDisabledState(rowIndex, col, cellName),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey)
    }, col.editComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  },
  // primitiveCellCreate
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, createValueParser, formControlType, functions, getComponentDisabledState) {
    var cellName = 'create';

    var primitiveProps = _extends({
      id: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      style: column.style,
      tabIndex: tabIndex,
      type: formControlType || col.componentType,
      value: functions.getItemValue(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      onKeyDown: functions.onCellKeyDown(rowIndex, col, false),
      inputRef: functions.handleCellRef(rowIndex, col),
      disabled: getComponentDisabledState(rowIndex, col, cellName),
      onChange: functions.onCellValueChange(rowIndex, col, createValueParser),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey)
    }, col.createComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  },
  // primitiveCellFilter
  cellFilter: function cellFilter(col, column, tabIndex, gridId, filterValueParser, formControlType, functions) {
    var primitiveProps = _extends({
      id: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      style: column.style,
      tabIndex: tabIndex,
      type: formControlType,
      value: functions.getItemValue(col),
      onChange: functions.onCellValueChange(col, filterValueParser)
    }, col.filterComponentProps);

    return primitiveRender(_extends({}, primitiveProps));
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,