'use strict';

exports.__esModule = true;
exports.creatableSelectRender = exports.selectRender = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFloatingSelect = require('@opuscapita/react-floating-select');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var selectRender = exports.selectRender = function selectRender(selectProps) {
  return _react2.default.createElement(_reactFloatingSelect.FloatingSelectPortal, selectProps);
};

var creatableSelectRender = exports.creatableSelectRender = function creatableSelectRender(selectProps) {
  return _react2.default.createElement(_reactFloatingSelect.FloatingSelectPortalCreatable, selectProps);
};

exports.default = {
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions, getComponentDisabledState) {
    var cellName = 'edit';
    var opts = col.editSelectOptionsMod && selectOptions ? col.editSelectOptionsMod(selectOptions.slice(), rowIndex, col) : selectOptions;
    var fsProps = _extends({
      name: 'ocDatagridEditInput-' + gridId + '-' + column.columnKey + '-' + rowIndex,
      options: opts,
      value: functions.getItemValue(rowIndex, col, { selectOptions: selectOptions }),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: !col.isRequired,
      backSpaceRemovesValue: false,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      ref: functions.handleCellRef(rowIndex, col),
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      tabIndex: tabIndex
    }, col.editComponentProps, selectTranslations);

    if (col.isCreatableSelect) return creatableSelectRender(_extends({}, fsProps));
    return selectRender(_extends({}, fsProps));
  },
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions, getComponentDisabledState) {
    var cellName = 'create';
    var opts = col.createSelectOptionsMod && selectOptions ? col.createSelectOptionsMod(selectOptions.slice(), rowIndex, col) : selectOptions;
    var fsProps = _extends({
      name: 'ocDatagridCreateInput-' + gridId + '-' + column.columnKey + '-' + rowIndex,
      options: opts,
      value: functions.getItemValue(rowIndex, col, { selectOptions: selectOptions }),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: !col.isRequired,
      backspaceRemovesValue: false,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      ref: functions.handleCellRef(rowIndex, col),
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      tabIndex: tabIndex
    }, col.createComponentProps, selectTranslations);

    if (col.isCreatableSelect) return creatableSelectRender(_extends({}, fsProps));
    return selectRender(_extends({}, fsProps));
  },
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var fsProps = _extends({
      name: 'ocDatagridFilterInput-' + gridId + '-' + column.columnKey,
      options: opts,
      value: functions.getItemValue(col, { selectOptions: selectOptions }),
      onChange: functions.onCellValueChange(col, editValueParser),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      tabSelectsValue: false,
      tabIndex: tabIndex
    }, col.filterComponentProps, selectTranslations);

    return selectRender(_extends({}, fsProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,