'use strict';

exports.__esModule = true;
exports.defaultProps = exports.propTypes = exports.columnShape = exports.gridShape = exports.configStorageShape = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactImmutableProptypes = require('react-immutable-proptypes');

var _reactImmutableProptypes2 = _interopRequireDefault(_reactImmutableProptypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/no-unused-prop-types, react/forbid-prop-types, max-len */
/* eslint-disable no-multi-spaces, object-curly-newline */
var bool = _propTypes2.default.bool,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string,
    func = _propTypes2.default.func,
    object = _propTypes2.default.object,
    node = _propTypes2.default.node,
    array = _propTypes2.default.array,
    shape = _propTypes2.default.shape,
    any = _propTypes2.default.any,
    oneOfType = _propTypes2.default.oneOfType,
    arrayOf = _propTypes2.default.arrayOf;
var list = _reactImmutableProptypes2.default.list,
    map = _reactImmutableProptypes2.default.map,
    mapOf = _reactImmutableProptypes2.default.mapOf;
var configStorageShape = exports.configStorageShape = shape({
  load: func.isRequired,
  save: func.isRequired
});

// Grid object holds data that also actions uses
var gridShape = exports.gridShape = shape({
  id: string.isRequired,
  idKeyPath: arrayOf(string).isRequired, // keyPath to id data
  defaultShowFilteringRow: bool, // is filtering row shown as default
  defaultSortColumn: string, // columnKey of column that is sorted by default
  defaultSortOrder: string, // default sort order [asc/desc]
  disableRememberColumnWidths: bool,
  disableRememberSortData: bool,
  disableRememberIsFiltering: bool,
  disableRememberFilteData: bool,
  disableRememberSelectedItems: bool,
  language: string,
  region: string,
  dateFormat: string,
  thousandSeparator: string,
  decimalSeparator: string,
  configStorage: configStorageShape,
  pagination: bool
});

var columnShape = exports.columnShape = shape({
  header: node,
  columnKey: string, // Use valueKeyPath if possible, this is calculated from there
  valueKeyPath: array, // key path for the cell data value, required if no columnKey is given
  valueType: string, // data value type [text/number/float/boolean/date]
  valueOptions: shape({ // options for the value type
    currencyKeyPath: array, // key path to currency code (only for currency data type)
    decimals: number, // number of decimals override
    thousandSeparator: string, // thousand separator override
    decimalSeparator: string // decimal separator override
  }),
  componentType: string, // edit component type [text/number/float/select/boolean/date]
  valueRender: func, // custom renderer for the value, data as parameter
  editValueRender: func, // custom renderer for the edit value, data as parameter
  createValueRender: func, // custom renderer for the create value, data as parameter
  filterValueRender: func, // custom renderer for the filter value, data as parameter
  cell: func, // override cell renderer, rowIndex as parameter
  cellEdit: func, // override cellEdit renderer, rowIndex as parameter
  cellCreate: func, // override cellCreate renderer, rowIndex as parameter
  cellFilter: func, // override cellFilter renderer, rowIndex as parameter
  renderComponentProps: object, // additional props to the render component
  editComponentProps: object, // additional props to the edit component
  createComponentProps: object, // additional props to the create component
  filterComponentProps: object, // additional props to the filter component
  width: number,
  minWidth: number,
  maxWidth: number,
  align: string, // vertical cell alignment, defaults to 'left'
  fixed: bool, // is column fixed
  allowCellsRecycling: bool, // allow cells to be recycled for better horizontal scrolling perf
  disableResizing: bool, // disable column resizing
  disableEditing: bool, // disable input component (make read-only) when editing/creating
  disableSorting: bool, // disable filtering on this column
  disableEditingOnValueMatch: shape({ // disable editing/creating input when other columns value match
    matchValueKeyPath: array,
    matchValue: any
  }),
  onValueMatchChangeValue: shape({ // Change other column value when data matches
    matchValue: any,
    newValueKeyPath: array,
    newValue: any
  }),
  flexGrow: number,
  valueEmptyChecker: func, // override function that checks if value is considered as empty
  sortValueGetter: func, // override sort value getter, defaults to getIn(valueKeyPath)
  sortComparator: func, // override sort comparator function, default sorts by valueType
  filterMatcher: func, // override filter matcher function, that defined when filter matches data
  defaultValue: any, // default value for the column when creating new item
  isRequired: bool, // is column value required
  isHidden: bool, // is column hidden by default
  onEditValueChange: func, // callback with (value, valueKeyPath, rowIndex, dataId)
  onCreateValueChange: func, // callbac with (value, valueKeyPath, rowIndex)
  onCreateBlur: func, // callback with (value, rowIndex)
  onEditBlur: func, // callback with (value, rowIndex, dataId)
  selectComponentOptions: arrayOf(shape({
    value: oneOfType([number, string, bool]).isRequired,
    label: oneOfType([number, string]).isRequired
  })),
  selectComponentTranslations: shape({ // customize select components placeholder and noResults texts.
    placeholder: string,
    noResultsText: string
  })
});

var propTypes = exports.propTypes = {
  children: node,
  // App props
  intl: object.isRequired,
  // Action props
  addNewItem: func.isRequired,
  removeNewItem: func.isRequired,
  create: func.isRequired,
  edit: func.isRequired,
  remove: func.isRequired,
  save: func.isRequired,
  cancel: func.isRequired,
  sortChange: func.isRequired,
  resizeColumn: func.isRequired,
  invalidate: func.isRequired,
  cellSelectionChange: func.isRequired,
  itemSelectionChange: func.isRequired,
  toggleFiltering: func.isRequired,
  editCellValueChange: func.isRequired,
  createCellValueChange: func.isRequired,
  filterCellValueChange: func.isRequired,
  editCellValueValidate: func.isRequired,
  createCellValueValidate: func.isRequired,
  validateEditedRows: func.isRequired,
  validateCreatedRows: func.isRequired,
  // State props
  isBusy: bool.isRequired,
  isEditing: bool.isRequired,
  isCreating: bool.isRequired,
  isFiltering: bool.isRequired,
  sortColumn: oneOfType([string, number]),
  sortOrder: string,
  visibleColumns: list.isRequired,
  columnWidths: map.isRequired,
  selectedCell: map.isRequired,
  selectedItems: list.isRequired,
  data: list.isRequired,
  editData: map.isRequired,
  createData: list.isRequired,
  filterData: map.isRequired,
  cellMessages: map.isRequired,
  createCellMessages: map.isRequired,
  language: string.isRequired,
  region: string.isRequired,
  thousandSeparator: string.isRequired,
  decimalSeparator: string.isRequired,
  allDataSize: number.isRequired,
  // Required component properties
  grid: gridShape.isRequired,
  columns: arrayOf(columnShape.isRequired).isRequired,
  // Optional component properties
  rowsCount: number,
  gridHeader: node,
  actionBar: node,
  actionBarLeft: node,
  cellSelect: bool,
  disableDropdown: bool, // Don't use dropdown menu in the action bar
  disableFilteringControls: bool, // Don't display the filtering controls (only valid if disableDropdown is true)
  dropdownMenuItems: arrayOf(shape({
    id: string,
    title: node,
    icon: node,
    onClick: func,
    disabled: oneOfType([bool, func])
  })),
  inlineEdit: bool,
  inlineAdd: bool,
  filtering: bool,
  removing: bool,
  columnSettings: bool,
  rowSelect: bool,
  rowSelectCheckboxColumn: bool,
  multiSelect: bool,
  selectComponentOptions: mapOf(arrayOf(shape({ // Options data for the react-select components
    value: oneOfType([number, string, bool]).isRequired,
    label: oneOfType([number, string]).isRequired
  }))),
  selectComponentTranslations: shape({ // Options for react-select text translations
    placeholder: string.isRequired,
    noResultsText: string.isRequired
  }),
  disableActions: bool, // Disable actions in the action bar
  disableActionsMessage: shape({
    messageId: string,
    messageValues: shape({})
  }),
  disableActionBar: bool,
  disableActionSave: bool,
  enableArrowNavigation: bool,
  onSave: func,
  onRemove: func,
  onCancel: func,
  onAddClick: func,
  onEditClick: func,
  onLastCellTabPress: func,
  tabIndex: number, // tabIndex value for inputs in cells
  extraColumn: shape({ // Extra fixed column that can't be re-ordered or hidden
    width: string,
    valueRender: func,
    cellEdit: func,
    cellCreate: func,
    cellFilter: func,
    isResizable: bool
  }),
  contextMenuItems: arrayOf(shape({ // Context menu items to display when row is right-clicked
    value: node,
    onClick: func,
    title: string,
    header: bool,
    disabled: oneOfType([bool, func]),
    divider: bool
  })),
  // Fixed data table built-in features
  headerHeight: number,
  filterRowHeight: number,
  rowHeight: number,
  containerStyle: object,
  scrollToColumn: number,
  scrollTop: number,
  scrollToRow: number,
  onRowClick: func,
  onRowDoubleClick: func,
  onRowMouseDown: func,
  onRowMouseEnter: func,
  onRowMouseLeave: func,
  onScrollStart: func,
  onScrollEnd: func,
  rowClassNameGetter: func,
  rowHeightGetter: func,
  onContentHeightChange: func,
  className: string,
  focusType: map.isRequired,
  pagination: shape({
    pageSize: number.isRequired,
    totalSize: number.isRequired,
    getData: func.isRequired
  })
};

/* eslint-enable max-len, prefer-template, react/no-unused-prop-types, react/forbid-prop-types */

var defaultProps = exports.defaultProps = {
  cellSelect: false,
  columnSettings: false,
  children: undefined,
  containerStyle: {},
  disableActionSave: false,
  enableArrowNavigation: false,
  headerHeight: 40,
  filterRowHeight: 40,
  rowHeight: 40,
  onSave: function onSave() {},
  onRemove: function onRemove() {},
  onCancel: function onCancel() {},
  tabIndex: 1,
  disableFilteringControls: false,
  className: ''
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9kYXRhZ3JpZC5wcm9wcy5qcyJdLCJuYW1lcyI6WyJib29sIiwiUHJvcFR5cGVzIiwibnVtYmVyIiwic3RyaW5nIiwiZnVuYyIsIm9iamVjdCIsIm5vZGUiLCJhcnJheSIsInNoYXBlIiwiYW55Iiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsImxpc3QiLCJJbW11dGFibGVQcm9wVHlwZXMiLCJtYXAiLCJtYXBPZiIsImNvbmZpZ1N0b3JhZ2VTaGFwZSIsImxvYWQiLCJpc1JlcXVpcmVkIiwic2F2ZSIsImdyaWRTaGFwZSIsImlkIiwiaWRLZXlQYXRoIiwiZGVmYXVsdFNob3dGaWx0ZXJpbmdSb3ciLCJkZWZhdWx0U29ydENvbHVtbiIsImRlZmF1bHRTb3J0T3JkZXIiLCJkaXNhYmxlUmVtZW1iZXJDb2x1bW5XaWR0aHMiLCJkaXNhYmxlUmVtZW1iZXJTb3J0RGF0YSIsImRpc2FibGVSZW1lbWJlcklzRmlsdGVyaW5nIiwiZGlzYWJsZVJlbWVtYmVyRmlsdGVEYXRhIiwiZGlzYWJsZVJlbWVtYmVyU2VsZWN0ZWRJdGVtcyIsImxhbmd1YWdlIiwicmVnaW9uIiwiZGF0ZUZvcm1hdCIsInRob3VzYW5kU2VwYXJhdG9yIiwiZGVjaW1hbFNlcGFyYXRvciIsImNvbmZpZ1N0b3JhZ2UiLCJwYWdpbmF0aW9uIiwiY29sdW1uU2hhcGUiLCJoZWFkZXIiLCJjb2x1bW5LZXkiLCJ2YWx1ZUtleVBhdGgiLCJ2YWx1ZVR5cGUiLCJ2YWx1ZU9wdGlvbnMiLCJjdXJyZW5jeUtleVBhdGgiLCJkZWNpbWFscyIsImNvbXBvbmVudFR5cGUiLCJ2YWx1ZVJlbmRlciIsImVkaXRWYWx1ZVJlbmRlciIsImNyZWF0ZVZhbHVlUmVuZGVyIiwiZmlsdGVyVmFsdWVSZW5kZXIiLCJjZWxsIiwiY2VsbEVkaXQiLCJjZWxsQ3JlYXRlIiwiY2VsbEZpbHRlciIsInJlbmRlckNvbXBvbmVudFByb3BzIiwiZWRpdENvbXBvbmVudFByb3BzIiwiY3JlYXRlQ29tcG9uZW50UHJvcHMiLCJmaWx0ZXJDb21wb25lbnRQcm9wcyIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImFsaWduIiwiZml4ZWQiLCJhbGxvd0NlbGxzUmVjeWNsaW5nIiwiZGlzYWJsZVJlc2l6aW5nIiwiZGlzYWJsZUVkaXRpbmciLCJkaXNhYmxlU29ydGluZyIsImRpc2FibGVFZGl0aW5nT25WYWx1ZU1hdGNoIiwibWF0Y2hWYWx1ZUtleVBhdGgiLCJtYXRjaFZhbHVlIiwib25WYWx1ZU1hdGNoQ2hhbmdlVmFsdWUiLCJuZXdWYWx1ZUtleVBhdGgiLCJuZXdWYWx1ZSIsImZsZXhHcm93IiwidmFsdWVFbXB0eUNoZWNrZXIiLCJzb3J0VmFsdWVHZXR0ZXIiLCJzb3J0Q29tcGFyYXRvciIsImZpbHRlck1hdGNoZXIiLCJkZWZhdWx0VmFsdWUiLCJpc0hpZGRlbiIsIm9uRWRpdFZhbHVlQ2hhbmdlIiwib25DcmVhdGVWYWx1ZUNoYW5nZSIsIm9uQ3JlYXRlQmx1ciIsIm9uRWRpdEJsdXIiLCJzZWxlY3RDb21wb25lbnRPcHRpb25zIiwidmFsdWUiLCJsYWJlbCIsInNlbGVjdENvbXBvbmVudFRyYW5zbGF0aW9ucyIsInBsYWNlaG9sZGVyIiwibm9SZXN1bHRzVGV4dCIsInByb3BUeXBlcyIsImNoaWxkcmVuIiwiaW50bCIsImFkZE5ld0l0ZW0iLCJyZW1vdmVOZXdJdGVtIiwiY3JlYXRlIiwiZWRpdCIsInJlbW92ZSIsImNhbmNlbCIsInNvcnRDaGFuZ2UiLCJyZXNpemVDb2x1bW4iLCJpbnZhbGlkYXRlIiwiY2VsbFNlbGVjdGlvbkNoYW5nZSIsIml0ZW1TZWxlY3Rpb25DaGFuZ2UiLCJ0b2dnbGVGaWx0ZXJpbmciLCJlZGl0Q2VsbFZhbHVlQ2hhbmdlIiwiY3JlYXRlQ2VsbFZhbHVlQ2hhbmdlIiwiZmlsdGVyQ2VsbFZhbHVlQ2hhbmdlIiwiZWRpdENlbGxWYWx1ZVZhbGlkYXRlIiwiY3JlYXRlQ2VsbFZhbHVlVmFsaWRhdGUiLCJ2YWxpZGF0ZUVkaXRlZFJvd3MiLCJ2YWxpZGF0ZUNyZWF0ZWRSb3dzIiwiaXNCdXN5IiwiaXNFZGl0aW5nIiwiaXNDcmVhdGluZyIsImlzRmlsdGVyaW5nIiwic29ydENvbHVtbiIsInNvcnRPcmRlciIsInZpc2libGVDb2x1bW5zIiwiY29sdW1uV2lkdGhzIiwic2VsZWN0ZWRDZWxsIiwic2VsZWN0ZWRJdGVtcyIsImRhdGEiLCJlZGl0RGF0YSIsImNyZWF0ZURhdGEiLCJmaWx0ZXJEYXRhIiwiY2VsbE1lc3NhZ2VzIiwiY3JlYXRlQ2VsbE1lc3NhZ2VzIiwiYWxsRGF0YVNpemUiLCJncmlkIiwiY29sdW1ucyIsInJvd3NDb3VudCIsImdyaWRIZWFkZXIiLCJhY3Rpb25CYXIiLCJhY3Rpb25CYXJMZWZ0IiwiY2VsbFNlbGVjdCIsImRpc2FibGVEcm9wZG93biIsImRpc2FibGVGaWx0ZXJpbmdDb250cm9scyIsImRyb3Bkb3duTWVudUl0ZW1zIiwidGl0bGUiLCJpY29uIiwib25DbGljayIsImRpc2FibGVkIiwiaW5saW5lRWRpdCIsImlubGluZUFkZCIsImZpbHRlcmluZyIsInJlbW92aW5nIiwiY29sdW1uU2V0dGluZ3MiLCJyb3dTZWxlY3QiLCJyb3dTZWxlY3RDaGVja2JveENvbHVtbiIsIm11bHRpU2VsZWN0IiwiZGlzYWJsZUFjdGlvbnMiLCJkaXNhYmxlQWN0aW9uc01lc3NhZ2UiLCJtZXNzYWdlSWQiLCJtZXNzYWdlVmFsdWVzIiwiZGlzYWJsZUFjdGlvbkJhciIsImRpc2FibGVBY3Rpb25TYXZlIiwiZW5hYmxlQXJyb3dOYXZpZ2F0aW9uIiwib25TYXZlIiwib25SZW1vdmUiLCJvbkNhbmNlbCIsIm9uQWRkQ2xpY2siLCJvbkVkaXRDbGljayIsIm9uTGFzdENlbGxUYWJQcmVzcyIsInRhYkluZGV4IiwiZXh0cmFDb2x1bW4iLCJpc1Jlc2l6YWJsZSIsImNvbnRleHRNZW51SXRlbXMiLCJkaXZpZGVyIiwiaGVhZGVySGVpZ2h0IiwiZmlsdGVyUm93SGVpZ2h0Iiwicm93SGVpZ2h0IiwiY29udGFpbmVyU3R5bGUiLCJzY3JvbGxUb0NvbHVtbiIsInNjcm9sbFRvcCIsInNjcm9sbFRvUm93Iiwib25Sb3dDbGljayIsIm9uUm93RG91YmxlQ2xpY2siLCJvblJvd01vdXNlRG93biIsIm9uUm93TW91c2VFbnRlciIsIm9uUm93TW91c2VMZWF2ZSIsIm9uU2Nyb2xsU3RhcnQiLCJvblNjcm9sbEVuZCIsInJvd0NsYXNzTmFtZUdldHRlciIsInJvd0hlaWdodEdldHRlciIsIm9uQ29udGVudEhlaWdodENoYW5nZSIsImNsYXNzTmFtZSIsImZvY3VzVHlwZSIsInBhZ2VTaXplIiwidG90YWxTaXplIiwiZ2V0RGF0YSIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFIQTtBQUNBO0lBSVFBLEksR0FBb0ZDLG1CLENBQXBGRCxJO0lBQU1FLE0sR0FBOEVELG1CLENBQTlFQyxNO0lBQVFDLE0sR0FBc0VGLG1CLENBQXRFRSxNO0lBQVFDLEksR0FBOERILG1CLENBQTlERyxJO0lBQU1DLE0sR0FBd0RKLG1CLENBQXhESSxNO0lBQVFDLEksR0FBZ0RMLG1CLENBQWhESyxJO0lBQU1DLEssR0FBMENOLG1CLENBQTFDTSxLO0lBQU9DLEssR0FBbUNQLG1CLENBQW5DTyxLO0lBQU9DLEcsR0FBNEJSLG1CLENBQTVCUSxHO0lBQUtDLFMsR0FBdUJULG1CLENBQXZCUyxTO0lBQVdDLE8sR0FBWVYsbUIsQ0FBWlUsTztJQUN4RUMsSSxHQUFxQkMsaUMsQ0FBckJELEk7SUFBTUUsRyxHQUFlRCxpQyxDQUFmQyxHO0lBQUtDLEssR0FBVUYsaUMsQ0FBVkUsSztBQUVaLElBQU1DLGtEQUFxQlIsTUFBTTtBQUN0Q1MsUUFBTWIsS0FBS2MsVUFEMkI7QUFFdENDLFFBQU1mLEtBQUtjO0FBRjJCLENBQU4sQ0FBM0I7O0FBS1A7QUFDTyxJQUFNRSxnQ0FBWVosTUFBTTtBQUM3QmEsTUFBSWxCLE9BQU9lLFVBRGtCO0FBRTdCSSxhQUFXWCxRQUFRUixNQUFSLEVBQWdCZSxVQUZFLEVBRVU7QUFDdkNLLDJCQUF5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RDtBQUVoQjRLLGVBQVc1TCxPQUFPZ0IsVUFGRjtBQUdoQjZLLGFBQVMzTCxLQUFLYztBQUhFLEdBQU47QUF2SVcsQ0FBbEI7O0FBOElQOztBQUVPLElBQU04SyxzQ0FBZTtBQUMxQnhELGNBQVksS0FEYztBQUUxQlksa0JBQWdCLEtBRlU7QUFHMUJ4RCxZQUFVcUcsU0FIZ0I7QUFJMUJwQixrQkFBZ0IsRUFKVTtBQUsxQmhCLHFCQUFtQixLQUxPO0FBTTFCQyx5QkFBdUIsS0FORztBQU8xQlksZ0JBQWMsRUFQWTtBQVExQkMsbUJBQWlCLEVBUlM7QUFTMUJDLGFBQVcsRUFUZTtBQVUxQmIsVUFBUSxrQkFBTSxDQUFFLENBVlU7QUFXMUJDLFlBQVUsb0JBQU0sQ0FBRSxDQVhRO0FBWTFCQyxZQUFVLG9CQUFNLENBQUUsQ0FaUTtBQWExQkksWUFBVSxDQWJnQjtBQWMxQjNCLDRCQUEwQixLQWRBO0FBZTFCaUQsYUFBVztBQWZlLENBQXJCIiwiZmlsZSI6ImRhdGFncmlkLnByb3BzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMsIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzLCBtYXgtbGVuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIG9iamVjdC1jdXJseS1uZXdsaW5lICovXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcblxuY29uc3QgeyBib29sLCBudW1iZXIsIHN0cmluZywgZnVuYywgb2JqZWN0LCBub2RlLCBhcnJheSwgc2hhcGUsIGFueSwgb25lT2ZUeXBlLCBhcnJheU9mIH0gPSBQcm9wVHlwZXM7XG5jb25zdCB7IGxpc3QsIG1hcCwgbWFwT2YgfSA9IEltbXV0YWJsZVByb3BUeXBlcztcblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1N0b3JhZ2VTaGFwZSA9IHNoYXBlKHtcbiAgbG9hZDogZnVuYy5pc1JlcXVpcmVkLFxuICBzYXZlOiBmdW5jLmlzUmVxdWlyZWQsXG59KTtcblxuLy8gR3JpZCBvYmplY3QgaG9sZHMgZGF0YSB0aGF0IGFsc28gYWN0aW9ucyB1c2VzXG5leHBvcnQgY29uc3QgZ3JpZFNoYXBlID0gc2hhcGUoe1xuICBpZDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGlkS2V5UGF0aDogYXJyYXlPZihzdHJpbmcpLmlzUmVxdWlyZWQsIC8vIGtleVBhdGggdG8gaWQgZGF0YVxuICBkZWZhdWx0U2hvd0ZpbHRlcmluZ1JvdzogYm9vbCwgICAgICAgICAvLyBpcyBmaWx0ZXJpbmcgcm93IHNob3duIGFzIGRlZmF1bHRcbiAgZGVmYXVsdFNvcnRDb2x1bW46IHN0cmluZywgICAgICAgICAgICAgLy8gY29sdW1uS2V5IG9mIGNvbHVtbiB0aGF0IGlzIHNvcnRlZCBieSBkZWZhdWx0XG4gIGRlZmF1bHRTb3J0T3JkZXI6IHN0cmluZywgICAgICAgICAgICAgIC8vIGRlZmF1bHQgc29ydCBvcmRlciBbYXNjL2Rlc2NdXG4gIGRpc2FibGVSZW1lbWJlckNvbHVtbldpZHRoczogYm9vbCxcbiAgZGlzYWJsZVJlbWVtYmVyU29ydERhdGE6IGJvb2wsXG4gIGRpc2FibGVSZW1lbWJlcklzRmlsdGVyaW5nOiBib29sLFxuICBkaXNhYmxlUmVtZW1iZXJGaWx0ZURhdGE6IGJvb2wsXG4gIGRpc2FibGVSZW1lbWJlclNlbGVjdGVkSXRlbXM6IGJvb2wsXG4gIGxhbmd1YWdlOiBzdHJpbmcsXG4gIHJlZ2lvbjogc3RyaW5nLFxuICBkYXRlRm9ybWF0OiBzdHJpbmcsXG4gIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcsXG4gIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyxcbiAgY29uZmlnU3RvcmFnZTogY29uZmlnU3RvcmFnZVNoYXBlLFxuICBwYWdpbmF0aW9uOiBib29sLFxufSk7XG5cbmV4cG9ydCBjb25zdCBjb2x1bW5TaGFwZSA9IHNoYXBlKHtcbiAgaGVhZGVyOiBub2RlLFxuICBjb2x1bW5LZXk6IHN0cmluZywgICAgICAgICAgICAgIC8vIFVzZSB2YWx1ZUtleVBhdGggaWYgcG9zc2libGUsIHRoaXMgaXMgY2FsY3VsYXRlZCBmcm9tIHRoZXJlXG4gIHZhbHVlS2V5UGF0aDogYXJyYXksICAgICAgICAgICAgLy8ga2V5IHBhdGggZm9yIHRoZSBjZWxsIGRhdGEgdmFsdWUsIHJlcXVpcmVkIGlmIG5vIGNvbHVtbktleSBpcyBnaXZlblxuICB2YWx1ZVR5cGU6IHN0cmluZywgICAgICAgICAgICAgIC8vIGRhdGEgdmFsdWUgdHlwZSBbdGV4dC9udW1iZXIvZmxvYXQvYm9vbGVhbi9kYXRlXVxuICB2YWx1ZU9wdGlvbnM6IHNoYXBlKHsgICAgICAgICAgIC8vIG9wdGlvbnMgZm9yIHRoZSB2YWx1ZSB0eXBlXG4gICAgY3VycmVuY3lLZXlQYXRoOiBhcnJheSwgICAgICAgLy8ga2V5IHBhdGggdG8gY3VycmVuY3kgY29kZSAob25seSBmb3IgY3VycmVuY3kgZGF0YSB0eXBlKVxuICAgIGRlY2ltYWxzOiBudW1iZXIsICAgICAgICAgICAgIC8vIG51bWJlciBvZiBkZWNpbWFscyBvdmVycmlkZVxuICAgIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcsICAgIC8vIHRob3VzYW5kIHNlcGFyYXRvciBvdmVycmlkZVxuICAgIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZywgICAgIC8vIGRlY2ltYWwgc2VwYXJhdG9yIG92ZXJyaWRlXG4gIH0pLFxuICBjb21wb25lbnRUeXBlOiBzdHJpbmcsICAgICAgICAgIC8vIGVkaXQgY29tcG9uZW50IHR5cGUgW3RleHQvbnVtYmVyL2Zsb2F0L3NlbGVjdC9ib29sZWFuL2RhdGVdXG4gIHZhbHVlUmVuZGVyOiBmdW5jLCAgICAgICAgICAgICAgLy8gY3VzdG9tIHJlbmRlcmVyIGZvciB0aGUgdmFsdWUsIGRhdGEgYXMgcGFyYW1ldGVyXG4gIGVkaXRWYWx1ZVJlbmRlcjogZnVuYywgICAgICAgICAgLy8gY3VzdG9tIHJlbmRlcmVyIGZvciB0aGUgZWRpdCB2YWx1ZSwgZGF0YSBhcyBwYXJhbWV0ZXJcbiAgY3JlYXRlVmFsdWVSZW5kZXI6IGZ1bmMsICAgICAgICAvLyBjdXN0b20gcmVuZGVyZXIgZm9yIHRoZSBjcmVhdGUgdmFsdWUsIGRhdGEgYXMgcGFyYW1ldGVyXG4gIGZpbHRlclZhbHVlUmVuZGVyOiBmdW5jLCAgICAgICAgLy8gY3VzdG9tIHJlbmRlcmVyIGZvciB0aGUgZmlsdGVyIHZhbHVlLCBkYXRhIGFzIHBhcmFtZXRlclxuICBjZWxsOiBmdW5jLCAgICAgICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIGNlbGwgcmVuZGVyZXIsIHJvd0luZGV4IGFzIHBhcmFtZXRlclxuICBjZWxsRWRpdDogZnVuYywgICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIGNlbGxFZGl0IHJlbmRlcmVyLCByb3dJbmRleCBhcyBwYXJhbWV0ZXJcbiAgY2VsbENyZWF0ZTogZnVuYywgICAgICAgICAgICAgICAvLyBvdmVycmlkZSBjZWxsQ3JlYXRlIHJlbmRlcmVyLCByb3dJbmRleCBhcyBwYXJhbWV0ZXJcbiAgY2VsbEZpbHRlcjogZnVuYywgICAgICAgICAgICAgICAvLyBvdmVycmlkZSBjZWxsRmlsdGVyIHJlbmRlcmVyLCByb3dJbmRleCBhcyBwYXJhbWV0ZXJcbiAgcmVuZGVyQ29tcG9uZW50UHJvcHM6IG9iamVjdCwgICAvLyBhZGRpdGlvbmFsIHByb3BzIHRvIHRoZSByZW5kZXIgY29tcG9uZW50XG4gIGVkaXRDb21wb25lbnRQcm9wczogb2JqZWN0LCAgICAgLy8gYWRkaXRpb25hbCBwcm9wcyB0byB0aGUgZWRpdCBjb21wb25lbnRcbiAgY3JlYXRlQ29tcG9uZW50UHJvcHM6IG9iamVjdCwgICAvLyBhZGRpdGlvbmFsIHByb3BzIHRvIHRoZSBjcmVhdGUgY29tcG9uZW50XG4gIGZpbHRlckNvbXBvbmVudFByb3BzOiBvYmplY3QsICAgLy8gYWRkaXRpb25hbCBwcm9wcyB0byB0aGUgZmlsdGVyIGNvbXBvbmVudFxuICB3aWR0aDogbnVtYmVyLFxuICBtaW5XaWR0aDogbnVtYmVyLFxuICBtYXhXaWR0aDogbnVtYmVyLFxuICBhbGlnbjogc3RyaW5nLCAgICAgICAgICAgICAgICAgIC8vIHZlcnRpY2FsIGNlbGwgYWxpZ25tZW50LCBkZWZhdWx0cyB0byAnbGVmdCdcbiAgZml4ZWQ6IGJvb2wsICAgICAgICAgICAgICAgICAgICAvLyBpcyBjb2x1bW4gZml4ZWRcbiAgYWxsb3dDZWxsc1JlY3ljbGluZzogYm9vbCwgICAgICAvLyBhbGxvdyBjZWxscyB0byBiZSByZWN5Y2xlZCBmb3IgYmV0dGVyIGhvcml6b250YWwgc2Nyb2xsaW5nIHBlcmZcbiAgZGlzYWJsZVJlc2l6aW5nOiBib29sLCAgICAgICAgICAvLyBkaXNhYmxlIGNvbHVtbiByZXNpemluZ1xuICBkaXNhYmxlRWRpdGluZzogYm9vbCwgICAgICAgICAgIC8vIGRpc2FibGUgaW5wdXQgY29tcG9uZW50IChtYWtlIHJlYWQtb25seSkgd2hlbiBlZGl0aW5nL2NyZWF0aW5nXG4gIGRpc2FibGVTb3J0aW5nOiBib29sLCAgICAgICAgICAgLy8gZGlzYWJsZSBmaWx0ZXJpbmcgb24gdGhpcyBjb2x1bW5cbiAgZGlzYWJsZUVkaXRpbmdPblZhbHVlTWF0Y2g6IHNoYXBlKHsgLy8gZGlzYWJsZSBlZGl0aW5nL2NyZWF0aW5nIGlucHV0IHdoZW4gb3RoZXIgY29sdW1ucyB2YWx1ZSBtYXRjaFxuICAgIG1hdGNoVmFsdWVLZXlQYXRoOiBhcnJheSxcbiAgICBtYXRjaFZhbHVlOiBhbnksXG4gIH0pLFxuICBvblZhbHVlTWF0Y2hDaGFuZ2VWYWx1ZTogc2hhcGUoeyAvLyBDaGFuZ2Ugb3RoZXIgY29sdW1uIHZhbHVlIHdoZW4gZGF0YSBtYXRjaGVzXG4gICAgbWF0Y2hWYWx1ZTogYW55LFxuICAgIG5ld1ZhbHVlS2V5UGF0aDogYXJyYXksXG4gICAgbmV3VmFsdWU6IGFueSxcbiAgfSksXG4gIGZsZXhHcm93OiBudW1iZXIsXG4gIHZhbHVlRW1wdHlDaGVja2VyOiBmdW5jLCAgICAgICAgLy8gb3ZlcnJpZGUgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdmFsdWUgaXMgY29uc2lkZXJlZCBhcyBlbXB0eVxuICBzb3J0VmFsdWVHZXR0ZXI6IGZ1bmMsICAgICAgICAgIC8vIG92ZXJyaWRlIHNvcnQgdmFsdWUgZ2V0dGVyLCBkZWZhdWx0cyB0byBnZXRJbih2YWx1ZUtleVBhdGgpXG4gIHNvcnRDb21wYXJhdG9yOiBmdW5jLCAgICAgICAgICAgLy8gb3ZlcnJpZGUgc29ydCBjb21wYXJhdG9yIGZ1bmN0aW9uLCBkZWZhdWx0IHNvcnRzIGJ5IHZhbHVlVHlwZVxuICBmaWx0ZXJNYXRjaGVyOiBmdW5jLCAgICAgICAgICAgIC8vIG92ZXJyaWRlIGZpbHRlciBtYXRjaGVyIGZ1bmN0aW9uLCB0aGF0IGRlZmluZWQgd2hlbiBmaWx0ZXIgbWF0Y2hlcyBkYXRhXG4gIGRlZmF1bHRWYWx1ZTogYW55LCAgICAgICAgICAgICAgLy8gZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGNvbHVtbiB3aGVuIGNyZWF0aW5nIG5ldyBpdGVtXG4gIGlzUmVxdWlyZWQ6IGJvb2wsICAgICAgICAgICAgICAgLy8gaXMgY29sdW1uIHZhbHVlIHJlcXVpcmVkXG4gIGlzSGlkZGVuOiBib29sLCAgICAgICAgICAgICAgICAgLy8gaXMgY29sdW1uIGhpZGRlbiBieSBkZWZhdWx0XG4gIG9uRWRpdFZhbHVlQ2hhbmdlOiBmdW5jLCAgICAgICAgLy8gY2FsbGJhY2sgd2l0aCAodmFsdWUsIHZhbHVlS2V5UGF0aCwgcm93SW5kZXgsIGRhdGFJZClcbiAgb25DcmVhdGVWYWx1ZUNoYW5nZTogZnVuYywgICAgICAvLyBjYWxsYmFjIHdpdGggKHZhbHVlLCB2YWx1ZUtleVBhdGgsIHJvd0luZGV4KVxuICBvbkNyZWF0ZUJsdXI6IGZ1bmMsICAgICAgICAgICAgIC8vIGNhbGxiYWNrIHdpdGggKHZhbHVlLCByb3dJbmRleClcbiAgb25FZGl0Qmx1cjogZnVuYywgICAgICAgICAgICAgICAvLyBjYWxsYmFjayB3aXRoICh2YWx1ZSwgcm93SW5kZXgsIGRhdGFJZClcbiAgc2VsZWN0Q29tcG9uZW50T3B0aW9uczogYXJyYXlPZihzaGFwZSh7XG4gICAgdmFsdWU6IG9uZU9mVHlwZShbbnVtYmVyLCBzdHJpbmcsIGJvb2xdKS5pc1JlcXVpcmVkLFxuICAgIGxhYmVsOiBvbmVPZlR5cGUoW251bWJlciwgc3RyaW5nXSkuaXNSZXF1aXJlZCxcbiAgfSkpLFxuICBzZWxlY3RDb21wb25lbnRUcmFuc2xhdGlvbnM6IHNoYXBlKHsgLy8gY3VzdG9taXplIHNlbGVjdCBjb21wb25lbnRzIHBsYWNlaG9sZGVyIGFuZCBub1Jlc3VsdHMgdGV4dHMuXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyxcbiAgICBub1Jlc3VsdHNUZXh0OiBzdHJpbmcsXG4gIH0pLFxufSk7XG5cbmV4cG9ydCBjb25zdCBwcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBub2RlLFxuICAvLyBBcHAgcHJvcHNcbiAgaW50bDogb2JqZWN0LmlzUmVxdWlyZWQsXG4gIC8vIEFjdGlvbiBwcm9wc1xuICBhZGROZXdJdGVtOiBmdW5jLmlzUmVxdWlyZWQsXG4gIHJlbW92ZU5ld0l0ZW06IGZ1bmMuaXNSZXF1aXJlZCxcbiAgY3JlYXRlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGVkaXQ6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVtb3ZlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIHNhdmU6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuY2VsOiBmdW5jLmlzUmVxdWlyZWQsXG4gIHNvcnRDaGFuZ2U6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVzaXplQ29sdW1uOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGludmFsaWRhdGU6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgY2VsbFNlbGVjdGlvbkNoYW5nZTogZnVuYy5pc1JlcXVpcmVkLFxuICBpdGVtU2VsZWN0aW9uQ2hhbmdlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIHRvZ2dsZUZpbHRlcmluZzogZnVuYy5pc1JlcXVpcmVkLFxuICBlZGl0Q2VsbFZhbHVlQ2hhbmdlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGNyZWF0ZUNlbGxWYWx1ZUNoYW5nZTogZnVuYy5pc1JlcXVpcmVkLFxuICBmaWx0ZXJDZWxsVmFsdWVDaGFuZ2U6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgZWRpdENlbGxWYWx1ZVZhbGlkYXRlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGNyZWF0ZUNlbGxWYWx1ZVZhbGlkYXRlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIHZhbGlkYXRlRWRpdGVkUm93czogZnVuYy5pc1JlcXVpcmVkLFxuICB2YWxpZGF0ZUNyZWF0ZWRSb3dzOiBmdW5jLmlzUmVxdWlyZWQsXG4gIC8vIFN0YXRlIHByb3BzXG4gIGlzQnVzeTogYm9vbC5pc1JlcXVpcmVkLFxuICBpc0VkaXRpbmc6IGJvb2wuaXNSZXF1aXJlZCxcbiAgaXNDcmVhdGluZzogYm9vbC5pc1JlcXVpcmVkLFxuICBpc0ZpbHRlcmluZzogYm9vbC5pc1JlcXVpcmVkLFxuICBzb3J0Q29sdW1uOiBvbmVPZlR5cGUoW1xuICAgIHN0cmluZyxcbiAgICBudW1iZXIsXG4gIF0pLFxuICBzb3J0T3JkZXI6IHN0cmluZyxcbiAgdmlzaWJsZUNvbHVtbnM6IGxpc3QuaXNSZXF1aXJlZCxcbiAgY29sdW1uV2lkdGhzOiBtYXAuaXNSZXF1aXJlZCxcbiAgc2VsZWN0ZWRDZWxsOiBtYXAuaXNSZXF1aXJlZCxcbiAgc2VsZWN0ZWRJdGVtczogbGlzdC5pc1JlcXVpcmVkLFxuICBkYXRhOiBsaXN0LmlzUmVxdWlyZWQsXG4gIGVkaXREYXRhOiBtYXAuaXNSZXF1aXJlZCxcbiAgY3JlYXRlRGF0YTogbGlzdC5pc1JlcXVpcmVkLFxuICBmaWx0ZXJEYXRhOiBtYXAuaXNSZXF1aXJlZCxcbiAgY2VsbE1lc3NhZ2VzOiBtYXAuaXNSZXF1aXJlZCxcbiAgY3JlYXRlQ2VsbE1lc3NhZ2VzOiBtYXAuaXNSZXF1aXJlZCxcbiAgbGFuZ3VhZ2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICByZWdpb246IHN0cmluZy5pc1JlcXVpcmVkLFxuICB0aG91c2FuZFNlcGFyYXRvcjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBhbGxEYXRhU2l6ZTogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8vIFJlcXVpcmVkIGNvbXBvbmVudCBwcm9wZXJ0aWVzXG4gIGdyaWQ6IGdyaWRTaGFwZS5pc1JlcXVpcmVkLFxuICBjb2x1bW5zOiBhcnJheU9mKGNvbHVtblNoYXBlLmlzUmVxdWlyZWQpLmlzUmVxdWlyZWQsXG4gIC8vIE9wdGlvbmFsIGNvbXBvbmVudCBwcm9wZXJ0aWVzXG4gIHJvd3NDb3VudDogbnVtYmVyLFxuICBncmlkSGVhZGVyOiBub2RlLFxuICBhY3Rpb25CYXI6IG5vZGUsXG4gIGFjdGlvbkJhckxlZnQ6IG5vZGUsXG4gIGNlbGxTZWxlY3Q6IGJvb2wsXG4gIGRpc2FibGVEcm9wZG93bjogYm9vbCwgICAgICAgICAgICAgIC8vIERvbid0IHVzZSBkcm9wZG93biBtZW51IGluIHRoZSBhY3Rpb24gYmFyXG4gIGRpc2FibGVGaWx0ZXJpbmdDb250cm9sczogYm9vbCwgICAgIC8vIERvbid0IGRpc3BsYXkgdGhlIGZpbHRlcmluZyBjb250cm9scyAob25seSB2YWxpZCBpZiBkaXNhYmxlRHJvcGRvd24gaXMgdHJ1ZSlcbiAgZHJvcGRvd25NZW51SXRlbXM6IGFycmF5T2Yoc2hhcGUoe1xuICAgIGlkOiBzdHJpbmcsXG4gICAgdGl0bGU6IG5vZGUsXG4gICAgaWNvbjogbm9kZSxcbiAgICBvbkNsaWNrOiBmdW5jLFxuICAgIGRpc2FibGVkOiBvbmVPZlR5cGUoW2Jvb2wsIGZ1bmNdKSxcbiAgfSkpLFxuICBpbmxpbmVFZGl0OiBib29sLFxuICBpbmxpbmVBZGQ6IGJvb2wsXG4gIGZpbHRlcmluZzogYm9vbCxcbiAgcmVtb3Zpbmc6IGJvb2wsXG4gIGNvbHVtblNldHRpbmdzOiBib29sLFxuICByb3dTZWxlY3Q6IGJvb2wsXG4gIHJvd1NlbGVjdENoZWNrYm94Q29sdW1uOiBib29sLFxuICBtdWx0aVNlbGVjdDogYm9vbCxcbiAgc2VsZWN0Q29tcG9uZW50T3B0aW9uczogbWFwT2YoYXJyYXlPZihzaGFwZSh7ICAvLyBPcHRpb25zIGRhdGEgZm9yIHRoZSByZWFjdC1zZWxlY3QgY29tcG9uZW50c1xuICAgIHZhbHVlOiBvbmVPZlR5cGUoW251bWJlciwgc3RyaW5nLCBib29sXSkuaXNSZXF1aXJlZCxcbiAgICBsYWJlbDogb25lT2ZUeXBlKFtudW1iZXIsIHN0cmluZ10pLmlzUmVxdWlyZWQsXG4gIH0pKSksXG4gIHNlbGVjdENvbXBvbmVudFRyYW5zbGF0aW9uczogc2hhcGUoeyAgLy8gT3B0aW9ucyBmb3IgcmVhY3Qtc2VsZWN0IHRleHQgdHJhbnNsYXRpb25zXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG5vUmVzdWx0c1RleHQ6IHN0cmluZy5pc1JlcXVpcmVkLFxuICB9KSxcbiAgZGlzYWJsZUFjdGlvbnM6IGJvb2wsICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBhY3Rpb25zIGluIHRoZSBhY3Rpb24gYmFyXG4gIGRpc2FibGVBY3Rpb25zTWVzc2FnZTogc2hhcGUoe1xuICAgIG1lc3NhZ2VJZDogc3RyaW5nLFxuICAgIG1lc3NhZ2VWYWx1ZXM6IHNoYXBlKHt9KSxcbiAgfSksXG4gIGRpc2FibGVBY3Rpb25CYXI6IGJvb2wsXG4gIGRpc2FibGVBY3Rpb25TYXZlOiBib29sLFxuICBlbmFibGVBcnJvd05hdmlnYXRpb246IGJvb2wsXG4gIG9uU2F2ZTogZnVuYyxcbiAgb25SZW1vdmU6IGZ1bmMsXG4gIG9uQ2FuY2VsOiBmdW5jLFxuICBvbkFkZENsaWNrOiBmdW5jLFxuICBvbkVkaXRDbGljazogZnVuYyxcbiAgb25MYXN0Q2VsbFRhYlByZXNzOiBmdW5jLFxuICB0YWJJbmRleDogbnVtYmVyLCAgICAgICAgICAgICAgICAgICAvLyB0YWJJbmRleCB2YWx1ZSBmb3IgaW5wdXRzIGluIGNlbGxzXG4gIGV4dHJhQ29sdW1uOiBzaGFwZSh7ICAgICAgICAgICAgICAgIC8vIEV4dHJhIGZpeGVkIGNvbHVtbiB0aGF0IGNhbid0IGJlIHJlLW9yZGVyZWQgb3IgaGlkZGVuXG4gICAgd2lkdGg6IHN0cmluZyxcbiAgICB2YWx1ZVJlbmRlcjogZnVuYyxcbiAgICBjZWxsRWRpdDogZnVuYyxcbiAgICBjZWxsQ3JlYXRlOiBmdW5jLFxuICAgIGNlbGxGaWx0ZXI6IGZ1bmMsXG4gICAgaXNSZXNpemFibGU6IGJvb2wsXG4gIH0pLFxuICBjb250ZXh0TWVudUl0ZW1zOiBhcnJheU9mKHNoYXBlKHsgICAvLyBDb250ZXh0IG1lbnUgaXRlbXMgdG8gZGlzcGxheSB3aGVuIHJvdyBpcyByaWdodC1jbGlja2VkXG4gICAgdmFsdWU6IG5vZGUsXG4gICAgb25DbGljazogZnVuYyxcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGhlYWRlcjogYm9vbCxcbiAgICBkaXNhYmxlZDogb25lT2ZUeXBlKFtib29sLCBmdW5jXSksXG4gICAgZGl2aWRlcjogYm9vbCxcbiAgfSkpLFxuICAvLyBGaXhlZCBkYXRhIHRhYmxlIGJ1aWx0LWluIGZlYXR1cmVzXG4gIGhlYWRlckhlaWdodDogbnVtYmVyLFxuICBmaWx0ZXJSb3dIZWlnaHQ6IG51bWJlcixcbiAgcm93SGVpZ2h0OiBudW1iZXIsXG4gIGNvbnRhaW5lclN0eWxlOiBvYmplY3QsXG4gIHNjcm9sbFRvQ29sdW1uOiBudW1iZXIsXG4gIHNjcm9sbFRvcDogbnVtYmVyLFxuICBzY3JvbGxUb1JvdzogbnVtYmVyLFxuICBvblJvd0NsaWNrOiBmdW5jLFxuICBvblJvd0RvdWJsZUNsaWNrOiBmdW5jLFxuICBvblJvd01vdXNlRG93bjogZnVuYyxcbiAgb25Sb3dNb3VzZUVudGVyOiBmdW5jLFxuICBvblJvd01vdXNlTGVhdmU6IGZ1bmMsXG4gIG9uU2Nyb2xsU3RhcnQ6IGZ1bmMsXG4gIG9uU2Nyb2xsRW5kOiBmdW5jLFxuICByb3dDbGFzc05hbWVHZXR0ZXI6IGZ1bmMsXG4gIHJvd0hlaWdodEdldHRlcjogZnVuYyxcbiAgb25Db250ZW50SGVpZ2h0Q2hhbmdlOiBmdW5jLFxuICBjbGFzc05hbWU6IHN0cmluZyxcbiAgZm9jdXNUeXBlOiBtYXAuaXNSZXF1aXJlZCxcbiAgcGFnaW5hdGlvbjogc2hhcGUoe1xuICAgIHBhZ2VTaXplOiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3RhbFNpemU6IG51bWJlci5pc1JlcXVpcmVkLFxuICAgIGdldERhdGE6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgfSksXG59O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4sIHByZWZlci10ZW1wbGF0ZSwgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMsIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzICovXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIGNlbGxTZWxlY3Q6IGZhbHNlLFxuICBjb2x1bW5TZXR0aW5nczogZmFsc2UsXG4gIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gIGNvbnRhaW5lclN0eWxlOiB7fSxcbiAgZGlzYWJsZUFjdGlvblNhdmU6IGZhbHNlLFxuICBlbmFibGVBcnJvd05hdmlnYXRpb246IGZhbHNlLFxuICBoZWFkZXJIZWlnaHQ6IDQwLFxuICBmaWx0ZXJSb3dIZWlnaHQ6IDQwLFxuICByb3dIZWlnaHQ6IDQwLFxuICBvblNhdmU6ICgpID0+IHt9LFxuICBvblJlbW92ZTogKCkgPT4ge30sXG4gIG9uQ2FuY2VsOiAoKSA9PiB7fSxcbiAgdGFiSW5kZXg6IDEsXG4gIGRpc2FibGVGaWx0ZXJpbmdDb250cm9sczogZmFsc2UsXG4gIGNsYXNzTmFtZTogJycsXG59O1xuIl19