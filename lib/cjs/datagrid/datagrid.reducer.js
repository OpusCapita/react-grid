'use strict';

exports.__esModule = true;
exports.default = datagridReducer;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _datagrid = require('./datagrid.actions');

var _datagrid2 = require('./datagrid.constants');

var _datagrid3 = require('./datagrid.utils');

var _datagrid4 = _interopRequireDefault(_datagrid3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function datagridReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _datagrid2.INITIAL_STATE;
  var action = arguments[1];

  switch (action.type) {
    case _datagrid.TYPES.PLATFORM_DATAGRID_INVALIDATE:
      return state.deleteIn([action.id, 'data']).deleteIn([action.id, 'allData']).deleteIn([action.id, 'session']).deleteIn([action.id, 'selectedCell']).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages']).deleteIn([action.id, 'cellMessages']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_FORCE_REFRESH:
      return state.set('forceRefresh', Date.now());

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_DATA:
      return state.setIn([action.id, 'data'], action.data).setIn([action.id, 'allData'], action.data).setIn([action.id, 'config'], _immutable2.default.fromJS(action.config)).setIn([action.id, 'selectedItems'], _immutable2.default.fromJS(action.selectedItems)).mergeIn([action.id, 'session'], {
        isEditing: false,
        isCreating: false,
        isBusy: false
      }).deleteIn([action.id, 'selectedCell']).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages']).deleteIn([action.id, 'cellMessages']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_BUSY:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_READY:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_APPLY_SORT:
      return state.setIn([action.id, 'data'], action.data).setIn([action.id, 'allData'], action.allData);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SORT_CHANGE:
      return state.setIn([action.id, 'config', 'sortingData'], (0, _immutable.Map)({
        sortColumn: action.sortColumn,
        sortOrder: action.sortOrder
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_RESIZE_COLUMN:
      return state.setIn([action.id, 'config', 'columnWidths'], action.columnWidths);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EDIT:
      return state.setIn([action.id, 'session', 'isEditing'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE:
      return state.setIn([action.id, 'createData'], (0, _immutable.List)([_immutable2.default.fromJS(action.columnDefaultValues)])).deleteIn([action.id, 'selectedCell']).mergeIn([action.id, 'session'], {
        isCreating: true
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_ADD_NEW_ITEM:
      return state.updateIn([action.id, 'createData'], (0, _immutable.List)(), function (items) {
        return items.push(_immutable2.default.fromJS(action.columnDefaultValues));
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_ITEM:
      {
        var allDataIndex = state.getIn([action.id, 'allData'], (0, _immutable.List)()).findIndex(function (item) {
          return item.getIn(action.idKeyPath) === action.rowId;
        });
        var dataIndex = state.getIn([action.id, 'data'], (0, _immutable.List)()).findIndex(function (item) {
          return item.getIn(action.idKeyPath) === action.rowId;
        });
        return state.deleteIn([action.id, 'data', dataIndex]).deleteIn([action.id, 'allData', allDataIndex]).deleteIn([action.id, 'editData', action.rowId]).deleteIn([action.id, 'cellMessages', 'error', action.rowId]).deleteIn([action.id, 'cellMessages', 'info', action.rowId]).deleteIn([action.id, 'cellMessages', 'warning', action.rowId]);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_FOCUS_TO:
      {
        // focus type is saved as a immutable Map to make it easier to detect changes
        // when requesting same type of focus several times
        return state.setIn([action.id, 'session', 'focusType'], (0, _immutable.Map)({ type: action.focusTo, focusToLastRow: action.focusToLastRow }));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_NEW_ITEM:
      return state.deleteIn([action.id, 'createData', action.index]);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_NEW_ITEMS:
      return state.setIn([action.id, 'createData'], state.getIn([action.id, 'createData'], (0, _immutable.List)()).filter(function (val, idx) {
        return action.indexes.indexOf(idx) === -1;
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CANCEL:
      return state.mergeIn([action.id, 'session'], (0, _immutable.Map)({
        isEditing: false,
        isCreating: false
      })).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages', 'error']).deleteIn([action.id, 'cellMessages', 'error']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EXTEND_DATA:
      {
        var allData = state.getIn([action.id, 'allData']);
        var extendedData = action.prepend ? action.data.concat(allData) : allData.concat(action.data);

        return state.setIn([action.id, 'data'], extendedData).setIn([action.id, 'allData'], extendedData);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_SUCCESS:
      {
        var _allData = state.getIn([action.id, 'allData']);
        var firstCreatedId = null;

        action.savedItems.forEach(function (savedItemJS) {
          var savedItem = _immutable2.default.fromJS(savedItemJS);
          var foundIndex = _allData.findIndex(function (d) {
            return d.getIn(action.idKeyPath) === savedItem.getIn(action.idKeyPath);
          });
          if (foundIndex === -1) {
            if (!firstCreatedId && savedItem.getIn(action.idKeyPath)) {
              firstCreatedId = savedItem.getIn(action.idKeyPath);
            }
            _allData = _allData.push(savedItem);
          } else {
            _allData = _allData.mergeDeepIn([foundIndex], savedItem);
          }
        });

        var newState = state.setIn([action.id, 'data'], _allData).setIn([action.id, 'allData'], _allData).mergeIn([action.id, 'session'], {
          isBusy: false,
          isEditing: false,
          isCreating: false
        }).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages', 'error']).deleteIn([action.id, 'cellMessages', 'error']);

        if (firstCreatedId) {
          _datagrid4.default.saveSelectedItems(action.id, [firstCreatedId]);
          newState = newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([firstCreatedId]));
        }

        return newState;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_PARTIAL_SUCCESS:
      {
        var _allData2 = state.getIn([action.id, 'allData']);
        var createData = state.getIn([action.id, 'createData']);
        var editData = state.getIn([action.id, 'editData']);
        var isCreating = state.getIn([action.id, 'session', 'isCreating']);
        action.savedItems.forEach(function (savedItemJS) {
          var savedItem = _immutable2.default.fromJS(savedItemJS);
          var foundIndex = _allData2.findIndex(function (d) {
            return d.getIn(action.idKeyPath) === savedItem.getIn(action.idKeyPath);
          });
          if (foundIndex === -1) {
            _allData2 = _allData2.push(savedItem);
          } else {
            _allData2 = _allData2.mergeDeepIn([foundIndex], savedItem);
          }
          if (isCreating) {
            foundIndex = savedItem.get('rowIndex');
            if (foundIndex !== undefined && foundIndex !== null) {
              createData = createData.delete(foundIndex);
            }
          } else {
            editData = editData.delete(savedItem.getIn(action.idKeyPath));
          }
        });
        return state.setIn([action.id, 'data'], _allData2).setIn([action.id, 'allData'], _allData2).setIn([action.id, 'createData'], createData).setIn([action.id, 'editData'], editData).setIn([action.id, 'session', 'isBusy'], false);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_FAIL:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_SUCCESS:
      return state.setIn([action.id, 'session', 'isBusy'], false).updateIn([action.id, 'data'], function (data) {
        return data.filterNot(function (item) {
          return action.removedIds.indexOf(item.getIn(action.idKeyPath)) > -1;
        });
      }).updateIn([action.id, 'allData'], function (data) {
        return data.filterNot(function (item) {
          return action.removedIds.indexOf(item.getIn(action.idKeyPath)) > -1;
        });
      }).deleteIn([action.id, 'selectedItems']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_FAIL:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EDIT_CELL_VALUE_CHANGE:
      return state.setIn([action.id, 'editData', action.dataId].concat(action.keyPath), action.value);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_VALUE_CHANGE:
      return state.setIn([action.id, 'createData', action.rowIndex].concat(action.keyPath), action.value);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SHOW_MESSAGE:
      return state.setIn([action.id, 'cellMessages', action.messageType, action.dataId].concat(action.keyPath), { id: action.messageId, values: action.messageValues });

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SHOW_MESSAGES:
      return state.mergeIn([action.id, 'cellMessages'], _immutable2.default.fromJS(action.messages));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_HIDE_MESSAGE:
      {
        if (action.messageType === null) {
          return state.deleteIn([action.id, 'cellMessages']);
        }
        if (action.dataId === null) {
          return state.deleteIn([action.id, 'cellMessages', action.messageType]);
        }
        var rowMessage = state.getIn([action.id, 'cellMessages', action.messageType, action.dataId]);
        if (rowMessage) {
          if (action.keyPath) {
            rowMessage = rowMessage.deleteIn(action.keyPath);
          }
          if (rowMessage.size === 0 || !action.keyPath) {
            return state.deleteIn([action.id, 'cellMessages', action.messageType, action.dataId]);
          }
          return state.setIn([action.id, 'cellMessages', action.messageType, action.dataId], rowMessage);
        }
        return state;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_SHOW_MESSAGE:
      return state.setIn([action.id, 'createCellMessages', action.messageType, action.rowIndex].concat(action.keyPath), { id: action.messageId, values: action.messageValues });

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_HIDE_MESSAGE:
      {
        if (action.messageType === null) {
          return state.deleteIn([action.id, 'createCellMessages']);
        }
        if (action.rowIndex === null) {
          return state.deleteIn([action.id, 'createCellMessages', action.messageType]);
        }
        var _rowMessage = state.getIn([action.id, 'createCellMessages', action.messageType, action.rowIndex]);
        if (_rowMessage) {
          if (action.keyPath) {
            _rowMessage = _rowMessage.deleteIn(action.keyPath);
          }
          if (_rowMessage.size === 0 || !action.keyPath) {
            return state.deleteIn([action.id, 'createCellMessages', action.messageType, action.rowIndex]);
          }
          return state.setIn([action.id, 'createCellMessages', action.messageType, action.rowIndex], _rowMessage);
        }
        return state;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SELECTION_CHANGE:
      return state.setIn([action.id, 'selectedCell'], action.selectedCell);

    case _datagrid.TYPES.PLATFORM_DATAGRID_ITEM_SELECTION_CHANGE:
      {
        var _newState = state.setIn([action.id, 'session', 'lastClickedRowIndex'], action.rowIndex);

        // Handle case where shift key is pressed
        // Select all rows from lastClickedRow to currently clicked row
        if (action.shiftPressed) {
          var lastRowIndex = state.getIn([action.id, 'session', 'lastClickedRowIndex'], false);
          if (lastRowIndex !== false) {
            var selectRowIds = [];
            if (lastRowIndex < action.rowIndex) {
              for (var i = lastRowIndex; i <= action.rowIndex; i += 1) {
                var _dataId = state.getIn([action.id, 'data', i].concat(action.idKeyPath));
                if (_dataId) {
                  selectRowIds.push(_dataId);
                }
              }
            } else {
              for (var _i = action.rowIndex; _i <= lastRowIndex; _i += 1) {
                var _dataId2 = state.getIn([action.id, 'data', _i].concat(action.idKeyPath));
                if (_dataId2) {
                  selectRowIds.push(_dataId2);
                }
              }
            }
            return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)(selectRowIds));
          }
        }

        var dataId = state.getIn([action.id, 'data', action.rowIndex].concat(action.idKeyPath));
        var foundIndex = state.getIn([action.id, 'selectedItems'], (0, _immutable.List)()).indexOf(dataId);
        if (foundIndex === -1) {
          if (action.ctrlPressed) {
            return _newState.updateIn([action.id, 'selectedItems'], (0, _immutable.List)(), function (items) {
              return items.push(dataId);
            });
          }
          return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([dataId]));
        }
        if (action.ctrlPressed) {
          return _newState.updateIn([action.id, 'selectedItems'], function (items) {
            return items.delete(foundIndex);
          });
        }
        return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([dataId]));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SELECT_ALL_ITEMS_CHANGE:
      if (state.getIn([action.id, 'selectedItems'], (0, _immutable.List)()).size === state.getIn([action.id, 'data'], (0, _immutable.List)()).size) {
        return state.deleteIn([action.id, 'selectedItems']);
      }
      return state.setIn([action.id, 'selectedItems'], state.getIn([action.id, 'data'], (0, _immutable.List)()).map(function (item) {
        return item.getIn(action.idKeyPath);
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CLEAR_SELECTED_ITEMS:
      return state.deleteIn([action.id, 'selectedItems']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_TOGGLE_FILTERING:
      {
        if (!action.isFiltering) {
          return state.setIn([action.id, 'config', 'filteringData'], (0, _immutable.Map)({ isFiltering: false })).setIn([action.id, 'data'], state.getIn([action.id, 'allData']));
        }
        return state.setIn([action.id, 'config', 'filteringData'], (0, _immutable.Map)({ isFiltering: true }));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_FILTER_DATA_CHANGE:
      return state.setIn([action.id, 'config', 'filteringData', 'filterData'], action.filterData);

    case _datagrid.TYPES.PLATFORM_DATAGRID_APPLY_FILTERS:
      return state.setIn([action.id, 'data'], action.data);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_FILTERS:
      return state.setIn([action.id, 'config', 'filteringData'], action.filteringData);

    case _datagrid.TYPES.PLATFORM_DATAGRID_UPDATE_EXISTING_CELL_VALUE:
      {
        var _newState2 = state.setIn([action.id, 'allData', action.dataId].concat(action.keyPath), action.value);
        if (state.hasIn([action.id, 'data', action.dataId].concat(action.keyPath))) {
          return _newState2.setIn([action.id, 'data', action.dataId].concat(action.keyPath), action.value);
        }
        return _newState2;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_EDIT_DATA:
      return state.setIn([action.id, 'session', 'isEditing'], true).setIn([action.id, 'editData'], action.data).setIn([action.id, 'cellMessages'], action.cellMessages);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_MODAL_OPEN:
      return state.setIn([action.id, 'session', 'columnSettingsModal', 'open'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_MODAL_CLOSE:
      return state.deleteIn([action.id, 'session', 'columnSettingsModal']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_SAVE:
      return state.setIn([action.id, 'config', 'visibleColumns'], _immutable2.default.fromJS(action.columnOrder));

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_PAGE:
      return state.setIn([action.id, 'config', 'page'], action.page);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_ROWS_ON_PAGE:
      return state.setIn([action.id, 'config', 'rowsOnPage'], action.rowsOnPage);

    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9kYXRhZ3JpZC5yZWR1Y2VyLmpzIl0sIm5hbWVzIjpbImRhdGFncmlkUmVkdWNlciIsInN0YXRlIiwiSU5JVElBTF9TVEFURSIsImFjdGlvbiIsInR5cGUiLCJUWVBFUyIsIlBMQVRGT1JNX0RBVEFHUklEX0lOVkFMSURBVEUiLCJkZWxldGVJbiIsImlkIiwiUExBVEZPUk1fREFUQUdSSURfRk9SQ0VfUkVGUkVTSCIsInNldCIsIkRhdGUiLCJub3ciLCJQTEFURk9STV9EQVRBR1JJRF9TRVRfREFUQSIsInNldEluIiwiZGF0YSIsIkltbXV0YWJsZSIsImZyb21KUyIsImNvbmZpZyIsInNlbGVjdGVkSXRlbXMiLCJtZXJnZUluIiwiaXNFZGl0aW5nIiwiaXNDcmVhdGluZyIsImlzQnVzeSIsIlBMQVRGT1JNX0RBVEFHUklEX0JVU1kiLCJQTEFURk9STV9EQVRBR1JJRF9SRUFEWSIsIlBMQVRGT1JNX0RBVEFHUklEX0FQUExZX1NPUlQiLCJhbGxEYXRhIiwiUExBVEZPUk1fREFUQUdSSURfU09SVF9DSEFOR0UiLCJzb3J0Q29sdW1uIiwic29ydE9yZGVyIiwiUExBVEZPUk1fREFUQUdSSURfUkVTSVpFX0NPTFVNTiIsImNvbHVtbldpZHRocyIsIlBMQVRGT1JNX0RBVEFHUklEX0VESVQiLCJQTEFURk9STV9EQVRBR1JJRF9DUkVBVEUiLCJjb2x1bW5EZWZhdWx0VmFsdWVzIiwiUExBVEZPUk1fREFUQUdSSURfQUREX05FV19JVEVNIiwidXBkYXRlSW4iLCJpdGVtcyIsInB1c2giLCJQTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfSVRFTSIsImFsbERhdGFJbmRleCIsImdldEluIiwiZmluZEluZGV4IiwiaXRlbSIsImlkS2V5UGF0aCIsInJvd0lkIiwiZGF0YUluZGV4IiwiUExBVEZPUk1fREFUQUdSSURfU0VUX0ZPQ1VTX1RPIiwiZm9jdXNUbyIsImZvY3VzVG9MYXN0Um93IiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX05FV19JVEVNIiwiaW5kZXgiLCJQTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfTkVXX0lURU1TIiwiZmlsdGVyIiwidmFsIiwiaWR4IiwiaW5kZXhlcyIsImluZGV4T2YiLCJQTEFURk9STV9EQVRBR1JJRF9DQU5DRUwiLCJQTEFURk9STV9EQVRBR1JJRF9TQVZFIiwiUExBVEZPUk1fREFUQUdSSURfRVhURU5EX0RBVEEiLCJleHRlbmRlZERhdGEiLCJwcmVwZW5kIiwiY29uY2F0IiwiUExBVEZPUk1fREFUQUdSSURfU0FWRV9TVUNDRVNTIiwiZmlyc3RDcmVhdGVkSWQiLCJzYXZlZEl0ZW1zIiwiZm9yRWFjaCIsInNhdmVkSXRlbUpTIiwic2F2ZWRJdGVtIiwiZm91bmRJbmRleCIsImQiLCJtZXJnZURlZXBJbiIsIm5ld1N0YXRlIiwiVXRpbHMiLCJzYXZlU2VsZWN0ZWRJdGVtcyIsIlBMQVRGT1JNX0RBVEFHUklEX1NBVkVfUEFSVElBTF9TVUNDRVNTIiwiY3JlYXRlRGF0YSIsImVkaXREYXRhIiwiZ2V0IiwidW5kZWZpbmVkIiwiZGVsZXRlIiwiUExBVEZPUk1fREFUQUdSSURfU0FWRV9GQUlMIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX1NVQ0NFU1MiLCJmaWx0ZXJOb3QiLCJyZW1vdmVkSWRzIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX0ZBSUwiLCJQTEFURk9STV9EQVRBR1JJRF9FRElUX0NFTExfVkFMVUVfQ0hBTkdFIiwiZGF0YUlkIiwia2V5UGF0aCIsInZhbHVlIiwiUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfVkFMVUVfQ0hBTkdFIiwicm93SW5kZXgiLCJQTEFURk9STV9EQVRBR1JJRF9DRUxMX1NIT1dfTUVTU0FHRSIsIm1lc3NhZ2VUeXBlIiwibWVzc2FnZUlkIiwidmFsdWVzIiwibWVzc2FnZVZhbHVlcyIsIlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0hPV19NRVNTQUdFUyIsIm1lc3NhZ2VzIiwiUExBVEZPUk1fREFUQUdSSURfQ0VMTF9ISURFX01FU1NBR0UiLCJyb3dNZXNzYWdlIiwic2l6ZSIsIlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURV9DRUxMX1NIT1dfTUVTU0FHRSIsIlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURV9DRUxMX0hJREVfTUVTU0FHRSIsIlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0VMRUNUSU9OX0NIQU5HRSIsInNlbGVjdGVkQ2VsbCIsIlBMQVRGT1JNX0RBVEFHUklEX0lURU1fU0VMRUNUSU9OX0NIQU5HRSIsInNoaWZ0UHJlc3NlZCIsImxhc3RSb3dJbmRleCIsInNlbGVjdFJvd0lkcyIsImkiLCJjdHJsUHJlc3NlZCIsIlBMQVRGT1JNX0RBVEFHUklEX1NFTEVDVF9BTExfSVRFTVNfQ0hBTkdFIiwibWFwIiwiUExBVEZPUk1fREFUQUdSSURfQ0xFQVJfU0VMRUNURURfSVRFTVMiLCJQTEFURk9STV9EQVRBR1JJRF9UT0dHTEVfRklMVEVSSU5HIiwiaXNGaWx0ZXJpbmciLCJQTEFURk9STV9EQVRBR1JJRF9GSUxURVJfREFUQV9DSEFOR0UiLCJmaWx0ZXJEYXRhIiwiUExBVEZPUk1fREFUQUdSSURfQVBQTFlfRklMVEVSUyIsIlBMQVRGT1JNX0RBVEFHUklEX1NFVF9GSUxURVJTIiwiZmlsdGVyaW5nRGF0YSIsIlBMQVRGT1JNX0RBVEFHUklEX1VQREFURV9FWElTVElOR19DRUxMX1ZBTFVFIiwiaGFzSW4iLCJQTEFURk9STV9EQVRBR1JJRF9TRVRfRURJVF9EQVRBIiwiY2VsbE1lc3NhZ2VzIiwiUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX01PREFMX09QRU4iLCJQTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfTU9EQUxfQ0xPU0UiLCJQTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfU0FWRSIsImNvbHVtbk9yZGVyIiwiUExBVEZPUk1fREFUQUdSSURfU0VUX1BBR0UiLCJwYWdlIiwiUExBVEZPUk1fREFUQUdSSURfU0VUX1JPV1NfT05fUEFH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WDtBQUNFLGFBQU9qSSxNQUFNTSxRQUFOLENBQWUsQ0FBQ0osT0FBT0ssRUFBUixFQUFZLFNBQVosRUFBdUIscUJBQXZCLENBQWYsQ0FBUDs7QUFFRixTQUFLSCxnQkFBTThILHNDQUFYO0FBQ0UsYUFBT2xJLE1BQ0phLEtBREksQ0FDRSxDQUFDWCxPQUFPSyxFQUFSLEVBQVksUUFBWixFQUFzQixnQkFBdEIsQ0FERixFQUMyQ1Esb0JBQVVDLE1BQVYsQ0FBaUJkLE9BQU9pSSxXQUF4QixDQUQzQyxDQUFQOztBQUdGLFNBQUsvSCxnQkFBTWdJLDBCQUFYO0FBQ0UsYUFBT3BJLE1BQ0phLEtBREksQ0FDRSxDQUFDWCxPQUFPSyxFQUFSLEVBQVksUUFBWixFQUFzQixNQUF0QixDQURGLEVBQ2lDTCxPQUFPbUksSUFEeEMsQ0FBUDs7QUFHRixTQUFLakksZ0JBQU1rSSxrQ0FBWDtBQUNFLGFBQU90SSxNQUNKYSxLQURJLENBQ0UsQ0FBQ1gsT0FBT0ssRUFBUixFQUFZLFFBQVosRUFBc0IsWUFBdEIsQ0FERixFQUN1Q0wsT0FBT3FJLFVBRDlDLENBQVA7O0FBR0Y7QUFDRSxhQUFPdkksS0FBUDtBQWxkSjtBQW9kRCIsImZpbGUiOiJkYXRhZ3JpZC5yZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEltbXV0YWJsZSwgeyBNYXAsIExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgVFlQRVMgfSBmcm9tICcuL2RhdGFncmlkLmFjdGlvbnMnO1xuaW1wb3J0IHsgSU5JVElBTF9TVEFURSB9IGZyb20gJy4vZGF0YWdyaWQuY29uc3RhbnRzJztcbmltcG9ydCBVdGlscyBmcm9tICcuL2RhdGFncmlkLnV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGF0YWdyaWRSZWR1Y2VyKHN0YXRlID0gSU5JVElBTF9TVEFURSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0lOVkFMSURBVEU6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdkYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdzZWxlY3RlZENlbGwnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdlZGl0RGF0YSddKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVDZWxsTWVzc2FnZXMnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0ZPUkNFX1JFRlJFU0g6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCdmb3JjZVJlZnJlc2gnLCBEYXRlLm5vdygpKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VUX0RBVEE6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIGFjdGlvbi5kYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSwgYWN0aW9uLmRhdGEpXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJ10sIEltbXV0YWJsZS5mcm9tSlMoYWN0aW9uLmNvbmZpZykpXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLCBJbW11dGFibGUuZnJvbUpTKGFjdGlvbi5zZWxlY3RlZEl0ZW1zKSlcbiAgICAgICAgLm1lcmdlSW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nXSwge1xuICAgICAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICAgICAgaXNDcmVhdGluZzogZmFsc2UsXG4gICAgICAgICAgaXNCdXN5OiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdzZWxlY3RlZENlbGwnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdlZGl0RGF0YSddKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVDZWxsTWVzc2FnZXMnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0JVU1k6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIHRydWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9SRUFEWTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2Vzc2lvbicsICdpc0J1c3knXSwgZmFsc2UpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9BUFBMWV9TT1JUOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnZGF0YSddLCBhY3Rpb24uZGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGFjdGlvbi5hbGxEYXRhKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU09SVF9DSEFOR0U6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjb25maWcnLCAnc29ydGluZ0RhdGEnXSwgTWFwKHtcbiAgICAgICAgICBzb3J0Q29sdW1uOiBhY3Rpb24uc29ydENvbHVtbixcbiAgICAgICAgICBzb3J0T3JkZXI6IGFjdGlvbi5zb3J0T3JkZXIsXG4gICAgICAgIH0pKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVTSVpFX0NPTFVNTjpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2NvbHVtbldpZHRocyddLCBhY3Rpb24uY29sdW1uV2lkdGhzKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfRURJVDpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2Vzc2lvbicsICdpc0VkaXRpbmcnXSwgdHJ1ZSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURTpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnXSwgTGlzdChbSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uY29sdW1uRGVmYXVsdFZhbHVlcyldKSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdzZWxlY3RlZENlbGwnXSlcbiAgICAgICAgLm1lcmdlSW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nXSwge1xuICAgICAgICAgIGlzQ3JlYXRpbmc6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9BRERfTkVXX0lURU06XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnVwZGF0ZUluKFtcbiAgICAgICAgICBhY3Rpb24uaWQsXG4gICAgICAgICAgJ2NyZWF0ZURhdGEnLFxuICAgICAgICBdLCBMaXN0KCksIGl0ZW1zID0+IGl0ZW1zLnB1c2goSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uY29sdW1uRGVmYXVsdFZhbHVlcykpKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX0lURU06IHtcbiAgICAgIGNvbnN0IGFsbERhdGFJbmRleCA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIExpc3QoKSlcbiAgICAgICAgLmZpbmRJbmRleChpdGVtID0+IChpdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpID09PSBhY3Rpb24ucm93SWQpKTtcbiAgICAgIGNvbnN0IGRhdGFJbmRleCA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIExpc3QoKSlcbiAgICAgICAgLmZpbmRJbmRleChpdGVtID0+IChpdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpID09PSBhY3Rpb24ucm93SWQpKTtcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2RhdGEnLCBkYXRhSW5kZXhdKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnLCBhbGxEYXRhSW5kZXhdKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJywgYWN0aW9uLnJvd0lkXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnLCAnZXJyb3InLCBhY3Rpb24ucm93SWRdKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcycsICdpbmZvJywgYWN0aW9uLnJvd0lkXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnLCAnd2FybmluZycsIGFjdGlvbi5yb3dJZF0pO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VUX0ZPQ1VTX1RPOiB7XG4gICAgICAvLyBmb2N1cyB0eXBlIGlzIHNhdmVkIGFzIGEgaW1tdXRhYmxlIE1hcCB0byBtYWtlIGl0IGVhc2llciB0byBkZXRlY3QgY2hhbmdlc1xuICAgICAgLy8gd2hlbiByZXF1ZXN0aW5nIHNhbWUgdHlwZSBvZiBmb2N1cyBzZXZlcmFsIHRpbWVzXG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oXG4gICAgICAgIFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2ZvY3VzVHlwZSddLFxuICAgICAgICBNYXAoeyB0eXBlOiBhY3Rpb24uZm9jdXNUbywgZm9jdXNUb0xhc3RSb3c6IGFjdGlvbi5mb2N1c1RvTGFzdFJvdyB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfTkVXX0lURU06XG4gICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnLCBhY3Rpb24uaW5kZXhdKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX05FV19JVEVNUzpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnXSxcbiAgICAgICAgICBzdGF0ZVxuICAgICAgICAgICAgLmdldEluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10sIExpc3QoKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHZhbCwgaWR4KSA9PiBhY3Rpb24uaW5kZXhlcy5pbmRleE9mKGlkeCkgPT09IC0xKSxcbiAgICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0FOQ0VMOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5tZXJnZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10sIE1hcCh7XG4gICAgICAgICAgaXNFZGl0aW5nOiBmYWxzZSxcbiAgICAgICAgICBpc0NyZWF0aW5nOiBmYWxzZSxcbiAgICAgICAgfSkpXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TQVZFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCB0cnVlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfRVhURU5EX0RBVEE6IHtcbiAgICAgIGNvbnN0IGFsbERhdGEgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddKTtcbiAgICAgIGNvbnN0IGV4dGVuZGVkRGF0YSA9IGFjdGlvbi5wcmVwZW5kXG4gICAgICAgID8gYWN0aW9uLmRhdGEuY29uY2F0KGFsbERhdGEpIDogYWxsRGF0YS5jb25jYXQoYWN0aW9uLmRhdGEpO1xuXG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIGV4dGVuZGVkRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGV4dGVuZGVkRGF0YSk7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TQVZFX1NVQ0NFU1M6IHtcbiAgICAgIGxldCBhbGxEYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSk7XG4gICAgICBsZXQgZmlyc3RDcmVhdGVkSWQgPSBudWxsO1xuXG4gICAgICBhY3Rpb24uc2F2ZWRJdGVtcy5mb3JFYWNoKChzYXZlZEl0ZW1KUykgPT4ge1xuICAgICAgICBjb25zdCBzYXZlZEl0ZW0gPSBJbW11dGFibGUuZnJvbUpTKHNhdmVkSXRlbUpTKTtcbiAgICAgICAgY29uc3QgZm91bmRJbmRleCA9IGFsbERhdGEuZmluZEluZGV4KGQgPT4gKFxuICAgICAgICAgIGQuZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkgPT09IHNhdmVkSXRlbS5nZXRJbihhY3Rpb24uaWRLZXlQYXRoKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgaWYgKCFmaXJzdENyZWF0ZWRJZCAmJiBzYXZlZEl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpIHtcbiAgICAgICAgICAgIGZpcnN0Q3JlYXRlZElkID0gc2F2ZWRJdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbGxEYXRhID0gYWxsRGF0YS5wdXNoKHNhdmVkSXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWxsRGF0YSA9IGFsbERhdGEubWVyZ2VEZWVwSW4oW2ZvdW5kSW5kZXhdLCBzYXZlZEl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuXG4gICAgICBsZXQgbmV3U3RhdGUgPSBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgYWxsRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGFsbERhdGEpXG4gICAgICAgIC5tZXJnZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10sIHtcbiAgICAgICAgICBpc0J1c3k6IGZhbHNlLFxuICAgICAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICAgICAgaXNDcmVhdGluZzogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pO1xuXG4gICAgICBpZiAoZmlyc3RDcmVhdGVkSWQpIHtcbiAgICAgICAgVXRpbHMuc2F2ZVNlbGVjdGVkSXRlbXMoYWN0aW9uLmlkLCBbZmlyc3RDcmVhdGVkSWRdKTtcbiAgICAgICAgbmV3U3RhdGUgPSBuZXdTdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLCBMaXN0KFtmaXJzdENyZWF0ZWRJZF0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0FWRV9QQVJUSUFMX1NVQ0NFU1M6IHtcbiAgICAgIGxldCBhbGxEYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSk7XG4gICAgICBsZXQgY3JlYXRlRGF0YSA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pO1xuICAgICAgbGV0IGVkaXREYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJ10pO1xuICAgICAgY29uc3QgaXNDcmVhdGluZyA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQ3JlYXRpbmcnXSk7XG4gICAgICBhY3Rpb24uc2F2ZWRJdGVtcy5mb3JFYWNoKChzYXZlZEl0ZW1KUykgPT4ge1xuICAgICAgICBjb25zdCBzYXZlZEl0ZW0gPSBJbW11dGFibGUuZnJvbUpTKHNhdmVkSXRlbUpTKTtcbiAgICAgICAgbGV0IGZvdW5kSW5kZXggPSBhbGxEYXRhLmZpbmRJbmRleChkID0+IChcbiAgICAgICAgICBkLmdldEluKGFjdGlvbi5pZEtleVBhdGgpID09PSBzYXZlZEl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aClcbiAgICAgICAgKSk7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgIGFsbERhdGEgPSBhbGxEYXRhLnB1c2goc2F2ZWRJdGVtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGxEYXRhID0gYWxsRGF0YS5tZXJnZURlZXBJbihbZm91bmRJbmRleF0sIHNhdmVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3JlYXRpbmcpIHtcbiAgICAgICAgICBmb3VuZEluZGV4ID0gc2F2ZWRJdGVtLmdldCgncm93SW5kZXgnKTtcbiAgICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gdW5kZWZpbmVkICYmIGZvdW5kSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNyZWF0ZURhdGEgPSBjcmVhdGVEYXRhLmRlbGV0ZShmb3VuZEluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWRpdERhdGEgPSBlZGl0RGF0YS5kZWxldGUoc2F2ZWRJdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIGFsbERhdGEpXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddLCBhbGxEYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZURhdGEnXSwgY3JlYXRlRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdlZGl0RGF0YSddLCBlZGl0RGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TQVZFX0ZBSUw6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIGZhbHNlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCB0cnVlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCBmYWxzZSlcbiAgICAgICAgLnVwZGF0ZUluKFthY3Rpb24uaWQsICdkYXRhJ10sIGRhdGEgPT4gZGF0YS5maWx0ZXJOb3QoaXRlbSA9PiAoXG4gICAgICAgICAgYWN0aW9uLnJlbW92ZWRJZHMuaW5kZXhPZihpdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpKSA+IC0xXG4gICAgICAgICkpKVxuICAgICAgICAudXBkYXRlSW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSwgZGF0YSA9PiBkYXRhLmZpbHRlck5vdChpdGVtID0+IChcbiAgICAgICAgICBhY3Rpb24ucmVtb3ZlZElkcy5pbmRleE9mKGl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpID4gLTFcbiAgICAgICAgKSkpXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX0ZBSUw6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIGZhbHNlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfRURJVF9DRUxMX1ZBTFVFX0NIQU5HRTpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ2VkaXREYXRhJywgYWN0aW9uLmRhdGFJZCwgLi4uYWN0aW9uLmtleVBhdGhdLFxuICAgICAgICAgIGFjdGlvbi52YWx1ZSxcbiAgICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfVkFMVUVfQ0hBTkdFOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY3JlYXRlRGF0YScsIGFjdGlvbi5yb3dJbmRleCwgLi4uYWN0aW9uLmtleVBhdGhdLFxuICAgICAgICAgIGFjdGlvbi52YWx1ZSxcbiAgICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0VMTF9TSE9XX01FU1NBR0U6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFxuICAgICAgICAgIFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnLCBhY3Rpb24ubWVzc2FnZVR5cGUsIGFjdGlvbi5kYXRhSWQsIC4uLmFjdGlvbi5rZXlQYXRoXSxcbiAgICAgICAgICB7IGlkOiBhY3Rpb24ubWVzc2FnZUlkLCB2YWx1ZXM6IGFjdGlvbi5tZXNzYWdlVmFsdWVzIH0sXG4gICAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0hPV19NRVNTQUdFUzpcbiAgICAgIHJldHVybiBzdGF0ZS5tZXJnZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSwgSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24ubWVzc2FnZXMpKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0VMTF9ISURFX01FU1NBR0U6IHtcbiAgICAgIGlmIChhY3Rpb24ubWVzc2FnZVR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aW9uLmRhdGFJZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcycsIGFjdGlvbi5tZXNzYWdlVHlwZV0pO1xuICAgICAgfVxuICAgICAgbGV0IHJvd01lc3NhZ2UgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24uZGF0YUlkXSk7XG4gICAgICBpZiAocm93TWVzc2FnZSkge1xuICAgICAgICBpZiAoYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByb3dNZXNzYWdlID0gcm93TWVzc2FnZS5kZWxldGVJbihhY3Rpb24ua2V5UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvd01lc3NhZ2Uuc2l6ZSA9PT0gMCB8fCAhYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcycsIGFjdGlvbi5tZXNzYWdlVHlwZSwgYWN0aW9uLmRhdGFJZF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24uZGF0YUlkXSxcbiAgICAgICAgICByb3dNZXNzYWdlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfU0hPV19NRVNTQUdFOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24ucm93SW5kZXgsIC4uLmFjdGlvbi5rZXlQYXRoXSxcbiAgICAgICAgICB7IGlkOiBhY3Rpb24ubWVzc2FnZUlkLCB2YWx1ZXM6IGFjdGlvbi5tZXNzYWdlVmFsdWVzIH0sXG4gICAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURV9DRUxMX0hJREVfTUVTU0FHRToge1xuICAgICAgaWYgKGFjdGlvbi5tZXNzYWdlVHlwZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZUNlbGxNZXNzYWdlcyddKTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3Rpb24ucm93SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVDZWxsTWVzc2FnZXMnLCBhY3Rpb24ubWVzc2FnZVR5cGVdKTtcbiAgICAgIH1cbiAgICAgIGxldCByb3dNZXNzYWdlID0gc3RhdGUuZ2V0SW4oW1xuICAgICAgICBhY3Rpb24uaWQsXG4gICAgICAgICdjcmVhdGVDZWxsTWVzc2FnZXMnLFxuICAgICAgICBhY3Rpb24ubWVzc2FnZVR5cGUsXG4gICAgICAgIGFjdGlvbi5yb3dJbmRleCxcbiAgICAgIF0pO1xuICAgICAgaWYgKHJvd01lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGFjdGlvbi5rZXlQYXRoKSB7XG4gICAgICAgICAgcm93TWVzc2FnZSA9IHJvd01lc3NhZ2UuZGVsZXRlSW4oYWN0aW9uLmtleVBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3dNZXNzYWdlLnNpemUgPT09IDAgfHwgIWFjdGlvbi5rZXlQYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFtcbiAgICAgICAgICAgIGFjdGlvbi5pZCxcbiAgICAgICAgICAgICdjcmVhdGVDZWxsTWVzc2FnZXMnLFxuICAgICAgICAgICAgYWN0aW9uLm1lc3NhZ2VUeXBlLFxuICAgICAgICAgICAgYWN0aW9uLnJvd0luZGV4LFxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24ucm93SW5kZXhdLFxuICAgICAgICAgIHJvd01lc3NhZ2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DRUxMX1NFTEVDVElPTl9DSEFOR0U6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkQ2VsbCddLCBhY3Rpb24uc2VsZWN0ZWRDZWxsKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfSVRFTV9TRUxFQ1RJT05fQ0hBTkdFOiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2xhc3RDbGlja2VkUm93SW5kZXgnXSwgYWN0aW9uLnJvd0luZGV4KTtcblxuICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlcmUgc2hpZnQga2V5IGlzIHByZXNzZWRcbiAgICAgIC8vIFNlbGVjdCBhbGwgcm93cyBmcm9tIGxhc3RDbGlja2VkUm93IHRvIGN1cnJlbnRseSBjbGlja2VkIHJvd1xuICAgICAgaWYgKGFjdGlvbi5zaGlmdFByZXNzZWQpIHtcbiAgICAgICAgY29uc3QgbGFzdFJvd0luZGV4ID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnbGFzdENsaWNrZWRSb3dJbmRleCddLCBmYWxzZSk7XG4gICAgICAgIGlmIChsYXN0Um93SW5kZXggIT09IGZhbHNlKSB7XG4gICAgICAgICAgY29uc3Qgc2VsZWN0Um93SWRzID0gW107XG4gICAgICAgICAgaWYgKGxhc3RSb3dJbmRleCA8IGFjdGlvbi5yb3dJbmRleCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGxhc3RSb3dJbmRleDsgaSA8PSBhY3Rpb24ucm93SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhSWQgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnZGF0YScsIGksIC4uLmFjdGlvbi5pZEtleVBhdGhdKTtcbiAgICAgICAgICAgICAgaWYgKGRhdGFJZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdFJvd0lkcy5wdXNoKGRhdGFJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGFjdGlvbi5yb3dJbmRleDsgaSA8PSBsYXN0Um93SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBjb25zdCBkYXRhSWQgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnZGF0YScsIGksIC4uLmFjdGlvbi5pZEtleVBhdGhdKTtcbiAgICAgICAgICAgICAgaWYgKGRhdGFJZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdFJvd0lkcy5wdXNoKGRhdGFJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ld1N0YXRlXG4gICAgICAgICAgICAuc2V0SW4oXG4gICAgICAgICAgICAgIFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sXG4gICAgICAgICAgICAgIExpc3Qoc2VsZWN0Um93SWRzKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YUlkID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnLCBhY3Rpb24ucm93SW5kZXgsIC4uLmFjdGlvbi5pZEtleVBhdGhdKTtcbiAgICAgIGNvbnN0IGZvdW5kSW5kZXggPSBzdGF0ZVxuICAgICAgICAuZ2V0SW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSwgTGlzdCgpKS5pbmRleE9mKGRhdGFJZCk7XG4gICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGFjdGlvbi5jdHJsUHJlc3NlZCkge1xuICAgICAgICAgIHJldHVybiBuZXdTdGF0ZVxuICAgICAgICAgICAgLnVwZGF0ZUluKFxuICAgICAgICAgICAgICBbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLFxuICAgICAgICAgICAgICBMaXN0KCksIGl0ZW1zID0+IGl0ZW1zLnB1c2goZGF0YUlkKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlXG4gICAgICAgICAgLnNldEluKFxuICAgICAgICAgICAgW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSxcbiAgICAgICAgICAgIExpc3QoW2RhdGFJZF0pLFxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aW9uLmN0cmxQcmVzc2VkKSB7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZVxuICAgICAgICAgIC51cGRhdGVJbihcbiAgICAgICAgICAgIFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sXG4gICAgICAgICAgICBpdGVtcyA9PiBpdGVtcy5kZWxldGUoZm91bmRJbmRleCksXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZVxuICAgICAgICAuc2V0SW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSxcbiAgICAgICAgICBMaXN0KFtkYXRhSWRdKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFTEVDVF9BTExfSVRFTVNfQ0hBTkdFOlxuICAgICAgaWYgKFxuICAgICAgICBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLCBMaXN0KCkpLnNpemVcbiAgICAgICAgPT09IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIExpc3QoKSkuc2l6ZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5kZWxldGVJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSxcbiAgICAgICAgICBzdGF0ZVxuICAgICAgICAgICAgLmdldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIExpc3QoKSlcbiAgICAgICAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpKSxcbiAgICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0xFQVJfU0VMRUNURURfSVRFTVM6XG4gICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1RPR0dMRV9GSUxURVJJTkc6IHtcbiAgICAgIGlmICghYWN0aW9uLmlzRmlsdGVyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2ZpbHRlcmluZ0RhdGEnXSwgTWFwKHsgaXNGaWx0ZXJpbmc6IGZhbHNlIH0pKVxuICAgICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnZGF0YSddLCBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjb25maWcnLCAnZmlsdGVyaW5nRGF0YSddLCBNYXAoeyBpc0ZpbHRlcmluZzogdHJ1ZSB9KSk7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9GSUxURVJfREFUQV9DSEFOR0U6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFxuICAgICAgICAgIFthY3Rpb24uaWQsICdjb25maWcnLCAnZmlsdGVyaW5nRGF0YScsICdmaWx0ZXJEYXRhJ10sXG4gICAgICAgICAgYWN0aW9uLmZpbHRlckRhdGEsXG4gICAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0FQUExZX0ZJTFRFUlM6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFxuICAgICAgICAgIFthY3Rpb24uaWQsICdkYXRhJ10sXG4gICAgICAgICAgYWN0aW9uLmRhdGEsXG4gICAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9GSUxURVJTOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2ZpbHRlcmluZ0RhdGEnXSxcbiAgICAgICAgICBhY3Rpb24uZmlsdGVyaW5nRGF0YSxcbiAgICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfVVBEQVRFX0VYSVNUSU5HX0NFTExfVkFMVUU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gc3RhdGVcbiAgICAgICAgLnNldEluKFxuICAgICAgICAgIFthY3Rpb24uaWQsICdhbGxEYXRhJywgYWN0aW9uLmRhdGFJZCwgLi4uYWN0aW9uLmtleVBhdGhdLFxuICAgICAgICAgIGFjdGlvbi52YWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIGlmIChzdGF0ZS5oYXNJbihbYWN0aW9uLmlkLCAnZGF0YScsIGFjdGlvbi5kYXRhSWQsIC4uLmFjdGlvbi5rZXlQYXRoXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlXG4gICAgICAgICAgLnNldEluKFxuICAgICAgICAgICAgW2FjdGlvbi5pZCwgJ2RhdGEnLCBhY3Rpb24uZGF0YUlkLCAuLi5hY3Rpb24ua2V5UGF0aF0sXG4gICAgICAgICAgICBhY3Rpb24udmFsdWUsXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9FRElUX0RBVEE6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzRWRpdGluZyddLCB0cnVlKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJ10sIGFjdGlvbi5kYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcyddLCBhY3Rpb24uY2VsbE1lc3NhZ2VzKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX01PREFMX09QRU46XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnY29sdW1uU2V0dGluZ3NNb2RhbCcsICdvcGVuJ10sIHRydWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfTU9EQUxfQ0xPU0U6XG4gICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnY29sdW1uU2V0dGluZ3NNb2RhbCddKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX1NBVkU6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjb25maWcnLCAndmlzaWJsZUNvbHVtbnMnXSwgSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uY29sdW1uT3JkZXIpKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VUX1BBR0U6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjb25maWcnLCAncGFnZSddLCBhY3Rpb24ucGFnZSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9ST1dTX09OX1BBR0U6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjb25maWcnLCAncm93c09uUGFnZSddLCBhY3Rpb24ucm93c09uUGFnZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXX0=