"use strict";

exports.__esModule = true;
exports["default"] = datagridReducer;

var _immutable = _interopRequireWildcard(require("immutable"));

var _datagrid = require("./datagrid.actions");

var _datagrid2 = require("./datagrid.constants");

var _datagrid3 = _interopRequireDefault(require("./datagrid.utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function datagridReducer(state, action) {
  if (state === void 0) {
    state = _datagrid2.INITIAL_STATE;
  }

  switch (action.type) {
    case _datagrid.TYPES.PLATFORM_DATAGRID_INVALIDATE:
      return state.deleteIn([action.id, 'data']).deleteIn([action.id, 'allData']).deleteIn([action.id, 'session']).deleteIn([action.id, 'selectedCell']).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages']).deleteIn([action.id, 'cellMessages']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_FORCE_REFRESH:
      return state.set('forceRefresh', Date.now());

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_DATA:
      return state.setIn([action.id, 'data'], action.data).setIn([action.id, 'allData'], action.data).setIn([action.id, 'config'], _immutable["default"].fromJS(action.config)).setIn([action.id, 'selectedItems'], _immutable["default"].fromJS(action.selectedItems)).mergeIn([action.id, 'session'], {
        isEditing: false,
        isCreating: false,
        isBusy: false
      }).deleteIn([action.id, 'selectedCell']).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages']).deleteIn([action.id, 'cellMessages']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_BUSY:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_READY:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_APPLY_SORT:
      return state.setIn([action.id, 'data'], action.data).setIn([action.id, 'allData'], action.allData);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SORT_CHANGE:
      return state.setIn([action.id, 'config', 'sortingData'], (0, _immutable.Map)({
        sortColumn: action.sortColumn,
        sortOrder: action.sortOrder
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_RESIZE_COLUMN:
      return state.setIn([action.id, 'config', 'columnWidths'], action.columnWidths);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EDIT:
      return state.setIn([action.id, 'session', 'isEditing'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE:
      return state.setIn([action.id, 'createData'], (0, _immutable.List)([_immutable["default"].fromJS(action.columnDefaultValues)])).deleteIn([action.id, 'selectedCell']).mergeIn([action.id, 'session'], {
        isCreating: true
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_ADD_NEW_ITEM:
      return state.updateIn([action.id, 'createData'], (0, _immutable.List)(), function (items) {
        return items.push(_immutable["default"].fromJS(action.columnDefaultValues));
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_ITEM:
      {
        var allDataIndex = state.getIn([action.id, 'allData'], (0, _immutable.List)()).findIndex(function (item) {
          return item.getIn(action.idKeyPath) === action.rowId;
        });
        var dataIndex = state.getIn([action.id, 'data'], (0, _immutable.List)()).findIndex(function (item) {
          return item.getIn(action.idKeyPath) === action.rowId;
        });
        return state.deleteIn([action.id, 'data', dataIndex]).deleteIn([action.id, 'allData', allDataIndex]).deleteIn([action.id, 'editData', action.rowId]).deleteIn([action.id, 'cellMessages', 'error', action.rowId]).deleteIn([action.id, 'cellMessages', 'info', action.rowId]).deleteIn([action.id, 'cellMessages', 'warning', action.rowId]);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_FOCUS_TO:
      {
        // focus type is saved as a immutable Map to make it easier to detect changes
        // when requesting same type of focus several times
        return state.setIn([action.id, 'session', 'focusType'], (0, _immutable.Map)({
          type: action.focusTo,
          focusToLastRow: action.focusToLastRow
        }));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_NEW_ITEM:
      return state.deleteIn([action.id, 'createData', action.index]);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_NEW_ITEMS:
      return state.setIn([action.id, 'createData'], state.getIn([action.id, 'createData'], (0, _immutable.List)()).filter(function (val, idx) {
        return action.indexes.indexOf(idx) === -1;
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CANCEL:
      return state.mergeIn([action.id, 'session'], (0, _immutable.Map)({
        isEditing: false,
        isCreating: false
      })).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages', 'error']).deleteIn([action.id, 'cellMessages', 'error']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EXTEND_DATA:
      {
        var allData = state.getIn([action.id, 'allData']);
        var extendedData = action.prepend ? action.data.concat(allData) : allData.concat(action.data);
        return state.setIn([action.id, 'data'], extendedData).setIn([action.id, 'allData'], extendedData);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_SUCCESS:
      {
        var _allData = state.getIn([action.id, 'allData']);

        var firstCreatedId = null;
        action.savedItems.forEach(function (savedItemJS) {
          var savedItem = _immutable["default"].fromJS(savedItemJS);

          var foundIndex = _allData.findIndex(function (d) {
            return d.getIn(action.idKeyPath) === savedItem.getIn(action.idKeyPath);
          });

          if (foundIndex === -1) {
            if (!firstCreatedId && savedItem.getIn(action.idKeyPath)) {
              firstCreatedId = savedItem.getIn(action.idKeyPath);
            }

            _allData = _allData.push(savedItem);
          } else {
            _allData = _allData.mergeDeepIn([foundIndex], savedItem);
          }
        });
        var newState = state.setIn([action.id, 'data'], _allData).setIn([action.id, 'allData'], _allData).mergeIn([action.id, 'session'], {
          isBusy: false,
          isEditing: false,
          isCreating: false
        }).deleteIn([action.id, 'editData']).deleteIn([action.id, 'createData']).deleteIn([action.id, 'createCellMessages', 'error']).deleteIn([action.id, 'cellMessages', 'error']);

        if (firstCreatedId) {
          _datagrid3["default"].saveSelectedItems(action.id, [firstCreatedId]);

          newState = newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([firstCreatedId]));
        }

        return newState;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_PARTIAL_SUCCESS:
      {
        var _allData2 = state.getIn([action.id, 'allData']);

        var createData = state.getIn([action.id, 'createData']);
        var editData = state.getIn([action.id, 'editData']);
        var isCreating = state.getIn([action.id, 'session', 'isCreating']);
        action.savedItems.forEach(function (savedItemJS) {
          var savedItem = _immutable["default"].fromJS(savedItemJS);

          var foundIndex = _allData2.findIndex(function (d) {
            return d.getIn(action.idKeyPath) === savedItem.getIn(action.idKeyPath);
          });

          if (foundIndex === -1) {
            _allData2 = _allData2.push(savedItem);
          } else {
            _allData2 = _allData2.mergeDeepIn([foundIndex], savedItem);
          }

          if (isCreating) {
            foundIndex = savedItem.get('rowIndex');

            if (foundIndex !== undefined && foundIndex !== null) {
              createData = createData["delete"](foundIndex);
            }
          } else {
            editData = editData["delete"](savedItem.getIn(action.idKeyPath));
          }
        });
        return state.setIn([action.id, 'data'], _allData2).setIn([action.id, 'allData'], _allData2).setIn([action.id, 'createData'], createData).setIn([action.id, 'editData'], editData).setIn([action.id, 'session', 'isBusy'], false);
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SAVE_FAIL:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE:
      return state.setIn([action.id, 'session', 'isBusy'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_SUCCESS:
      return state.setIn([action.id, 'session', 'isBusy'], false).updateIn([action.id, 'data'], function (data) {
        return data.filterNot(function (item) {
          return action.removedIds.indexOf(item.getIn(action.idKeyPath)) > -1;
        });
      }).updateIn([action.id, 'allData'], function (data) {
        return data.filterNot(function (item) {
          return action.removedIds.indexOf(item.getIn(action.idKeyPath)) > -1;
        });
      }).deleteIn([action.id, 'selectedItems']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_REMOVE_FAIL:
      return state.setIn([action.id, 'session', 'isBusy'], false);

    case _datagrid.TYPES.PLATFORM_DATAGRID_EDIT_CELL_VALUE_CHANGE:
      return state.setIn([action.id, 'editData', action.dataId].concat(action.keyPath), action.value);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_VALUE_CHANGE:
      return state.setIn([action.id, 'createData', action.rowIndex].concat(action.keyPath), action.value);

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SHOW_MESSAGE:
      return state.setIn([action.id, 'cellMessages', action.messageType, action.dataId].concat(action.keyPath), {
        id: action.messageId,
        values: action.messageValues
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SHOW_MESSAGES:
      return state.mergeIn([action.id, 'cellMessages'], _immutable["default"].fromJS(action.messages));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_HIDE_MESSAGE:
      {
        if (action.messageType === null) {
          return state.deleteIn([action.id, 'cellMessages']);
        }

        if (action.dataId === null) {
          return state.deleteIn([action.id, 'cellMessages', action.messageType]);
        }

        var rowMessage = state.getIn([action.id, 'cellMessages', action.messageType, action.dataId]);

        if (rowMessage) {
          if (action.keyPath) {
            rowMessage = rowMessage.deleteIn(action.keyPath);
          }

          if (rowMessage.size === 0 || !action.keyPath) {
            return state.deleteIn([action.id, 'cellMessages', action.messageType, action.dataId]);
          }

          return state.setIn([action.id, 'cellMessages', action.messageType, action.dataId], rowMessage);
        }

        return state;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_SHOW_MESSAGE:
      return state.setIn([action.id, 'createCellMessages', action.messageType, action.rowIndex].concat(action.keyPath), {
        id: action.messageId,
        values: action.messageValues
      });

    case _datagrid.TYPES.PLATFORM_DATAGRID_CREATE_CELL_HIDE_MESSAGE:
      {
        if (action.messageType === null) {
          return state.deleteIn([action.id, 'createCellMessages']);
        }

        if (action.rowIndex === null) {
          return state.deleteIn([action.id, 'createCellMessages', action.messageType]);
        }

        var _rowMessage = state.getIn([action.id, 'createCellMessages', action.messageType, action.rowIndex]);

        if (_rowMessage) {
          if (action.keyPath) {
            _rowMessage = _rowMessage.deleteIn(action.keyPath);
          }

          if (_rowMessage.size === 0 || !action.keyPath) {
            return state.deleteIn([action.id, 'createCellMessages', action.messageType, action.rowIndex]);
          }

          return state.setIn([action.id, 'createCellMessages', action.messageType, action.rowIndex], _rowMessage);
        }

        return state;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_CELL_SELECTION_CHANGE:
      return state.setIn([action.id, 'selectedCell'], action.selectedCell);

    case _datagrid.TYPES.PLATFORM_DATAGRID_ITEM_SELECTION_CHANGE:
      {
        var _newState = state.setIn([action.id, 'session', 'lastClickedRowIndex'], action.rowIndex); // Handle case where shift key is pressed
        // Select all rows from lastClickedRow to currently clicked row


        if (action.shiftPressed) {
          var lastRowIndex = state.getIn([action.id, 'session', 'lastClickedRowIndex'], false);

          if (lastRowIndex !== false) {
            var selectRowIds = [];

            if (lastRowIndex < action.rowIndex) {
              for (var i = lastRowIndex; i <= action.rowIndex; i += 1) {
                var _dataId = state.getIn([action.id, 'data', i].concat(action.idKeyPath));

                if (_dataId) {
                  selectRowIds.push(_dataId);
                }
              }
            } else {
              for (var _i = action.rowIndex; _i <= lastRowIndex; _i += 1) {
                var _dataId2 = state.getIn([action.id, 'data', _i].concat(action.idKeyPath));

                if (_dataId2) {
                  selectRowIds.push(_dataId2);
                }
              }
            }

            return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)(selectRowIds));
          }
        }

        var dataId = state.getIn([action.id, 'data', action.rowIndex].concat(action.idKeyPath));
        var foundIndex = state.getIn([action.id, 'selectedItems'], (0, _immutable.List)()).indexOf(dataId);

        if (foundIndex === -1) {
          if (action.ctrlPressed) {
            return _newState.updateIn([action.id, 'selectedItems'], (0, _immutable.List)(), function (items) {
              return items.push(dataId);
            });
          }

          return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([dataId]));
        }

        if (action.ctrlPressed) {
          return _newState.updateIn([action.id, 'selectedItems'], function (items) {
            return items["delete"](foundIndex);
          });
        }

        return _newState.setIn([action.id, 'selectedItems'], (0, _immutable.List)([dataId]));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SELECT_ALL_ITEMS_CHANGE:
      if (state.getIn([action.id, 'selectedItems'], (0, _immutable.List)()).size === state.getIn([action.id, 'data'], (0, _immutable.List)()).size) {
        return state.deleteIn([action.id, 'selectedItems']);
      }

      return state.setIn([action.id, 'selectedItems'], state.getIn([action.id, 'data'], (0, _immutable.List)()).map(function (item) {
        return item.getIn(action.idKeyPath);
      }));

    case _datagrid.TYPES.PLATFORM_DATAGRID_CLEAR_SELECTED_ITEMS:
      return state.deleteIn([action.id, 'selectedItems']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_TOGGLE_FILTERING:
      {
        if (!action.isFiltering) {
          return state.setIn([action.id, 'config', 'filteringData'], (0, _immutable.Map)({
            isFiltering: false
          })).setIn([action.id, 'data'], state.getIn([action.id, 'allData']));
        }

        return state.setIn([action.id, 'config', 'filteringData'], (0, _immutable.Map)({
          isFiltering: true
        }));
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_FILTER_DATA_CHANGE:
      return state.setIn([action.id, 'config', 'filteringData', 'filterData'], _immutable["default"].fromJS(action.filterData));

    case _datagrid.TYPES.PLATFORM_DATAGRID_APPLY_FILTERS:
      return state.setIn([action.id, 'data'], action.data);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_FILTERS:
      return state.setIn([action.id, 'config', 'filteringData'], action.filteringData);

    case _datagrid.TYPES.PLATFORM_DATAGRID_UPDATE_EXISTING_CELL_VALUE:
      {
        var _newState2 = state.setIn([action.id, 'allData', action.dataId].concat(action.keyPath), action.value);

        if (state.hasIn([action.id, 'data', action.dataId].concat(action.keyPath))) {
          return _newState2.setIn([action.id, 'data', action.dataId].concat(action.keyPath), action.value);
        }

        return _newState2;
      }

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_EDIT_DATA:
      return state.setIn([action.id, 'session', 'isEditing'], true).setIn([action.id, 'editData'], action.data).setIn([action.id, 'cellMessages'], action.cellMessages);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_MODAL_OPEN:
      return state.setIn([action.id, 'session', 'columnSettingsModal', 'open'], true);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_MODAL_CLOSE:
      return state.deleteIn([action.id, 'session', 'columnSettingsModal']);

    case _datagrid.TYPES.PLATFORM_DATAGRID_COLUMN_SETTINGS_SAVE:
      return state.setIn([action.id, 'config', 'visibleColumns'], _immutable["default"].fromJS(action.columnOrder));

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_PAGE:
      return state.setIn([action.id, 'config', 'page'], action.page);

    case _datagrid.TYPES.PLATFORM_DATAGRID_SET_ROWS_ON_PAGE:
      return state.setIn([action.id, 'config', 'rowsOnPage'], action.rowsOnPage);

    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9kYXRhZ3JpZC5yZWR1Y2VyLmpzIl0sIm5hbWVzIjpbImRhdGFncmlkUmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwiSU5JVElBTF9TVEFURSIsInR5cGUiLCJUWVBFUyIsIlBMQVRGT1JNX0RBVEFHUklEX0lOVkFMSURBVEUiLCJkZWxldGVJbiIsImlkIiwiUExBVEZPUk1fREFUQUdSSURfRk9SQ0VfUkVGUkVTSCIsInNldCIsIkRhdGUiLCJub3ciLCJQTEFURk9STV9EQVRBR1JJRF9TRVRfREFUQSIsInNldEluIiwiZGF0YSIsIkltbXV0YWJsZSIsImZyb21KUyIsImNvbmZpZyIsInNlbGVjdGVkSXRlbXMiLCJtZXJnZUluIiwiaXNFZGl0aW5nIiwiaXNDcmVhdGluZyIsImlzQnVzeSIsIlBMQVRGT1JNX0RBVEFHUklEX0JVU1kiLCJQTEFURk9STV9EQVRBR1JJRF9SRUFEWSIsIlBMQVRGT1JNX0RBVEFHUklEX0FQUExZX1NPUlQiLCJhbGxEYXRhIiwiUExBVEZPUk1fREFUQUdSSURfU09SVF9DSEFOR0UiLCJzb3J0Q29sdW1uIiwic29ydE9yZGVyIiwiUExBVEZPUk1fREFUQUdSSURfUkVTSVpFX0NPTFVNTiIsImNvbHVtbldpZHRocyIsIlBMQVRGT1JNX0RBVEFHUklEX0VESVQiLCJQTEFURk9STV9EQVRBR1JJRF9DUkVBVEUiLCJjb2x1bW5EZWZhdWx0VmFsdWVzIiwiUExBVEZPUk1fREFUQUdSSURfQUREX05FV19JVEVNIiwidXBkYXRlSW4iLCJpdGVtcyIsInB1c2giLCJQTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfSVRFTSIsImFsbERhdGFJbmRleCIsImdldEluIiwiZmluZEluZGV4IiwiaXRlbSIsImlkS2V5UGF0aCIsInJvd0lkIiwiZGF0YUluZGV4IiwiUExBVEZPUk1fREFUQUdSSURfU0VUX0ZPQ1VTX1RPIiwiZm9jdXNUbyIsImZvY3VzVG9MYXN0Um93IiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX05FV19JVEVNIiwiaW5kZXgiLCJQTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfTkVXX0lURU1TIiwiZmlsdGVyIiwidmFsIiwiaWR4IiwiaW5kZXhlcyIsImluZGV4T2YiLCJQTEFURk9STV9EQVRBR1JJRF9DQU5DRUwiLCJQTEFURk9STV9EQVRBR1JJRF9TQVZFIiwiUExBVEZPUk1fREFUQUdSSURfRVhURU5EX0RBVEEiLCJleHRlbmRlZERhdGEiLCJwcmVwZW5kIiwiY29uY2F0IiwiUExBVEZPUk1fREFUQUdSSURfU0FWRV9TVUNDRVNTIiwiZmlyc3RDcmVhdGVkSWQiLCJzYXZlZEl0ZW1zIiwiZm9yRWFjaCIsInNhdmVkSXRlbUpTIiwic2F2ZWRJdGVtIiwiZm91bmRJbmRleCIsImQiLCJtZXJnZURlZXBJbiIsIm5ld1N0YXRlIiwiVXRpbHMiLCJzYXZlU2VsZWN0ZWRJdGVtcyIsIlBMQVRGT1JNX0RBVEFHUklEX1NBVkVfUEFSVElBTF9TVUNDRVNTIiwiY3JlYXRlRGF0YSIsImVkaXREYXRhIiwiZ2V0IiwidW5kZWZpbmVkIiwiUExBVEZPUk1fREFUQUdSSURfU0FWRV9GQUlMIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX1NVQ0NFU1MiLCJmaWx0ZXJOb3QiLCJyZW1vdmVkSWRzIiwiUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX0ZBSUwiLCJQTEFURk9STV9EQVRBR1JJRF9FRElUX0NFTExfVkFMVUVfQ0hBTkdFIiwiZGF0YUlkIiwia2V5UGF0aCIsInZhbHVlIiwiUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfVkFMVUVfQ0hBTkdFIiwicm93SW5kZXgiLCJQTEFURk9STV9EQVRBR1JJRF9DRUxMX1NIT1dfTUVTU0FHRSIsIm1lc3NhZ2VUeXBlIiwibWVzc2FnZUlkIiwidmFsdWVzIiwibWVzc2FnZVZhbHVlcyIsIlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0hPV19NRVNTQUdFUyIsIm1lc3NhZ2VzIiwiUExBVEZPUk1fREFUQUdSSURfQ0VMTF9ISURFX01FU1NBR0UiLCJyb3dNZXNzYWdlIiwic2l6ZSIsIlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURV9DRUxMX1NIT1dfTUVTU0FHRSIsIlBMQVRGT1JNX0RBVEFHUklEX0NSRUFURV9DRUxMX0hJREVfTUVTU0FHRSIsIlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0VMRUNUSU9OX0NIQU5HRSIsInNlbGVjdGVkQ2VsbCIsIlBMQVRGT1JNX0RBVEFHUklEX0lURU1fU0VMRUNUSU9OX0NIQU5HRSIsInNoaWZ0UHJlc3NlZCIsImxhc3RSb3dJbmRleCIsInNlbGVjdFJvd0lkcyIsImkiLCJjdHJsUHJlc3NlZCIsIlBMQVRGT1JNX0RBVEFHUklEX1NFTEVDVF9BTExfSVRFTVNfQ0hBTkdFIiwibWFwIiwiUExBVEZPUk1fREFUQUdSSURfQ0xFQVJfU0VMRUNURURfSVRFTVMiLCJQTEFURk9STV9EQVRBR1JJRF9UT0dHTEVfRklMVEVSSU5HIiwiaXNGaWx0ZXJpbmciLCJQTEFURk9STV9EQVRBR1JJRF9GSUxURVJfREFUQV9DSEFOR0UiLCJmaWx0ZXJEYXRhIiwiUExBVEZPUk1fREFUQUdSSURfQVBQTFlfRklMVEVSUyIsIlBMQVRGT1JNX0RBVEFHUklEX1NFVF9GSUxURVJTIiwiZmlsdGVyaW5nRGF0YSIsIlBMQVRGT1JNX0RBVEFHUklEX1VQREFURV9FWElTVElOR19DRUxMX1ZBTFVFIiwiaGFzSW4iLCJQTEFURk9STV9EQVRBR1JJRF9TRVRfRURJVF9EQVRBIiwiY2VsbE1lc3NhZ2VzIiwiUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX01PREFMX09QRU4iLCJQTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfTU9EQUxfQ0xPU0UiLCJQTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfU0FWRSIsImNvbHVtbk9yZGVyIiwiUExBVEZPUk1fREFUQUdSSURfU0VUX1BBR0UiLCJwYWdlIiwiUExBVEZPUk1fREFUQUdSSURfU0VUX1JPV1NfT05fUEFHRSIsInJvd3NP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QkFBTStILDBCQUFYO0FBQ0UsYUFBT25JLEtBQUssQ0FBQ2EsS0FBTixDQUFZLENBQUNaLE1BQU0sQ0FBQ00sRUFBUixFQUFZLFFBQVosRUFBc0IsTUFBdEIsQ0FBWixFQUEyQ04sTUFBTSxDQUFDbUksSUFBbEQsQ0FBUDs7QUFFRixTQUFLaEksZ0JBQU1pSSxrQ0FBWDtBQUNFLGFBQU9ySSxLQUFLLENBQUNhLEtBQU4sQ0FBWSxDQUFDWixNQUFNLENBQUNNLEVBQVIsRUFBWSxRQUFaLEVBQXNCLFlBQXRCLENBQVosRUFBaUROLE1BQU0sQ0FBQ3FJLFVBQXhELENBQVA7O0FBRUY7QUFDRSxhQUFPdEksS0FBUDtBQWpiSjtBQW1iRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbW11dGFibGUsIHsgTWFwLCBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IFRZUEVTIH0gZnJvbSAnLi9kYXRhZ3JpZC5hY3Rpb25zJztcbmltcG9ydCB7IElOSVRJQUxfU1RBVEUgfSBmcm9tICcuL2RhdGFncmlkLmNvbnN0YW50cyc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9kYXRhZ3JpZC51dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGFncmlkUmVkdWNlcihzdGF0ZSA9IElOSVRJQUxfU1RBVEUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9JTlZBTElEQVRFOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZGF0YSddKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRDZWxsJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJ10pO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9GT1JDRV9SRUZSRVNIOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldCgnZm9yY2VSZWZyZXNoJywgRGF0ZS5ub3coKSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9EQVRBOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnZGF0YSddLCBhY3Rpb24uZGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGFjdGlvbi5kYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2NvbmZpZyddLCBJbW11dGFibGUuZnJvbUpTKGFjdGlvbi5jb25maWcpKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSwgSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uc2VsZWN0ZWRJdGVtcykpXG4gICAgICAgIC5tZXJnZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10sIHtcbiAgICAgICAgICBpc0VkaXRpbmc6IGZhbHNlLFxuICAgICAgICAgIGlzQ3JlYXRpbmc6IGZhbHNlLFxuICAgICAgICAgIGlzQnVzeTogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRDZWxsJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJ10pO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9CVVNZOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCB0cnVlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVBRFk6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIGZhbHNlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQVBQTFlfU09SVDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgYWN0aW9uLmRhdGEpXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddLCBhY3Rpb24uYWxsRGF0YSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NPUlRfQ0hBTkdFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnY29uZmlnJywgJ3NvcnRpbmdEYXRhJ10sXG4gICAgICAgIE1hcCh7XG4gICAgICAgICAgc29ydENvbHVtbjogYWN0aW9uLnNvcnRDb2x1bW4sXG4gICAgICAgICAgc29ydE9yZGVyOiBhY3Rpb24uc29ydE9yZGVyLFxuICAgICAgICB9KSxcbiAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1JFU0laRV9DT0xVTU46XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ2NvbmZpZycsICdjb2x1bW5XaWR0aHMnXSwgYWN0aW9uLmNvbHVtbldpZHRocyk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0VESVQ6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNFZGl0aW5nJ10sIHRydWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DUkVBVEU6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10sIExpc3QoW0ltbXV0YWJsZS5mcm9tSlMoYWN0aW9uLmNvbHVtbkRlZmF1bHRWYWx1ZXMpXSkpXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRDZWxsJ10pXG4gICAgICAgIC5tZXJnZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10sIHtcbiAgICAgICAgICBpc0NyZWF0aW5nOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQUREX05FV19JVEVNOlxuICAgICAgcmV0dXJuIHN0YXRlLnVwZGF0ZUluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnY3JlYXRlRGF0YSddLFxuICAgICAgICBMaXN0KCksXG4gICAgICAgIGl0ZW1zID0+IGl0ZW1zLnB1c2goSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uY29sdW1uRGVmYXVsdFZhbHVlcykpLFxuICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX0lURU06IHtcbiAgICAgIGNvbnN0IGFsbERhdGFJbmRleCA9IHN0YXRlXG4gICAgICAgIC5nZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddLCBMaXN0KCkpXG4gICAgICAgIC5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpID09PSBhY3Rpb24ucm93SWQpO1xuICAgICAgY29uc3QgZGF0YUluZGV4ID0gc3RhdGVcbiAgICAgICAgLmdldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIExpc3QoKSlcbiAgICAgICAgLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkgPT09IGFjdGlvbi5yb3dJZCk7XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdkYXRhJywgZGF0YUluZGV4XSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdhbGxEYXRhJywgYWxsRGF0YUluZGV4XSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdlZGl0RGF0YScsIGFjdGlvbi5yb3dJZF0pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ2Vycm9yJywgYWN0aW9uLnJvd0lkXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnLCAnaW5mbycsIGFjdGlvbi5yb3dJZF0pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ3dhcm5pbmcnLCBhY3Rpb24ucm93SWRdKTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9GT0NVU19UTzoge1xuICAgICAgLy8gZm9jdXMgdHlwZSBpcyBzYXZlZCBhcyBhIGltbXV0YWJsZSBNYXAgdG8gbWFrZSBpdCBlYXNpZXIgdG8gZGV0ZWN0IGNoYW5nZXNcbiAgICAgIC8vIHdoZW4gcmVxdWVzdGluZyBzYW1lIHR5cGUgb2YgZm9jdXMgc2V2ZXJhbCB0aW1lc1xuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnc2Vzc2lvbicsICdmb2N1c1R5cGUnXSxcbiAgICAgICAgTWFwKHsgdHlwZTogYWN0aW9uLmZvY3VzVG8sIGZvY3VzVG9MYXN0Um93OiBhY3Rpb24uZm9jdXNUb0xhc3RSb3cgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfUkVNT1ZFX05FV19JVEVNOlxuICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJywgYWN0aW9uLmluZGV4XSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1JFTU9WRV9ORVdfSVRFTVM6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oXG4gICAgICAgIFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10sXG4gICAgICAgIHN0YXRlXG4gICAgICAgICAgLmdldEluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10sIExpc3QoKSlcbiAgICAgICAgICAuZmlsdGVyKCh2YWwsIGlkeCkgPT4gYWN0aW9uLmluZGV4ZXMuaW5kZXhPZihpZHgpID09PSAtMSksXG4gICAgICApO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DQU5DRUw6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLm1lcmdlSW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ3Nlc3Npb24nXSxcbiAgICAgICAgICBNYXAoe1xuICAgICAgICAgICAgaXNFZGl0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ3JlYXRpbmc6IGZhbHNlLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TQVZFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCB0cnVlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfRVhURU5EX0RBVEE6IHtcbiAgICAgIGNvbnN0IGFsbERhdGEgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddKTtcbiAgICAgIGNvbnN0IGV4dGVuZGVkRGF0YSA9IGFjdGlvbi5wcmVwZW5kXG4gICAgICAgID8gYWN0aW9uLmRhdGEuY29uY2F0KGFsbERhdGEpXG4gICAgICAgIDogYWxsRGF0YS5jb25jYXQoYWN0aW9uLmRhdGEpO1xuXG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdkYXRhJ10sIGV4dGVuZGVkRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGV4dGVuZGVkRGF0YSk7XG4gICAgfVxuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TQVZFX1NVQ0NFU1M6IHtcbiAgICAgIGxldCBhbGxEYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSk7XG4gICAgICBsZXQgZmlyc3RDcmVhdGVkSWQgPSBudWxsO1xuXG4gICAgICBhY3Rpb24uc2F2ZWRJdGVtcy5mb3JFYWNoKChzYXZlZEl0ZW1KUykgPT4ge1xuICAgICAgICBjb25zdCBzYXZlZEl0ZW0gPSBJbW11dGFibGUuZnJvbUpTKHNhdmVkSXRlbUpTKTtcbiAgICAgICAgY29uc3QgZm91bmRJbmRleCA9IGFsbERhdGEuZmluZEluZGV4KFxuICAgICAgICAgIGQgPT4gZC5nZXRJbihhY3Rpb24uaWRLZXlQYXRoKSA9PT0gc2F2ZWRJdGVtLmdldEluKGFjdGlvbi5pZEtleVBhdGgpLFxuICAgICAgICApO1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBpZiAoIWZpcnN0Q3JlYXRlZElkICYmIHNhdmVkSXRlbS5nZXRJbihhY3Rpb24uaWRLZXlQYXRoKSkge1xuICAgICAgICAgICAgZmlyc3RDcmVhdGVkSWQgPSBzYXZlZEl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFsbERhdGEgPSBhbGxEYXRhLnB1c2goc2F2ZWRJdGVtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGxEYXRhID0gYWxsRGF0YS5tZXJnZURlZXBJbihbZm91bmRJbmRleF0sIHNhdmVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBsZXQgbmV3U3RhdGUgPSBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgYWxsRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGFsbERhdGEpXG4gICAgICAgIC5tZXJnZUluKFthY3Rpb24uaWQsICdzZXNzaW9uJ10sIHtcbiAgICAgICAgICBpc0J1c3k6IGZhbHNlLFxuICAgICAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICAgICAgaXNDcmVhdGluZzogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnZWRpdERhdGEnXSlcbiAgICAgICAgLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pXG4gICAgICAgIC5kZWxldGVJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgJ2Vycm9yJ10pO1xuXG4gICAgICBpZiAoZmlyc3RDcmVhdGVkSWQpIHtcbiAgICAgICAgVXRpbHMuc2F2ZVNlbGVjdGVkSXRlbXMoYWN0aW9uLmlkLCBbZmlyc3RDcmVhdGVkSWRdKTtcbiAgICAgICAgbmV3U3RhdGUgPSBuZXdTdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLCBMaXN0KFtmaXJzdENyZWF0ZWRJZF0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0FWRV9QQVJUSUFMX1NVQ0NFU1M6IHtcbiAgICAgIGxldCBhbGxEYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSk7XG4gICAgICBsZXQgY3JlYXRlRGF0YSA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJ10pO1xuICAgICAgbGV0IGVkaXREYXRhID0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJ10pO1xuICAgICAgY29uc3QgaXNDcmVhdGluZyA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQ3JlYXRpbmcnXSk7XG4gICAgICBhY3Rpb24uc2F2ZWRJdGVtcy5mb3JFYWNoKChzYXZlZEl0ZW1KUykgPT4ge1xuICAgICAgICBjb25zdCBzYXZlZEl0ZW0gPSBJbW11dGFibGUuZnJvbUpTKHNhdmVkSXRlbUpTKTtcbiAgICAgICAgbGV0IGZvdW5kSW5kZXggPSBhbGxEYXRhLmZpbmRJbmRleChcbiAgICAgICAgICBkID0+IGQuZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkgPT09IHNhdmVkSXRlbS5nZXRJbihhY3Rpb24uaWRLZXlQYXRoKSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgYWxsRGF0YSA9IGFsbERhdGEucHVzaChzYXZlZEl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsbERhdGEgPSBhbGxEYXRhLm1lcmdlRGVlcEluKFtmb3VuZEluZGV4XSwgc2F2ZWRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDcmVhdGluZykge1xuICAgICAgICAgIGZvdW5kSW5kZXggPSBzYXZlZEl0ZW0uZ2V0KCdyb3dJbmRleCcpO1xuICAgICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgZm91bmRJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY3JlYXRlRGF0YSA9IGNyZWF0ZURhdGEuZGVsZXRlKGZvdW5kSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlZGl0RGF0YSA9IGVkaXREYXRhLmRlbGV0ZShzYXZlZEl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgYWxsRGF0YSlcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdhbGxEYXRhJ10sIGFsbERhdGEpXG4gICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnY3JlYXRlRGF0YSddLCBjcmVhdGVEYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJ10sIGVkaXREYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NBVkVfRkFJTDpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2Vzc2lvbicsICdpc0J1c3knXSwgZmFsc2UpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9SRU1PVkU6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIHRydWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9SRU1PVkVfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnaXNCdXN5J10sIGZhbHNlKVxuICAgICAgICAudXBkYXRlSW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ2RhdGEnXSxcbiAgICAgICAgICBkYXRhID0+IGRhdGEuZmlsdGVyTm90KFxuICAgICAgICAgICAgaXRlbSA9PiBhY3Rpb24ucmVtb3ZlZElkcy5pbmRleE9mKGl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpID4gLTEsXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICAudXBkYXRlSW4oXG4gICAgICAgICAgW2FjdGlvbi5pZCwgJ2FsbERhdGEnXSxcbiAgICAgICAgICBkYXRhID0+IGRhdGEuZmlsdGVyTm90KFxuICAgICAgICAgICAgaXRlbSA9PiBhY3Rpb24ucmVtb3ZlZElkcy5pbmRleE9mKGl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpID4gLTEsXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICAuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1JFTU9WRV9GQUlMOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzQnVzeSddLCBmYWxzZSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0VESVRfQ0VMTF9WQUxVRV9DSEFOR0U6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJywgYWN0aW9uLmRhdGFJZCwgLi4uYWN0aW9uLmtleVBhdGhdLCBhY3Rpb24udmFsdWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DUkVBVEVfQ0VMTF9WQUxVRV9DSEFOR0U6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oXG4gICAgICAgIFthY3Rpb24uaWQsICdjcmVhdGVEYXRhJywgYWN0aW9uLnJvd0luZGV4LCAuLi5hY3Rpb24ua2V5UGF0aF0sXG4gICAgICAgIGFjdGlvbi52YWx1ZSxcbiAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0hPV19NRVNTQUdFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24uZGF0YUlkLCAuLi5hY3Rpb24ua2V5UGF0aF0sXG4gICAgICAgIHsgaWQ6IGFjdGlvbi5tZXNzYWdlSWQsIHZhbHVlczogYWN0aW9uLm1lc3NhZ2VWYWx1ZXMgfSxcbiAgICAgICk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0hPV19NRVNTQUdFUzpcbiAgICAgIHJldHVybiBzdGF0ZS5tZXJnZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSwgSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24ubWVzc2FnZXMpKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0VMTF9ISURFX01FU1NBR0U6IHtcbiAgICAgIGlmIChhY3Rpb24ubWVzc2FnZVR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFthY3Rpb24uaWQsICdjZWxsTWVzc2FnZXMnXSk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aW9uLmRhdGFJZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcycsIGFjdGlvbi5tZXNzYWdlVHlwZV0pO1xuICAgICAgfVxuICAgICAgbGV0IHJvd01lc3NhZ2UgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24uZGF0YUlkXSk7XG4gICAgICBpZiAocm93TWVzc2FnZSkge1xuICAgICAgICBpZiAoYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByb3dNZXNzYWdlID0gcm93TWVzc2FnZS5kZWxldGVJbihhY3Rpb24ua2V5UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvd01lc3NhZ2Uuc2l6ZSA9PT0gMCB8fCAhYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcycsIGFjdGlvbi5tZXNzYWdlVHlwZSwgYWN0aW9uLmRhdGFJZF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihcbiAgICAgICAgICBbYWN0aW9uLmlkLCAnY2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24uZGF0YUlkXSxcbiAgICAgICAgICByb3dNZXNzYWdlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfU0hPV19NRVNTQUdFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJywgYWN0aW9uLm1lc3NhZ2VUeXBlLCBhY3Rpb24ucm93SW5kZXgsIC4uLmFjdGlvbi5rZXlQYXRoXSxcbiAgICAgICAgeyBpZDogYWN0aW9uLm1lc3NhZ2VJZCwgdmFsdWVzOiBhY3Rpb24ubWVzc2FnZVZhbHVlcyB9LFxuICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ1JFQVRFX0NFTExfSElERV9NRVNTQUdFOiB7XG4gICAgICBpZiAoYWN0aW9uLm1lc3NhZ2VUeXBlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5kZWxldGVJbihbYWN0aW9uLmlkLCAnY3JlYXRlQ2VsbE1lc3NhZ2VzJ10pO1xuICAgICAgfVxuICAgICAgaWYgKGFjdGlvbi5yb3dJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ2NyZWF0ZUNlbGxNZXNzYWdlcycsIGFjdGlvbi5tZXNzYWdlVHlwZV0pO1xuICAgICAgfVxuICAgICAgbGV0IHJvd01lc3NhZ2UgPSBzdGF0ZS5nZXRJbihbXG4gICAgICAgIGFjdGlvbi5pZCxcbiAgICAgICAgJ2NyZWF0ZUNlbGxNZXNzYWdlcycsXG4gICAgICAgIGFjdGlvbi5tZXNzYWdlVHlwZSxcbiAgICAgICAgYWN0aW9uLnJvd0luZGV4LFxuICAgICAgXSk7XG4gICAgICBpZiAocm93TWVzc2FnZSkge1xuICAgICAgICBpZiAoYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByb3dNZXNzYWdlID0gcm93TWVzc2FnZS5kZWxldGVJbihhY3Rpb24ua2V5UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvd01lc3NhZ2Uuc2l6ZSA9PT0gMCB8fCAhYWN0aW9uLmtleVBhdGgpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW1xuICAgICAgICAgICAgYWN0aW9uLmlkLFxuICAgICAgICAgICAgJ2NyZWF0ZUNlbGxNZXNzYWdlcycsXG4gICAgICAgICAgICBhY3Rpb24ubWVzc2FnZVR5cGUsXG4gICAgICAgICAgICBhY3Rpb24ucm93SW5kZXgsXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICAgIFthY3Rpb24uaWQsICdjcmVhdGVDZWxsTWVzc2FnZXMnLCBhY3Rpb24ubWVzc2FnZVR5cGUsIGFjdGlvbi5yb3dJbmRleF0sXG4gICAgICAgICAgcm93TWVzc2FnZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0NFTExfU0VMRUNUSU9OX0NIQU5HRTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnc2VsZWN0ZWRDZWxsJ10sIGFjdGlvbi5zZWxlY3RlZENlbGwpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9JVEVNX1NFTEVDVElPTl9DSEFOR0U6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnbGFzdENsaWNrZWRSb3dJbmRleCddLCBhY3Rpb24ucm93SW5kZXgpO1xuXG4gICAgICAvLyBIYW5kbGUgY2FzZSB3aGVyZSBzaGlmdCBrZXkgaXMgcHJlc3NlZFxuICAgICAgLy8gU2VsZWN0IGFsbCByb3dzIGZyb20gbGFzdENsaWNrZWRSb3cgdG8gY3VycmVudGx5IGNsaWNrZWQgcm93XG4gICAgICBpZiAoYWN0aW9uLnNoaWZ0UHJlc3NlZCkge1xuICAgICAgICBjb25zdCBsYXN0Um93SW5kZXggPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnc2Vzc2lvbicsICdsYXN0Q2xpY2tlZFJvd0luZGV4J10sIGZhbHNlKTtcbiAgICAgICAgaWYgKGxhc3RSb3dJbmRleCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjb25zdCBzZWxlY3RSb3dJZHMgPSBbXTtcbiAgICAgICAgICBpZiAobGFzdFJvd0luZGV4IDwgYWN0aW9uLnJvd0luZGV4KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gbGFzdFJvd0luZGV4OyBpIDw9IGFjdGlvbi5yb3dJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGFJZCA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdkYXRhJywgaSwgLi4uYWN0aW9uLmlkS2V5UGF0aF0pO1xuICAgICAgICAgICAgICBpZiAoZGF0YUlkKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Um93SWRzLnB1c2goZGF0YUlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gYWN0aW9uLnJvd0luZGV4OyBpIDw9IGxhc3RSb3dJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGFJZCA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdkYXRhJywgaSwgLi4uYWN0aW9uLmlkS2V5UGF0aF0pO1xuICAgICAgICAgICAgICBpZiAoZGF0YUlkKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Um93SWRzLnB1c2goZGF0YUlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3U3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSwgTGlzdChzZWxlY3RSb3dJZHMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhSWQgPSBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnZGF0YScsIGFjdGlvbi5yb3dJbmRleCwgLi4uYWN0aW9uLmlkS2V5UGF0aF0pO1xuICAgICAgY29uc3QgZm91bmRJbmRleCA9IHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sIExpc3QoKSkuaW5kZXhPZihkYXRhSWQpO1xuICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGlmIChhY3Rpb24uY3RybFByZXNzZWQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3U3RhdGUudXBkYXRlSW4oXG4gICAgICAgICAgICBbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLFxuICAgICAgICAgICAgTGlzdCgpLFxuICAgICAgICAgICAgaXRlbXMgPT4gaXRlbXMucHVzaChkYXRhSWQpLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlLnNldEluKFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sIExpc3QoW2RhdGFJZF0pKTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3Rpb24uY3RybFByZXNzZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlLnVwZGF0ZUluKFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sIGl0ZW1zID0+IGl0ZW1zLmRlbGV0ZShmb3VuZEluZGV4KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3U3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSwgTGlzdChbZGF0YUlkXSkpO1xuICAgIH1cblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VMRUNUX0FMTF9JVEVNU19DSEFOR0U6XG4gICAgICBpZiAoXG4gICAgICAgIHN0YXRlLmdldEluKFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10sIExpc3QoKSkuc2l6ZVxuICAgICAgICA9PT0gc3RhdGUuZ2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgTGlzdCgpKS5zaXplXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmRlbGV0ZUluKFthY3Rpb24uaWQsICdzZWxlY3RlZEl0ZW1zJ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFxuICAgICAgICBbYWN0aW9uLmlkLCAnc2VsZWN0ZWRJdGVtcyddLFxuICAgICAgICBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnZGF0YSddLCBMaXN0KCkpLm1hcChpdGVtID0+IGl0ZW0uZ2V0SW4oYWN0aW9uLmlkS2V5UGF0aCkpLFxuICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ0xFQVJfU0VMRUNURURfSVRFTVM6XG4gICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3NlbGVjdGVkSXRlbXMnXSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1RPR0dMRV9GSUxURVJJTkc6IHtcbiAgICAgIGlmICghYWN0aW9uLmlzRmlsdGVyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2ZpbHRlcmluZ0RhdGEnXSwgTWFwKHsgaXNGaWx0ZXJpbmc6IGZhbHNlIH0pKVxuICAgICAgICAgIC5zZXRJbihbYWN0aW9uLmlkLCAnZGF0YSddLCBzdGF0ZS5nZXRJbihbYWN0aW9uLmlkLCAnYWxsRGF0YSddKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ2NvbmZpZycsICdmaWx0ZXJpbmdEYXRhJ10sIE1hcCh7IGlzRmlsdGVyaW5nOiB0cnVlIH0pKTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0ZJTFRFUl9EQVRBX0NIQU5HRTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2ZpbHRlcmluZ0RhdGEnLCAnZmlsdGVyRGF0YSddLCBJbW11dGFibGUuZnJvbUpTKGFjdGlvbi5maWx0ZXJEYXRhKSk7XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX0FQUExZX0ZJTFRFUlM6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ2RhdGEnXSwgYWN0aW9uLmRhdGEpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9TRVRfRklMVEVSUzpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ2ZpbHRlcmluZ0RhdGEnXSwgYWN0aW9uLmZpbHRlcmluZ0RhdGEpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9VUERBVEVfRVhJU1RJTkdfQ0VMTF9WQUxVRToge1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5zZXRJbihcbiAgICAgICAgW2FjdGlvbi5pZCwgJ2FsbERhdGEnLCBhY3Rpb24uZGF0YUlkLCAuLi5hY3Rpb24ua2V5UGF0aF0sXG4gICAgICAgIGFjdGlvbi52YWx1ZSxcbiAgICAgICk7XG4gICAgICBpZiAoc3RhdGUuaGFzSW4oW2FjdGlvbi5pZCwgJ2RhdGEnLCBhY3Rpb24uZGF0YUlkLCAuLi5hY3Rpb24ua2V5UGF0aF0pKSB7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnZGF0YScsIGFjdGlvbi5kYXRhSWQsIC4uLmFjdGlvbi5rZXlQYXRoXSwgYWN0aW9uLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlIFRZUEVTLlBMQVRGT1JNX0RBVEFHUklEX1NFVF9FRElUX0RBVEE6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgLnNldEluKFthY3Rpb24uaWQsICdzZXNzaW9uJywgJ2lzRWRpdGluZyddLCB0cnVlKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2VkaXREYXRhJ10sIGFjdGlvbi5kYXRhKVxuICAgICAgICAuc2V0SW4oW2FjdGlvbi5pZCwgJ2NlbGxNZXNzYWdlcyddLCBhY3Rpb24uY2VsbE1lc3NhZ2VzKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX01PREFMX09QRU46XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnY29sdW1uU2V0dGluZ3NNb2RhbCcsICdvcGVuJ10sIHRydWUpO1xuXG4gICAgY2FzZSBUWVBFUy5QTEFURk9STV9EQVRBR1JJRF9DT0xVTU5fU0VUVElOR1NfTU9EQUxfQ0xPU0U6XG4gICAgICByZXR1cm4gc3RhdGUuZGVsZXRlSW4oW2FjdGlvbi5pZCwgJ3Nlc3Npb24nLCAnY29sdW1uU2V0dGluZ3NNb2RhbCddKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfQ09MVU1OX1NFVFRJTkdTX1NBVkU6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oXG4gICAgICAgIFthY3Rpb24uaWQsICdjb25maWcnLCAndmlzaWJsZUNvbHVtbnMnXSxcbiAgICAgICAgSW1tdXRhYmxlLmZyb21KUyhhY3Rpb24uY29sdW1uT3JkZXIpLFxuICAgICAgKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VUX1BBR0U6XG4gICAgICByZXR1cm4gc3RhdGUuc2V0SW4oW2FjdGlvbi5pZCwgJ2NvbmZpZycsICdwYWdlJ10sIGFjdGlvbi5wYWdlKTtcblxuICAgIGNhc2UgVFlQRVMuUExBVEZPUk1fREFUQUdSSURfU0VUX1JPV1NfT05fUEFHRTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbYWN0aW9uLmlkLCAnY29uZmlnJywgJ3Jvd3NPblBhZ2UnXSwgYWN0aW9uLnJvd3NPblBhZ2UpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIl19