function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { FormattedMessage as M } from 'react-intl';
import { selectRender } from './select-renderers';
export default {
  // booleanValueRender
  valRender: function valRender(col, rowIndex, valueRender) {
    return valueRender(rowIndex, function (v) {
      return /*#__PURE__*/React.createElement(M, _extends({
        id: v ? 'Grid.Yes' : 'Grid.No'
      }, col.renderComponentProps));
    });
  },
  // booleanCellEdit
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, valueParser, functions, getComponentDisabledState) {
    var cellName = 'edit';

    var booleanProps = _extends({
      name: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      options: selectOptions,
      value: functions.getItemValue(rowIndex, col, selectOptions),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      isSearchable: false,
      isClearable: !col.isRequired,
      backSpaceRemovesValue: false,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      ref: functions.handleCellRef(rowIndex, col),
      tabIndex: tabIndex
    }, selectTranslations, {}, col.editComponentProps);

    return selectRender(_extends({}, booleanProps));
  },
  // booleanCellCreate
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, valueParser, functions, getComponentDisabledState) {
    var cellName = 'create'; // closeOnMenuSelect

    var booleanProps = _extends({
      name: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      options: selectOptions,
      value: functions.getItemValue(rowIndex, col, selectOptions),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      isSearchable: false,
      isClearable: !col.isRequired,
      backspaceRemovesValue: false,
      tabSelectsValue: false,
      openOnFocus: true,
      ref: functions.handleCellRef(rowIndex, col),
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      tabIndex: tabIndex
    }, selectTranslations, {}, col.createComponentProps);

    return selectRender(_extends({}, booleanProps));
  },
  // booleanCellFilter
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, filterValueParser, functions) {
    var booleanProps = _extends({
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      options: selectOptions,
      value: functions.getItemValue(col, selectOptions),
      onChange: functions.onCellValueChange(col, filterValueParser),
      isSearchable: false,
      isClearable: true,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      tabIndex: tabIndex
    }, selectTranslations, {}, col.filterComponentProps);

    return selectRender(_extends({}, booleanProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,