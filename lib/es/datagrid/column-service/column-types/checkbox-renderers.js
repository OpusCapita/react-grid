function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { FaCheck } from 'react-icons/fa';
import Checkbox from '@opuscapita/react-checkbox';
import { selectRender } from './select-renderers';
export var checkboxRender = function checkboxRender(checkboxProps) {
  return /*#__PURE__*/React.createElement(Checkbox, checkboxProps);
};
export default {
  valRender: function valRender(rowIndex, valueRender) {
    return valueRender(rowIndex, function (v) {
      return v ? /*#__PURE__*/React.createElement(FaCheck, {
        size: 20
      }) : null;
    });
  },
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, functions) {
    var cellName = 'edit';

    var cbValueParser = function cbValueParser(rIndx) {
      return function () {
        return !(functions.getItemValue(rIndx, col) || false);
      };
    };

    var cbProps = _extends({
      id: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      tabIndex: tabIndex,
      checked: functions.getItemValue(rowIndex, col) || false,
      onChange: functions.onCellValueChange(rowIndex, col, cbValueParser(rowIndex)),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      inputRef: functions.handleCellRef(rowIndex, col)
    }, col.editComponentProps);

    return checkboxRender(cbProps);
  },
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, functions) {
    var cbValueParser = function cbValueParser(rIndx) {
      return function () {
        return !(functions.getItemValue(rIndx, col) || false);
      };
    };

    var cbProps = _extends({
      id: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      tabIndex: tabIndex,
      checked: functions.getItemValue(rowIndex, col) || false,
      onChange: functions.onCellValueChange(rowIndex, col, cbValueParser(rowIndex)),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      onBlur: functions.onCellBlur(rowIndex, col),
      inputRef: functions.handleCellRef(rowIndex, col)
    }, col.createComponentProps);

    return checkboxRender(cbProps);
  },
  cellFilter: function cellFilter(col, column, tabIndex, gridId, intl, functions) {
    var cbValueParser = function cbValueParser(val) {
      return val;
    };

    var selectOptions = [{
      value: true,
      label: intl.formatMessage({
        id: 'Grid.Checked'
      })
    }, {
      value: false,
      label: intl.formatMessage({
        id: 'Grid.UnChecked'
      })
    }];
    var selectTranslations = col.selectComponentTranslations || {
      placeholder: intl.formatMessage({
        id: 'Grid.FloatingSelect.Select'
      }),
      noResultsText: intl.formatMessage({
        id: 'Grid.FloatingSelect.NoResults'
      })
    };

    var cbProps = _extends({
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      options: selectOptions,
      value: functions.getItemValue(col, selectOptions),
      onChange: functions.onCellValueChange(col, cbValueParser),
      isSearchable: false,
      isClearable: true,
      tabSelectsValue: false,
      openMenuOnFocus: true,
      tabIndex: tabIndex
    }, selectTranslations, {}, col.filterComponentProps); // checkbox filter is rendered as select - so use selectRender instead


    return selectRender(_extends({}, cbProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,