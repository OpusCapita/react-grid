function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { formatCurrencyAmount } from '@opuscapita/format-utils';
import { FormattedInputCurrency } from '@opuscapita/react-formatted-input';
import React from 'react';
export var inputRender = function inputRender(formattedInputProps) {
  return React.createElement(FormattedInputCurrency, formattedInputProps);
};

var getCurrencyKeyPath = function getCurrencyKeyPath(col) {
  return col.valueOptions && col.valueOptions.currencyKeyPath || ['currency'];
};

export default {
  // currencyValueRender
  valRender: function valRender(col, gridData, rowIndex, thousandSeparator, decimalSeparator, valueRender) {
    return valueRender(rowIndex, function (v) {
      return formatCurrencyAmount(v, {
        currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
        decimals: col.valueOptions && col.valueOptions.decimals,
        thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
        decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
        multiplier: col.valueOptions && col.valueOptions.multiplier
      });
    });
  },
  cellEdit: function cellEdit(col, column, tabIndex, rowIndex, gridId, functions, editValueParser, getDisabledState, gridData, thousandSeparator, decimalSeparator) {
    var props = _extends({
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, function (val) {
        return val;
      }),
      inputProps: {
        name: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        ref: functions.handleCellRef(rowIndex, col)
      },
      currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
      decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
      thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
      decimals: col.valueOptions && col.valueOptions.decimals,
      tabIndex: tabIndex
    }, col.editComponentProps);

    return inputRender(_extends({}, props));
  },
  cellCreate: function cellCreate(col, column, tabIndex, rowIndex, gridId, functions, editValueParser, getDisabledState, gridData, thousandSeparator, decimalSeparator) {
    var props = _extends({
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, function (val) {
        return val;
      }),
      currency: gridData.getIn([rowIndex].concat(getCurrencyKeyPath(col))) || col.valueOptions && col.valueOptions.currency,
      inputProps: {
        name: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        ref: functions.handleCellRef(rowIndex, col)
      },
      decimalSeparator: col.valueOptions && col.valueOptions.decimalSeparator || decimalSeparator,
      thousandSeparator: col.valueOptions && col.valueOptions.thousandSeparator || thousandSeparator,
      decimals: col.valueOptions && col.valueOptions.decimals,
      tabIndex: tabIndex
    }, col.createComponentProps);

    return inputRender(_extends({}, props));
  } // Cell filtering is handled by primitive-renderers cellFilter function
  // Check column-service.jsx

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,