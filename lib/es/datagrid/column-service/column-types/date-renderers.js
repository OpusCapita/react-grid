function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import moment from 'moment';
import { FormattedMessage as M } from 'react-intl';
import { DateInput } from '@opuscapita/react-datetime';
export var dateRender = function dateRender(dateProps) {
  return /*#__PURE__*/React.createElement(DateInput, dateProps);
};

var dateIsValid = function dateIsValid(val) {
  return moment(val).isValid();
};

var dateIsValidFormat = function dateIsValidFormat(val, dateFormat) {
  return moment(val, dateFormat, true).isValid();
};

var className = 'oc-data-grid-date';
export default {
  // dateValueRender
  valRender: function valRender(rowIndex, dateFormat, valueRender) {
    return valueRender(rowIndex, function (v) {
      if (dateIsValidFormat(v, dateFormat)) {
        return moment.utc(v, dateFormat).format(dateFormat);
      }

      if (dateIsValid(v)) {
        return moment.utc(v).format(dateFormat);
      }

      return /*#__PURE__*/React.createElement(M, {
        id: "Grid.InvalidDate"
      });
    });
  },
  // dateCellEdit
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, region, dateFormat, valueParser, functions, getComponentDisabledState) {
    var cellName = 'edit';

    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      locale: region,
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      inputRef: functions.handleCellRef(rowIndex, col),
      inputProps: {
        tabIndex: tabIndex,
        id: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        onBlur: functions.onCellBlur(rowIndex, col),
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        style: column.style
      },
      disabled: getComponentDisabledState(rowIndex, col, cellName)
    }, col.editComponentProps);

    return dateRender(_extends({}, dateProps));
  },
  // dateCellCreate
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, region, dateFormat, valueParser, functions, getComponentDisabledState) {
    var cellName = 'create';

    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      locale: region,
      value: functions.getItemValue(rowIndex, col),
      onChange: functions.onCellValueChange(rowIndex, col, valueParser),
      inputRef: functions.handleCellRef(rowIndex, col),
      inputProps: {
        tabIndex: tabIndex,
        id: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
        onKeyDown: functions.onCellKeyDown(rowIndex, col),
        onBlur: functions.onCellBlur(rowIndex, col),
        onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
        style: column.style
      },
      disabled: getComponentDisabledState(rowIndex, col, cellName)
    }, col.createComponentProps);

    return dateRender(_extends({}, dateProps));
  },
  // dateFilterCell
  cellFilter: function cellFilter(col, column, tabIndex, gridId, region, dateFormat, valueParser, functions) {
    var dateProps = _extends({
      className: className,
      dateFormat: dateFormat,
      value: functions.getItemValue(col),
      onChange: functions.onCellValueChange(col, valueParser),
      locale: region,
      inputProps: {
        tabIndex: tabIndex,
        id: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
        style: column.style
      }
    }, col.filterComponentProps);

    return dateRender(_extends({}, dateProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvZGF0ZS1yZW5kZXJlcnMuanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwibW9tZW50IiwiRm9ybWF0dGVkTWVzc2FnZSIsIk0iLCJEYXRlSW5wdXQiLCJkYXRlUmVuZGVyIiwiZGF0ZVByb3BzIiwiZGF0ZUlzVmFsaWQiLCJ2YWwiLCJpc1ZhbGlkIiwiZGF0ZUlzVmFsaWRGb3JtYXQiLCJkYXRlRm9ybWF0IiwiY2xhc3NOYW1lIiwidmFsUmVuZGVyIiwicm93SW5kZXgiLCJ2YWx1ZVJlbmRlciIsInYiLCJ1dGMiLCJmb3JtYXQiLCJjZWxsRWRpdCIsImNvbCIsImNvbHVtbiIsInRhYkluZGV4IiwiZ3JpZElkIiwicmVnaW9uIiwidmFsdWVQYXJzZXIiLCJmdW5jdGlvbnMiLCJnZXRDb21wb25lbnREaXNhYmxlZFN0YXRlIiwiY2VsbE5hbWUiLCJsb2NhbGUiLCJ2YWx1ZSIsImdldEl0ZW1WYWx1ZSIsIm9uQ2hhbmdlIiwib25DZWxsVmFsdWVDaGFuZ2UiLCJpbnB1dFJlZiIsImhhbmRsZUNlbGxSZWYiLCJpbnB1dFByb3BzIiwiaWQiLCJjb2x1bW5LZXkiLCJvbktleURvd24iLCJvbkNlbGxLZXlEb3duIiwib25CbHVyIiwib25DZWxsQmx1ciIsIm9uRm9jdXMiLCJvbkNlbGxGb2N1cyIsImNvbXBvbmVudFR5cGUiLCJzdHlsZSIsImRpc2FibGVkIiwiZWRpdENvbXBvbmVudFByb3BzIiwiY2VsbENyZWF0ZSIsImNyZWF0ZUNvbXBvbmVudFByb3BzIiwiY2VsbEZpbHRlciIsImZpbHRlckNvbXBvbmVudFByb3BzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFFBQW5CO0FBQ0EsU0FBU0MsZ0JBQWdCLElBQUlDLENBQTdCLFFBQXNDLFlBQXRDO0FBQ0EsU0FBU0MsU0FBVCxRQUEwQiw0QkFB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Q0FBZjs7QUFhQSxXQUFPL0MsVUFBVSxjQUFNQyxTQUFOLEVBQWpCO0FBQ0Q7QUFqR1ksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIGFzIE0gfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IERhdGVJbnB1dCB9IGZyb20gJ0BvcHVzY2FwaXRhL3JlYWN0LWRhdGV0aW1lJztcblxuZXhwb3J0IGNvbnN0IGRhdGVSZW5kZXIgPSBkYXRlUHJvcHMgPT4gPERhdGVJbnB1dCB7Li4uZGF0ZVByb3BzfSAvPjtcblxuY29uc3QgZGF0ZUlzVmFsaWQgPSB2YWwgPT4gbW9tZW50KHZhbCkuaXNWYWxpZCgpO1xuXG5jb25zdCBkYXRlSXNWYWxpZEZvcm1hdCA9ICh2YWwsIGRhdGVGb3JtYXQpID0+IG1vbWVudCh2YWwsIGRhdGVGb3JtYXQsIHRydWUpLmlzVmFsaWQoKTtcblxuY29uc3QgY2xhc3NOYW1lID0gJ29jLWRhdGEtZ3JpZC1kYXRlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyBkYXRlVmFsdWVSZW5kZXJcbiAgdmFsUmVuZGVyKHJvd0luZGV4LCBkYXRlRm9ybWF0LCB2YWx1ZVJlbmRlcikge1xuICAgIHJldHVybiB2YWx1ZVJlbmRlcihyb3dJbmRleCwgKHYpID0+IHtcbiAgICAgIGlmIChkYXRlSXNWYWxpZEZvcm1hdCh2LCBkYXRlRm9ybWF0KSkge1xuICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2LCBkYXRlRm9ybWF0KS5mb3JtYXQoZGF0ZUZvcm1hdCk7XG4gICAgICB9XG4gICAgICBpZiAoZGF0ZUlzVmFsaWQodikpIHtcbiAgICAgICAgcmV0dXJuIG1vbWVudC51dGModikuZm9ybWF0KGRhdGVGb3JtYXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDxNIGlkPVwiR3JpZC5JbnZhbGlkRGF0ZVwiIC8+O1xuICAgIH0pO1xuICB9LFxuICAvLyBkYXRlQ2VsbEVkaXRcbiAgY2VsbEVkaXQoXG4gICAgY29sLFxuICAgIGNvbHVtbixcbiAgICByb3dJbmRleCxcbiAgICB0YWJJbmRleCxcbiAgICBncmlkSWQsXG4gICAgcmVnaW9uLFxuICAgIGRhdGVGb3JtYXQsXG4gICAgdmFsdWVQYXJzZXIsXG4gICAgZnVuY3Rpb25zLFxuICAgIGdldENvbXBvbmVudERpc2FibGVkU3RhdGUsXG4gICkge1xuICAgIGNvbnN0IGNlbGxOYW1lID0gJ2VkaXQnO1xuICAgIGNvbnN0IGRhdGVQcm9wcyA9IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRhdGVGb3JtYXQsXG4gICAgICBsb2NhbGU6IHJlZ2lvbixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbnMuZ2V0SXRlbVZhbHVlKHJvd0luZGV4LCBjb2wpLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9ucy5vbkNlbGxWYWx1ZUNoYW5nZShyb3dJbmRleCwgY29sLCB2YWx1ZVBhcnNlciksXG4gICAgICBpbnB1dFJlZjogZnVuY3Rpb25zLmhhbmRsZUNlbGxSZWYocm93SW5kZXgsIGNvbCksXG4gICAgICBpbnB1dFByb3BzOiB7XG4gICAgICAgIHRhYkluZGV4LFxuICAgICAgICBpZDogYG9jRGF0YWdyaWRFZGl0SW5wdXQtJHtncmlkSWR9LSR7Y29sdW1uLmNvbHVtbktleX0tJHtyb3dJbmRleH1gLFxuICAgICAgICBvbktleURvd246IGZ1bmN0aW9ucy5vbkNlbGxLZXlEb3duKHJvd0luZGV4LCBjb2wpLFxuICAgICAgICBvbkJsdXI6IGZ1bmN0aW9ucy5vbkNlbGxCbHVyKHJvd0luZGV4LCBjb2wpLFxuICAgICAgICBvbkZvY3VzOiBmdW5jdGlvbnMub25DZWxsRm9jdXMoY2VsbE5hbWUsIGNvbC5jb21wb25lbnRUeXBlLCByb3dJbmRleCwgY29sdW1uLmNvbHVtbktleSksXG4gICAgICAgIHN0eWxlOiBjb2x1bW4uc3R5bGUsXG4gICAgICB9LFxuICAgICAgZGlzYWJsZWQ6IGdldENvbXBvbmVudERpc2FibGVkU3RhdGUocm93SW5kZXgsIGNvbCwgY2VsbE5hbWUpLFxuICAgICAgLi4uY29sLmVkaXRDb21wb25lbnRQcm9wcyxcbiAgICB9O1xuICAgIHJldHVybiBkYXRlUmVuZGVyKHsgLi4uZGF0ZVByb3BzIH0pO1xuICB9LFxuICAvLyBkYXRlQ2VsbENyZWF0ZVxuICBjZWxsQ3JlYXRlKFxuICAgIGNvbCxcbiAgICBjb2x1bW4sXG4gICAgcm93SW5kZXgsXG4gICAgdGFiSW5kZXgsXG4gICAgZ3JpZElkLFxuICAgIHJlZ2lvbixcbiAgICBkYXRlRm9ybWF0LFxuICAgIHZhbHVlUGFyc2VyLFxuICAgIGZ1bmN0aW9ucyxcbiAgICBnZXRDb21wb25lbnREaXNhYmxlZFN0YXRlLFxuICApIHtcbiAgICBjb25zdCBjZWxsTmFtZSA9ICdjcmVhdGUnO1xuICAgIGNvbnN0IGRhdGVQcm9wcyA9IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRhdGVGb3JtYXQsXG4gICAgICBsb2NhbGU6IHJlZ2lvbixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbnMuZ2V0SXRlbVZhbHVlKHJvd0luZGV4LCBjb2wpLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9ucy5vbkNlbGxWYWx1ZUNoYW5nZShyb3dJbmRleCwgY29sLCB2YWx1ZVBhcnNlciksXG4gICAgICBpbnB1dFJlZjogZnVuY3Rpb25zLmhhbmRsZUNlbGxSZWYocm93SW5kZXgsIGNvbCksXG4gICAgICBpbnB1dFByb3BzOiB7XG4gICAgICAgIHRhYkluZGV4LFxuICAgICAgICBpZDogYG9jRGF0YWdyaWRDcmVhdGVJbnB1dC0ke2dyaWRJZH0tJHtjb2x1bW4uY29sdW1uS2V5fS0ke3Jvd0luZGV4fWAsXG4gICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb25zLm9uQ2VsbEtleURvd24ocm93SW5kZXgsIGNvbCksXG4gICAgICAgIG9uQmx1cjogZnVuY3Rpb25zLm9uQ2VsbEJsdXIocm93SW5kZXgsIGNvbCksXG4gICAgICAgIG9uRm9jdXM6IGZ1bmN0aW9ucy5vbkNlbGxGb2N1cyhjZWxsTmFtZSwgY29sLmNvbXBvbmVudFR5cGUsIHJvd0luZGV4LCBjb2x1bW4uY29sdW1uS2V5KSxcbiAgICAgICAgc3R5bGU6IGNvbHVtbi5zdHlsZSxcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlZDogZ2V0Q29tcG9uZW50RGlzYWJsZWRTdGF0ZShyb3dJbmRleCwgY29sLCBjZWxsTmFtZSksXG4gICAgICAuLi5jb2wuY3JlYXRlQ29tcG9uZW50UHJvcHMsXG4gICAgfTtcbiAgICByZXR1cm4gZGF0ZVJlbmRlcih7IC4uLmRhdGVQcm9wcyB9KTtcbiAgfSxcbiAgLy8gZGF0ZUZpbHRlckNlbGxcbiAgY2VsbEZpbHRlcihjb2wsIGNvbHVtbiwgdGFiSW5kZXgsIGdyaWRJZCwgcmVnaW9uLCBkYXRlRm9ybWF0LCB2YWx1ZVBhcnNlciwgZnVuY3Rpb25zKSB7XG4gICAgY29uc3QgZGF0ZVByb3BzID0ge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbnMuZ2V0SXRlbVZhbHVlKGNvbCksXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb25zLm9uQ2VsbFZhbHVlQ2hhbmdlKGNvbCwgdmFsdWVQYXJzZXIpLFxuICAgICAgbG9jYWxlOiByZWdpb24sXG4gICAgICBpbnB1dFByb3BzOiB7XG4gICAgICAgIHRhYkluZGV4LFxuICAgICAgICBpZDogYG9jRGF0YWdyaWRGaWx0ZXJJbnB1dC0ke2dyaWRJZH0tJHtjb2x1bW4uY29sdW1uS2V5fWAsXG4gICAgICAgIHN0eWxlOiBjb2x1bW4uc3R5bGUsXG4gICAgICB9LFxuICAgICAgLi4uY29sLmZpbHRlckNvbXBvbmVudFByb3BzLFxuICAgIH07XG4gICAgcmV0dXJuIGRhdGVSZW5kZXIoeyAuLi5kYXRlUHJvcHMgfSk7XG4gIH0sXG59O1xuIl19