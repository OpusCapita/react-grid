function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { FloatingSelectPortal } from '@opuscapita/react-floating-select';
import Checkbox from '@opuscapita/react-checkbox';

var MultiValueContainer = function MultiValueContainer(label) {
  return function (properties) {
    return properties.selectProps.value && properties.selectProps.value.findIndex(function (selectProp) {
      return selectProp.value === properties.data.value;
    }) === 0 ? React.createElement("span", null, label.replace('<n>', properties.selectProps.value.length)) : null;
  };
};

export default {
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var value = functions.getItemValue(col, {
      selectOptions: selectOptions
    });
    var options = opts.map(function (option) {
      return value && value.some(function (o) {
        return option.value === o.value;
      }) ? _extends({}, option, {
        checked: true
      }) : option;
    }); // eslint-disable-next-line react/prop-types

    var Option = function Option(_ref) {
      var _ref$data = _ref.data,
          checked = _ref$data.checked,
          label = _ref$data.label,
          innerProps = _ref.innerProps;
      return React.createElement("span", innerProps, React.createElement(Checkbox, {
        onChange: function onChange() {},
        label: label,
        checked: checked
      }));
    };

    var fsProps = _extends({}, col.filterComponentProps, selectTranslations, {
      components: {
        MultiValueContainer: MultiValueContainer(selectTranslations.selected),
        Option: Option
      },
      hideSelectedOptions: false,
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      isMulti: true,
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      onChange: functions.onCellValueChange(col, editValueParser),
      options: options,
      tabSelectsValue: false,
      tabIndex: tabIndex,
      value: value,
      closeMenuOnSelect: false
    });

    return React.createElement(FloatingSelectPortal, fsProps);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvbXVsdGlzZWxlY3QtcmVuZGVyZXJzLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIkZsb2F0aW5nU2VsZWN0UG9ydGFsIiwiQ2hlY2tib3giLCJNdWx0aVZhbHVlQ29udGFpbmVyIiwibGFiZWwiLCJwcm9wZXJ0aWVzIiwic2VsZWN0UHJvcHMiLCJ2YWx1ZSIsImZpbmRJbmRleCIsInNlbGVjdFByb3AiLCJkYXRhIiwicmVwbGFjZSIsImxlbmd0aCIsImNlbGxGaWx0ZXIiLCJjb2wiLCJjb2x1bW4iLCJ0YWJJbmRleCIsImdyaWRJZCIsInNlbGVjdE9wdGlvbnMiLCJzZWxlY3RUcmFuc2xhdGlvbnMiLCJlZGl0VmFsdWVQYXJzZXIiLCJmdW5jdGlvbnMiLCJvcHRzIiwiZmlsdGVyU2VsZWN0T3B0aW9uc01vZCIsInNsaWNlIiwiZ2V0SXRlbVZhbHVlIiwib3B0aW9ucyIsIm1hcCIsIm9wdGlvbiIsInNvbWUiLCJvIiwiY2hlY2tlZCIsIk9wdGlvbiIsImlubmVyUHJvcHMiLCJmc1Byb3BzIiwiZmlsdGVyQ29tcG9uZW50UHJvcHMiLCJjb21wb25lbnRzIiwic2VsZWN0ZWQiLCJoaWRlU2VsZWN0ZWRPcHRpb25zIiwiaXNTZWFyY2hhYmxlIiwiaXNDbGVhcmFibGUiLCJpc011bHRpIiwibmFtZSIsImNvbHVtbktleSIsIm9uQ2hhbmdlIiwib25DZWxsVmFsdWVDaGFuZ2UiLCJ0YWJTZWxlY3RzVmFsdWUiLCJjbG9zZU1lbnVPblNlbGVjdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0Msb0JBQVQsUUFBcUMsbUNBQXJDO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQiw0QkFBckI7O0FBRUEsSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFBQyxLQUFLO0FBQUEsU0FBSSxVQUFBQyxVQUFVO0FBQUEsV0FB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LGlCQUFpQixFQUFFO0FBZFIsTUFBYjs7QUFpQkEsV0FBTyxvQkFBQyxvQkFBRCxFQUEwQmIsT0FBMUIsQ0FBUDtBQUNEO0FBOUNZLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRmxvYXRpbmdTZWxlY3RQb3J0YWwgfSBmcm9tICdAb3B1c2NhcGl0YS9yZWFjdC1mbG9hdGluZy1zZWxlY3QnO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJ0BvcHVzY2FwaXRhL3JlYWN0LWNoZWNrYm94JztcblxuY29uc3QgTXVsdGlWYWx1ZUNvbnRhaW5lciA9IGxhYmVsID0+IHByb3BlcnRpZXMgPT4gKHByb3BlcnRpZXMuc2VsZWN0UHJvcHMudmFsdWVcbiAgJiYgcHJvcGVydGllcy5zZWxlY3RQcm9wcy52YWx1ZS5maW5kSW5kZXgoXG4gICAgc2VsZWN0UHJvcCA9PiBzZWxlY3RQcm9wLnZhbHVlID09PSBwcm9wZXJ0aWVzLmRhdGEudmFsdWUsXG4gICkgPT09IDAgPyAoXG4gICAgPHNwYW4+e2xhYmVsLnJlcGxhY2UoJzxuPicsIHByb3BlcnRpZXMuc2VsZWN0UHJvcHMudmFsdWUubGVuZ3RoKX08L3NwYW4+XG4gICkgOiBudWxsKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjZWxsRmlsdGVyKFxuICAgIGNvbCxcbiAgICBjb2x1bW4sXG4gICAgdGFiSW5kZXgsXG4gICAgZ3JpZElkLFxuICAgIHNlbGVjdE9wdGlvbnMsXG4gICAgc2VsZWN0VHJhbnNsYXRpb25zLFxuICAgIGVkaXRWYWx1ZVBhcnNlcixcbiAgICBmdW5jdGlvbnMsXG4gICkge1xuICAgIGNvbnN0IG9wdHMgPSBjb2wuZmlsdGVyU2VsZWN0T3B0aW9uc01vZCAmJiBzZWxlY3RPcHRpb25zXG4gICAgICA/IGNvbC5maWx0ZXJTZWxlY3RPcHRpb25zTW9kKHNlbGVjdE9wdGlvbnMuc2xpY2UoKSwgY29sKVxuICAgICAgOiBzZWxlY3RPcHRpb25zO1xuICAgIGNvbnN0IHZhbHVlID0gZnVuY3Rpb25zLmdldEl0ZW1WYWx1ZShjb2wsIHsgc2VsZWN0T3B0aW9ucyB9KTtcbiAgICBjb25zdCBvcHRpb25zID0gb3B0cy5tYXAoXG4gICAgICBvcHRpb24gPT4gKHZhbHVlICYmIHZhbHVlLnNvbWUobyA9PiBvcHRpb24udmFsdWUgPT09IG8udmFsdWUpXG4gICAgICAgID8geyAuLi5vcHRpb24sIGNoZWNrZWQ6IHRydWUgfVxuICAgICAgICA6IG9wdGlvbiksXG4gICAgKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgY29uc3QgT3B0aW9uID0gKHsgZGF0YTogeyBjaGVja2VkLCBsYWJlbCB9LCBpbm5lclByb3BzIH0pID0+IChcbiAgICAgIDxzcGFuIHsuLi5pbm5lclByb3BzfT5cbiAgICAgICAgPENoZWNrYm94IG9uQ2hhbmdlPXsoKSA9PiB7fX0gbGFiZWw9e2xhYmVsfSBjaGVja2VkPXtjaGVja2VkfSAvPlxuICAgICAgPC9zcGFuPlxuICAgICk7XG5cbiAgICBjb25zdCBmc1Byb3BzID0ge1xuICAgICAgLi4uY29sLmZpbHRlckNvbXBvbmVudFByb3BzLFxuICAgICAgLi4uc2VsZWN0VHJhbnNsYXRpb25zLFxuICAgICAgY29tcG9uZW50czogeyBNdWx0aVZhbHVlQ29udGFpbmVyOiBNdWx0aVZhbHVlQ29udGFpbmVyKHNlbGVjdFRyYW5zbGF0aW9ucy5zZWxlY3RlZCksIE9wdGlvbiB9LFxuICAgICAgaGlkZVNlbGVjdGVkT3B0aW9uczogZmFsc2UsXG4gICAgICBpc1NlYXJjaGFibGU6IHNlbGVjdE9wdGlvbnMgJiYgc2VsZWN0T3B0aW9ucy5sZW5ndGggPiA5LFxuICAgICAgaXNDbGVhcmFibGU6IHRydWUsXG4gICAgICBpc011bHRpOiB0cnVlLFxuICAgICAgbmFtZTogYG9jRGF0YWdyaWRGaWx0ZXJJbnB1dC0ke2dyaWRJZH0tJHtjb2x1bW4uY29sdW1uS2V5fWAsXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb25zLm9uQ2VsbFZhbHVlQ2hhbmdlKGNvbCwgZWRpdFZhbHVlUGFyc2VyKSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICB0YWJTZWxlY3RzVmFsdWU6IGZhbHNlLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGNsb3NlTWVudU9uU2VsZWN0OiBmYWxzZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxGbG9hdGluZ1NlbGVjdFBvcnRhbCB7Li4uZnNQcm9wc30gLz47XG4gIH0sXG59O1xuIl19