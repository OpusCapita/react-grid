function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { fromJS, List } from 'immutable';
import { OverlayTrigger, Tooltip } from 'react-bootstrap';
import { FloatingSelectInfinite, FloatingSelectPortal } from '@opuscapita/react-floating-select';
import Checkbox from '@opuscapita/react-checkbox'; // TODO: cellCreate, cellEdit renderers -> multiselect dropdown as cellFilter has

var MultiValueContainer = function MultiValueContainer(label, optionsCount) {
  return function (properties) {
    return properties.selectProps.value && properties.selectProps.value.findIndex(function (selectProp) {
      return selectProp.value === properties.data.value;
    }) === 0 ? React.createElement("span", null, label.replace('<n>', "(" + properties.selectProps.value.length + "/" + optionsCount + ")")) : null;
  };
};

export default {
  valRender: function valRender(col, column, rowIndex, gridId, selectOptions, valueRender) {
    if (selectOptions === void 0) {
      selectOptions = [];
    }

    return valueRender(rowIndex, function (values) {
      // normalize values as Immutable List
      var vals = values;

      if (Array.isArray(values)) {
        vals = fromJS(values);
      }

      if (!List.isList(vals)) {
        vals = fromJS([values]);
      } // No items return empty string


      if (!vals.size) return ''; // If only one is selected render value normally

      if (vals.size === 1) {
        var option = selectOptions.find(function (o) {
          return o.value === vals.get(0);
        });
        return option ? option.label : null;
      } // Multiple values selected, render '3 selected'


      var selectedText = col.translations && col.translations.itemsSelected || 'selected';
      var valueText = React.createElement("span", null, vals.size + " " + selectedText); // without tooltip

      if (col.isMultiselectTooltipDisabled) {
        return valueText;
      } // with tooltip


      return React.createElement(OverlayTrigger, {
        placement: "top",
        overlay: React.createElement(Tooltip, {
          id: "ocDatagridMultiselectTooltip-" + gridId + "-" + column.columnKey + "-" + rowIndex
        }, React.createElement("div", {
          style: {
            textAlign: 'left'
          }
        }, selectOptions.filter(function (o) {
          return vals.includes(o.value);
        }).map(function (v) {
          return React.createElement(React.Fragment, {
            key: v.value
          }, React.createElement("span", null, v.label), React.createElement("br", null));
        }))),
        delay: 500
      }, valueText);
    });
  },
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var value = functions.getItemMultiValue(col); // eslint-disable-next-line react/prop-types

    var Option = function Option(_ref) {
      var _ref$data = _ref.data,
          checked = _ref$data.checked,
          label = _ref$data.label,
          innerProps = _ref.innerProps;
      return React.createElement("span", innerProps, React.createElement(Checkbox, {
        onChange: function onChange() {},
        label: label,
        checked: checked
      }));
    };

    var options = opts.map(function (option) {
      return _extends({}, option, {
        checked: value && value.some(function (o) {
          return option.value === o.value;
        })
      });
    });

    var fsProps = _extends({}, col.filterComponentProps, selectTranslations, {
      components: {
        MultiValueContainer: MultiValueContainer(selectTranslations.selected, (options || []).length),
        Option: Option
      },
      hideSelectedOptions: false,
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      isMulti: true,
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      onChange: functions.onCellMultiValueChange(col, editValueParser),
      onBlur: functions.onCellMultiValueBlur(col),
      options: options,
      tabSelectsValue: false,
      tabIndex: tabIndex,
      value: value,
      closeMenuOnSelect: false
    });

    return column.virtualized ? React.createElement(FloatingSelectInfinite, fsProps) : React.createElement(FloatingSelectPortal, fsProps);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,