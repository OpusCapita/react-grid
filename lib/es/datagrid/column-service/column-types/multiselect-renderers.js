function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { FloatingSelectPortal } from '@opuscapita/react-floating-select';
import Checkbox from '@opuscapita/react-checkbox';

var MultiValueContainer = function MultiValueContainer(label, optionsCount) {
  return function (properties) {
    return properties.selectProps.value && properties.selectProps.value.findIndex(function (selectProp) {
      return selectProp.value === properties.data.value;
    }) === 0 ? React.createElement("span", null, label.replace('<n>', "(" + properties.selectProps.value.length + "/" + optionsCount + ")")) : null;
  };
};

export default {
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var value = functions.getItemValue(col, {
      selectOptions: selectOptions
    });
    var options = opts.map(function (option) {
      return value && value.some(function (o) {
        return option.value === o.value;
      }) ? _extends({}, option, {
        checked: true
      }) : option;
    }); // eslint-disable-next-line react/prop-types

    var Option = function Option(_ref) {
      var _ref$data = _ref.data,
          checked = _ref$data.checked,
          label = _ref$data.label,
          innerProps = _ref.innerProps;
      return React.createElement("span", innerProps, React.createElement(Checkbox, {
        onChange: function onChange() {},
        label: label,
        checked: checked
      }));
    };

    var fsProps = _extends({}, col.filterComponentProps, selectTranslations, {
      components: {
        MultiValueContainer: MultiValueContainer(selectTranslations.selected, (options || []).length),
        Option: Option
      },
      hideSelectedOptions: false,
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      isMulti: true,
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      onChange: functions.onCellValueChange(col, editValueParser),
      options: options,
      tabSelectsValue: false,
      tabIndex: tabIndex,
      value: value,
      closeMenuOnSelect: false
    });

    return React.createElement(FloatingSelectPortal, fsProps);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvbXVsdGlzZWxlY3QtcmVuZGVyZXJzLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIkZsb2F0aW5nU2VsZWN0UG9ydGFsIiwiQ2hlY2tib3giLCJNdWx0aVZhbHVlQ29udGFpbmVyIiwibGFiZWwiLCJvcHRpb25zQ291bnQiLCJwcm9wZXJ0aWVzIiwic2VsZWN0UHJvcHMiLCJ2YWx1ZSIsImZpbmRJbmRleCIsInNlbGVjdFByb3AiLCJkYXRhIiwicmVwbGFjZSIsImxlbmd0aCIsImNlbGxGaWx0ZXIiLCJjb2wiLCJjb2x1bW4iLCJ0YWJJbmRleCIsImdyaWRJZCIsInNlbGVjdE9wdGlvbnMiLCJzZWxlY3RUcmFuc2xhdGlvbnMiLCJlZGl0VmFsdWVQYXJzZXIiLCJmdW5jdGlvbnMiLCJvcHRzIiwiZmlsdGVyU2VsZWN0T3B0aW9uc01vZCIsInNsaWNlIiwiZ2V0SXRlbVZhbHVlIiwib3B0aW9ucyIsIm1hcCIsIm9wdGlvbiIsInNvbWUiLCJvIiwiY2hlY2tlZCIsIk9wdGlvbiIsImlubmVyUHJvcHMiLCJmc1Byb3BzIiwiZmlsdGVyQ29tcG9uZW50UHJvcHMiLCJjb21wb25lbnRzIiwic2VsZWN0ZWQiLCJoaWRlU2VsZWN0ZWRPcHRpb25zIiwiaXNTZWFyY2hhYmxlIiwiaXNDbGVhcmFibGUiLCJpc011bHRpIiwibmFtZSIsImNvbHVtbktleSIsIm9uQ2hhbmdlIiwib25DZWxsVmFsdWVDaGFuZ2UiLCJ0YWJTZWxlY3RzVmFsdWUiLCJjbG9zZU1lbnVPblNlbGVjdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0Msb0JBQVQsUUFBcUMsbUNBQXJDO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQiw0QkFBckI7O0FBRUEsSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFDQyxLQUFELEVBQVFDLFlBQVI7QUFB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LEVBQUUsS0FmTjtBQWdCWDlCLE1BQUFBLFFBQVEsRUFBUkEsUUFoQlc7QUFpQlhULE1BQUFBLEtBQUssRUFBTEEsS0FqQlc7QUFrQlh3QyxNQUFBQSxpQkFBaUIsRUFBRTtBQWxCUixNQUFiOztBQXFCQSxXQUFPLG9CQUFDLG9CQUFELEVBQTBCYixPQUExQixDQUFQO0FBQ0Q7QUFsRFksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGbG9hdGluZ1NlbGVjdFBvcnRhbCB9IGZyb20gJ0BvcHVzY2FwaXRhL3JlYWN0LWZsb2F0aW5nLXNlbGVjdCc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnQG9wdXNjYXBpdGEvcmVhY3QtY2hlY2tib3gnO1xuXG5jb25zdCBNdWx0aVZhbHVlQ29udGFpbmVyID0gKGxhYmVsLCBvcHRpb25zQ291bnQpID0+IHByb3BlcnRpZXMgPT4gKHByb3BlcnRpZXMuc2VsZWN0UHJvcHMudmFsdWVcbiAgJiYgcHJvcGVydGllcy5zZWxlY3RQcm9wcy52YWx1ZS5maW5kSW5kZXgoXG4gICAgc2VsZWN0UHJvcCA9PiBzZWxlY3RQcm9wLnZhbHVlID09PSBwcm9wZXJ0aWVzLmRhdGEudmFsdWUsXG4gICkgPT09IDAgPyAoXG4gICAgPHNwYW4+e2xhYmVsLnJlcGxhY2UoJzxuPicsIGAoJHtwcm9wZXJ0aWVzLnNlbGVjdFByb3BzLnZhbHVlLmxlbmd0aH0vJHtvcHRpb25zQ291bnR9KWApfTwvc3Bhbj5cbiAgKSA6IG51bGwpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNlbGxGaWx0ZXIoXG4gICAgY29sLFxuICAgIGNvbHVtbixcbiAgICB0YWJJbmRleCxcbiAgICBncmlkSWQsXG4gICAgc2VsZWN0T3B0aW9ucyxcbiAgICBzZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgZWRpdFZhbHVlUGFyc2VyLFxuICAgIGZ1bmN0aW9ucyxcbiAgKSB7XG4gICAgY29uc3Qgb3B0cyA9IGNvbC5maWx0ZXJTZWxlY3RPcHRpb25zTW9kICYmIHNlbGVjdE9wdGlvbnNcbiAgICAgID8gY29sLmZpbHRlclNlbGVjdE9wdGlvbnNNb2Qoc2VsZWN0T3B0aW9ucy5zbGljZSgpLCBjb2wpXG4gICAgICA6IHNlbGVjdE9wdGlvbnM7XG4gICAgY29uc3QgdmFsdWUgPSBmdW5jdGlvbnMuZ2V0SXRlbVZhbHVlKGNvbCwgeyBzZWxlY3RPcHRpb25zIH0pO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRzLm1hcChcbiAgICAgIG9wdGlvbiA9PiAodmFsdWUgJiYgdmFsdWUuc29tZShvID0+IG9wdGlvbi52YWx1ZSA9PT0gby52YWx1ZSlcbiAgICAgICAgPyB7IC4uLm9wdGlvbiwgY2hlY2tlZDogdHJ1ZSB9XG4gICAgICAgIDogb3B0aW9uKSxcbiAgICApO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBjb25zdCBPcHRpb24gPSAoeyBkYXRhOiB7IGNoZWNrZWQsIGxhYmVsIH0sIGlubmVyUHJvcHMgfSkgPT4gKFxuICAgICAgPHNwYW4gey4uLmlubmVyUHJvcHN9PlxuICAgICAgICA8Q2hlY2tib3ggb25DaGFuZ2U9eygpID0+IHt9fSBsYWJlbD17bGFiZWx9IGNoZWNrZWQ9e2NoZWNrZWR9IC8+XG4gICAgICA8L3NwYW4+XG4gICAgKTtcblxuICAgIGNvbnN0IGZzUHJvcHMgPSB7XG4gICAgICAuLi5jb2wuZmlsdGVyQ29tcG9uZW50UHJvcHMsXG4gICAgICAuLi5zZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIE11bHRpVmFsdWVDb250YWluZXI6IE11bHRpVmFsdWVDb250YWluZXIoc2VsZWN0VHJhbnNsYXRpb25zLnNlbGVjdGVkLFxuICAgICAgICAgIChvcHRpb25zIHx8IFtdKS5sZW5ndGgpLFxuICAgICAgICBPcHRpb24sXG4gICAgICB9LFxuICAgICAgaGlkZVNlbGVjdGVkT3B0aW9uczogZmFsc2UsXG4gICAgICBpc1NlYXJjaGFibGU6IHNlbGVjdE9wdGlvbnMgJiYgc2VsZWN0T3B0aW9ucy5sZW5ndGggPiA5LFxuICAgICAgaXNDbGVhcmFibGU6IHRydWUsXG4gICAgICBpc011bHRpOiB0cnVlLFxuICAgICAgbmFtZTogYG9jRGF0YWdyaWRGaWx0ZXJJbnB1dC0ke2dyaWRJZH0tJHtjb2x1bW4uY29sdW1uS2V5fWAsXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb25zLm9uQ2VsbFZhbHVlQ2hhbmdlKGNvbCwgZWRpdFZhbHVlUGFyc2VyKSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICB0YWJTZWxlY3RzVmFsdWU6IGZhbHNlLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGNsb3NlTWVudU9uU2VsZWN0OiBmYWxzZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxGbG9hdGluZ1NlbGVjdFBvcnRhbCB7Li4uZnNQcm9wc30gLz47XG4gIH0sXG59O1xuIl19