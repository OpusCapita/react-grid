var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import { FloatingSelectPortal } from '@opuscapita/react-floating-select';

var MultiValueContainer = function MultiValueContainer(label) {
  return function (properties) {
    return properties.selectProps.value && properties.selectProps.value.findIndex(function (selectProp) {
      return selectProp.value === properties.data.value;
    }) === 0 ? React.createElement(
      'span',
      null,
      label.replace('{n}', properties.selectProps.value.length)
    ) : null;
  };
};

export default {
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;
    var value = functions.getItemValue(col, { selectOptions: selectOptions });
    var options = opts.map(function (option) {
      return value && value.some(function (o) {
        return option.value === o.value;
      }) ? _extends({}, option, { checked: true }) : option;
    });

    var fsProps = _extends({}, col.filterComponentProps, selectTranslations, {
      closeMenuOnSelect: false,
      components: { MultiValueContainer: MultiValueContainer(selectTranslations.selected) },
      hideSelectedOptions: false,
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      isMulti: true,
      name: 'ocDatagridFilterInput-' + gridId + '-' + column.columnKey,
      onChange: functions.onCellValueChange(col, editValueParser),
      options: options,
      tabSelectsValue: false,
      tabIndex: tabIndex,
      value: value
    });

    return React.createElement(FloatingSelectPortal, fsProps);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvbXVsdGlzZWxlY3QtcmVuZGVyZXJzLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIkZsb2F0aW5nU2VsZWN0UG9ydGFsIiwiTXVsdGlWYWx1ZUNvbnRhaW5lciIsInByb3BlcnRpZXMiLCJzZWxlY3RQcm9wcyIsInZhbHVlIiwiZmluZEluZGV4Iiwic2VsZWN0UHJvcCIsImRhdGEiLCJsYWJlbCIsInJlcGxhY2UiLCJsZW5ndGgiLCJjZWxsRmlsdGVyIiwiY29sIiwiY29sdW1uIiwidGFiSW5kZXgiLCJncmlkSWQiLCJzZWxlY3RPcHRpb25zIiwic2VsZWN0VHJhbnNsYXRpb25zIiwiZWRpdFZhbHVlUGFyc2VyIiwiZnVuY3Rpb25zIiwib3B0cyIsImZpbHRlclNlbGVjdE9wdGlvbnNNb2QiLCJzbGljZSIsImdldEl0ZW1WYWx1ZSIsIm9wdGlvbnMiLCJtYXAiLCJzb21lIiwib3B0aW9uIiwibyIsImNoZWNrZWQiLCJmc1Byb3BzIiwiZmlsdGVyQ29tcG9uZW50UHJvcHMiLCJjbG9zZU1lbnVPblNlbGVjdCIsImNvbXBvbmVudHMiLCJzZWxlY3RlZCIsImhpZGVTZWxlY3RlZE9wdGlvbnMiLCJpc1NlYXJjaGFibGUiLCJpc0NsZWFyYWJsZSIsImlzTXVsdGkiLCJuYW1lIiwiY29sdW1uS2V5Iiwib25DaGFuZ2UiLCJvbkNlbGxWYWx1ZUNoYW5nZSIsInRhYlNlbGVjdHNWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0Msb0JBQVQsUUFBcUMsbUNBQXJDOztBQUVBLElBQU1DLHNCQUFzQixTQUF0QkEsbUJBQXNCO0FBQUEsU0FBUztBQUFBLFdBQ25DQyxXQUFXQyxXQUFYLENBQXVCQyxLQUF2QixJQUNHRixXQUFXQyxXQUFYLENBQXVCQyxLQUF2QixDQUE2QkMsU0FBN0IsQ0FBdUM7QUFBQSxhQUN4Q0MsV0FBV0YsS0FBWCxLQUFxQkYsV0FBV0ssSUFBWCxDQUFnQkgsS0FERztBQUFBLEtBQXZDLE1BQytDLENBRmxELEdBR0k7QUFBQTtBQUFBO0FBQU9JLFlBQU1DLE9BQU4sQ0FBYyxLQUFkLEVBQXFCUCxXQUFXQyxXQUFYLENBQXVCQyxLQUF2QixDQUE2Qk0sTUFBbEQ7QUFBUCxLQUhKLEdBSUksSUFMK0I7QUFBQSxHQUFUO0FBQUEsQ0FBNUI7O0FBUUEsZUFBZTtBQUNiQyxZQURhLHNCQUVYQyxHQUZXLEVBR1hDLE1BSFcsRUFJWEMsUUFKVyxFQUtYQyxNQUxXLEVBTVhDLGFBTlcsRUFPWEMsa0JBUFcsRUFRWEMsZUFSVyxFQVNYQyxTQVRXLEVBVVg7QUFDQSxRQUFNQyxPQUFPUixJQUFJUyxzQkFBSixJQUE4QkwsYUFBOUIsR0FDWEosSUFBSVMsc0JBQUosQ0FBMkJMLGNBQWNNLEtBQWQsRUFBM0IsRUFBa0RWLEdBQWxELENBRFcsR0FFWEksYUFGRjtBQUdBLFFBQU1aLFFBQVFlLFVBQVVJLFlBQVYsQ0FBdUJYLEdBQXZCLEVBQTRCLEVBQUVJLDRCQUFGLEVBQTVCLENBQWQ7QUFDQSxRQUFNUSxVQUFVSixLQUFLSyxHQUFMLENBQVM7QUFBQSxhQUN2QnJCLFNBQVNBLE1BQU1zQixJQUFOLENBQVc7QUFBQSxlQUFLQyxPQUFPdkIsS0FBUCxLQUFpQndCLEVBQUV4QixLQUF4QjtBQUFBLE9BQVgsQ0FBVCxnQkFDU3VCLE1BRFQsSUFDaUJFLFNBQVMsSUFEMUIsTUFFSUYsTUFIbUI7QUFBQSxLQUFULENBQWhCOztBQU1BLFFBQU1HLHVCQUNEbEIsSUFBSW1CLG9CQURILEVBRURkLGtCQUZDO0FBR0plLHlCQUFtQixLQUhmO0FBSUpDLGtCQUFZLEVBQUVoQyxxQkFBcUJBLG9CQUFvQmdCLG1CQUFtQmlCLFFBQXZDLENBQXZCLEVBSlI7QUFLSkMsMkJBQXFCLEtBTGpCO0FBTUpDLG9CQUFjcEIsaUJBQWtCQSxjQUFjTixNQUFkLEdBQXVCLENBTm5EO0FBT0oyQixtQkFBYSxJQVBUO0FBUUpDLGVBQVMsSUFSTDtBQVNKQyx1Q0FBK0J4QixNQUEvQixTQUF5Q0YsT0FBTzJCLFNBVDVDO0FBVUpDLGdCQUFVdEIsVUFBVXVCLGlCQUFWLENBQTRCOUIsR0FBNUIsRUFBaUNNLGVBQWpDLENBVk47QUFXSk0sc0JBWEk7QUFZSm1CLHVCQUFpQixLQVpiO0FBYUo3Qix3QkFiSTtBQWNKVjtBQWRJLE1BQU47O0FBaUJBLFdBQU8sb0JBQUMsb0JBQUQsRUFBMEIwQixPQUExQixDQUFQO0FBQ0Q7QUF2Q1ksQ0FBZiIsImZpbGUiOiJtdWx0aXNlbGVjdC1yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRmxvYXRpbmdTZWxlY3RQb3J0YWwgfSBmcm9tICdAb3B1c2NhcGl0YS9yZWFjdC1mbG9hdGluZy1zZWxlY3QnO1xuXG5jb25zdCBNdWx0aVZhbHVlQ29udGFpbmVyID0gbGFiZWwgPT4gcHJvcGVydGllcyA9PiAoXG4gIHByb3BlcnRpZXMuc2VsZWN0UHJvcHMudmFsdWVcbiAgJiYgcHJvcGVydGllcy5zZWxlY3RQcm9wcy52YWx1ZS5maW5kSW5kZXgoc2VsZWN0UHJvcCA9PlxuICAgIHNlbGVjdFByb3AudmFsdWUgPT09IHByb3BlcnRpZXMuZGF0YS52YWx1ZSkgPT09IDBcbiAgICA/IDxzcGFuPntsYWJlbC5yZXBsYWNlKCd7bn0nLCBwcm9wZXJ0aWVzLnNlbGVjdFByb3BzLnZhbHVlLmxlbmd0aCl9PC9zcGFuPlxuICAgIDogbnVsbFxuKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjZWxsRmlsdGVyKFxuICAgIGNvbCxcbiAgICBjb2x1bW4sXG4gICAgdGFiSW5kZXgsXG4gICAgZ3JpZElkLFxuICAgIHNlbGVjdE9wdGlvbnMsXG4gICAgc2VsZWN0VHJhbnNsYXRpb25zLFxuICAgIGVkaXRWYWx1ZVBhcnNlcixcbiAgICBmdW5jdGlvbnMsXG4gICkge1xuICAgIGNvbnN0IG9wdHMgPSBjb2wuZmlsdGVyU2VsZWN0T3B0aW9uc01vZCAmJiBzZWxlY3RPcHRpb25zID9cbiAgICAgIGNvbC5maWx0ZXJTZWxlY3RPcHRpb25zTW9kKHNlbGVjdE9wdGlvbnMuc2xpY2UoKSwgY29sKSA6XG4gICAgICBzZWxlY3RPcHRpb25zO1xuICAgIGNvbnN0IHZhbHVlID0gZnVuY3Rpb25zLmdldEl0ZW1WYWx1ZShjb2wsIHsgc2VsZWN0T3B0aW9ucyB9KTtcbiAgICBjb25zdCBvcHRpb25zID0gb3B0cy5tYXAob3B0aW9uID0+IChcbiAgICAgIHZhbHVlICYmIHZhbHVlLnNvbWUobyA9PiBvcHRpb24udmFsdWUgPT09IG8udmFsdWUpXG4gICAgICAgID8geyAuLi5vcHRpb24sIGNoZWNrZWQ6IHRydWUgfVxuICAgICAgICA6IG9wdGlvblxuICAgICkpO1xuXG4gICAgY29uc3QgZnNQcm9wcyA9IHtcbiAgICAgIC4uLmNvbC5maWx0ZXJDb21wb25lbnRQcm9wcyxcbiAgICAgIC4uLnNlbGVjdFRyYW5zbGF0aW9ucyxcbiAgICAgIGNsb3NlTWVudU9uU2VsZWN0OiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudHM6IHsgTXVsdGlWYWx1ZUNvbnRhaW5lcjogTXVsdGlWYWx1ZUNvbnRhaW5lcihzZWxlY3RUcmFuc2xhdGlvbnMuc2VsZWN0ZWQpIH0sXG4gICAgICBoaWRlU2VsZWN0ZWRPcHRpb25zOiBmYWxzZSxcbiAgICAgIGlzU2VhcmNoYWJsZTogc2VsZWN0T3B0aW9ucyAmJiAoc2VsZWN0T3B0aW9ucy5sZW5ndGggPiA5KSxcbiAgICAgIGlzQ2xlYXJhYmxlOiB0cnVlLFxuICAgICAgaXNNdWx0aTogdHJ1ZSxcbiAgICAgIG5hbWU6IGBvY0RhdGFncmlkRmlsdGVySW5wdXQtJHtncmlkSWR9LSR7Y29sdW1uLmNvbHVtbktleX1gLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9ucy5vbkNlbGxWYWx1ZUNoYW5nZShjb2wsIGVkaXRWYWx1ZVBhcnNlciksXG4gICAgICBvcHRpb25zLFxuICAgICAgdGFiU2VsZWN0c1ZhbHVlOiBmYWxzZSxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgdmFsdWUsXG4gICAgfTtcblxuICAgIHJldHVybiA8RmxvYXRpbmdTZWxlY3RQb3J0YWwgey4uLmZzUHJvcHN9IC8+O1xuICB9LFxufTtcbiJdfQ==