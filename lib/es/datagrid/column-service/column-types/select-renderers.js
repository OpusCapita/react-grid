function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { FloatingSelectPortal, FloatingSelectPortalCreatable } from '@opuscapita/react-floating-select';
export var selectRender = function selectRender(selectProps) {
  return React.createElement(FloatingSelectPortal, selectProps);
};
export var creatableSelectRender = function creatableSelectRender(selectProps) {
  return React.createElement(FloatingSelectPortalCreatable, selectProps);
};
export default {
  cellEdit: function cellEdit(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions, getComponentDisabledState) {
    var cellName = 'edit';
    var opts = col.editSelectOptionsMod && selectOptions ? col.editSelectOptionsMod(selectOptions.slice(), rowIndex, col) : selectOptions;

    var fsProps = _extends({
      name: "ocDatagridEditInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      options: opts,
      value: functions.getItemValue(rowIndex, col, {
        selectOptions: selectOptions
      }),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: !col.isRequired,
      backSpaceRemovesValue: false,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      ref: functions.handleCellRef(rowIndex, col),
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      tabIndex: tabIndex
    }, col.editComponentProps, selectTranslations);

    if (col.isCreatableSelect) return creatableSelectRender(_extends({}, fsProps));
    return selectRender(_extends({}, fsProps));
  },
  cellCreate: function cellCreate(col, column, rowIndex, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions, getComponentDisabledState) {
    var cellName = 'create';
    var opts = col.createSelectOptionsMod && selectOptions ? col.createSelectOptionsMod(selectOptions.slice(), rowIndex, col) : selectOptions;

    var fsProps = _extends({
      name: "ocDatagridCreateInput-" + gridId + "-" + column.columnKey + "-" + rowIndex,
      options: opts,
      value: functions.getItemValue(rowIndex, col, {
        selectOptions: selectOptions
      }),
      onChange: functions.onCellValueChange(rowIndex, col, editValueParser),
      onBlur: functions.onCellBlur(rowIndex, col),
      onKeyDown: functions.onCellKeyDown(rowIndex, col),
      onFocus: functions.onCellFocus(cellName, col.componentType, rowIndex, column.columnKey),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: !col.isRequired,
      backspaceRemovesValue: false,
      tabSelectsValue: false,
      openMenuOnFocus: false,
      ref: functions.handleCellRef(rowIndex, col),
      isDisabled: getComponentDisabledState(rowIndex, col, cellName),
      tabIndex: tabIndex
    }, col.createComponentProps, selectTranslations);

    if (col.isCreatableSelect) return creatableSelectRender(_extends({}, fsProps));
    return selectRender(_extends({}, fsProps));
  },
  cellFilter: function cellFilter(col, column, tabIndex, gridId, selectOptions, selectTranslations, editValueParser, functions) {
    var opts = col.filterSelectOptionsMod && selectOptions ? col.filterSelectOptionsMod(selectOptions.slice(), col) : selectOptions;

    var fsProps = _extends({
      name: "ocDatagridFilterInput-" + gridId + "-" + column.columnKey,
      options: opts,
      value: functions.getItemValue(col, {
        selectOptions: selectOptions
      }),
      onChange: functions.onCellValueChange(col, editValueParser),
      isSearchable: selectOptions && selectOptions.length > 9,
      isClearable: true,
      tabSelectsValue: false,
      tabIndex: tabIndex
    }, col.filterComponentProps, selectTranslations);

    return selectRender(_extends({}, fsProps));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2VydmljZS9jb2x1bW4tdHlwZXMvc2VsZWN0LXJlbmRlcmVycy5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJGbG9hdGluZ1NlbGVjdFBvcnRhbCIsIkZsb2F0aW5nU2VsZWN0UG9ydGFsQ3JlYXRhYmxlIiwic2VsZWN0UmVuZGVyIiwic2VsZWN0UHJvcHMiLCJjcmVhdGFibGVTZWxlY3RSZW5kZXIiLCJjZWxsRWRpdCIsImNvbCIsImNvbHVtbiIsInJvd0luZGV4IiwidGFiSW5kZXgiLCJncmlkSWQiLCJzZWxlY3RPcHRpb25zIiwic2VsZWN0VHJhbnNsYXRpb25zIiwiZWRpdFZhbHVlUGFyc2VyIiwiZnVuY3Rpb25zIiwiZ2V0Q29tcG9uZW50RGlzYWJsZWRTdGF0ZSIsImNlbGxOYW1lIiwib3B0cyIsImVkaXRTZWxlY3RPcHRpb25zTW9kIiwic2xpY2UiLCJmc1Byb3BzIiwibmFtZSIsImNvbHVtbktleSIsIm9wdGlvbnMiLCJ2YWx1ZSIsImdldEl0ZW1WYWx1ZSIsIm9uQ2hhbmdlIiwib25DZWxsVmFsdWVDaGFuZ2UiLCJvbkJsdXIiLCJvbkNlbGxCbHVyIiwib25Gb2N1cyIsIm9uQ2VsbEZvY3VzIiwiY29tcG9uZW50VHlwZSIsIm9uS2V5RG93biIsIm9uQ2VsbEtleURvd24iLCJpc1NlYXJjaGFibGUiLCJsZW5ndGgiLCJpc0NsZWFyYWJsZSIsImlzUmVxdWlyZWQiLCJiYWNrU3BhY2VSZW1vdmVzVmFsdWUiLCJ0YWJTZWxlY3RzVmFsdWUiLCJvcGVuTWVudU9uRm9jdXMiLCJyZWYiLCJoYW5kbGVDZWxsUmVmIiwiaXNEaXNhYmxlZCIsImVkaXRDb21wb25lbnRQcm9wcyIsImlzQ3JlYXRhYmxlU2VsZWN0IiwiY2VsbENyZWF0ZSIsImNyZWF0ZVNlbGVjdE9wdGlvbnNNb2QiLCJiYWNrc3BhY2VSZW1vdmVzVmFsdWUiLCJjcmVhdGVDb21wb25lbnRQcm9wcyIsImNlbGxGaWx0ZXIiLCJm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QUFDVyxZQUFWLENBQXVCbkIsR0FBdkIsRUFBNEI7QUFBRUssUUFBQUEsYUFBYSxFQUFiQTtBQUFGLE9BQTVCLENBSEk7QUFJWGUsTUFBQUEsUUFBUSxFQUFFWixTQUFTLENBQUNhLGlCQUFWLENBQTRCckIsR0FBNUIsRUFBaUNPLGVBQWpDLENBSkM7QUFLWHNCLE1BQUFBLFlBQVksRUFBRXhCLGFBQWEsSUFBSUEsYUFBYSxDQUFDeUIsTUFBZCxHQUF1QixDQUwzQztBQU1YQyxNQUFBQSxXQUFXLEVBQUUsSUFORjtBQU9YRyxNQUFBQSxlQUFlLEVBQUUsS0FQTjtBQVFYL0IsTUFBQUEsUUFBUSxFQUFSQTtBQVJXLE9BU1JILEdBQUcsQ0FBQytDLG9CQVRJLEVBVVJ6QyxrQkFWUSxDQUFiOztBQWFBLFdBQU9WLFlBQVksY0FBTWtCLE9BQU4sRUFBbkI7QUFDRDtBQTVHWSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEZsb2F0aW5nU2VsZWN0UG9ydGFsLFxuICBGbG9hdGluZ1NlbGVjdFBvcnRhbENyZWF0YWJsZSxcbn0gZnJvbSAnQG9wdXNjYXBpdGEvcmVhY3QtZmxvYXRpbmctc2VsZWN0JztcblxuZXhwb3J0IGNvbnN0IHNlbGVjdFJlbmRlciA9IHNlbGVjdFByb3BzID0+IDxGbG9hdGluZ1NlbGVjdFBvcnRhbCB7Li4uc2VsZWN0UHJvcHN9IC8+O1xuXG5leHBvcnQgY29uc3QgY3JlYXRhYmxlU2VsZWN0UmVuZGVyID0gc2VsZWN0UHJvcHMgPT4gKFxuICA8RmxvYXRpbmdTZWxlY3RQb3J0YWxDcmVhdGFibGUgey4uLnNlbGVjdFByb3BzfSAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjZWxsRWRpdChcbiAgICBjb2wsXG4gICAgY29sdW1uLFxuICAgIHJvd0luZGV4LFxuICAgIHRhYkluZGV4LFxuICAgIGdyaWRJZCxcbiAgICBzZWxlY3RPcHRpb25zLFxuICAgIHNlbGVjdFRyYW5zbGF0aW9ucyxcbiAgICBlZGl0VmFsdWVQYXJzZXIsXG4gICAgZnVuY3Rpb25zLFxuICAgIGdldENvbXBvbmVudERpc2FibGVkU3RhdGUsXG4gICkge1xuICAgIGNvbnN0IGNlbGxOYW1lID0gJ2VkaXQnO1xuICAgIGNvbnN0IG9wdHMgPSBjb2wuZWRpdFNlbGVjdE9wdGlvbnNNb2QgJiYgc2VsZWN0T3B0aW9uc1xuICAgICAgPyBjb2wuZWRpdFNlbGVjdE9wdGlvbnNNb2Qoc2VsZWN0T3B0aW9ucy5zbGljZSgpLCByb3dJbmRleCwgY29sKVxuICAgICAgOiBzZWxlY3RPcHRpb25zO1xuICAgIGNvbnN0IGZzUHJvcHMgPSB7XG4gICAgICBuYW1lOiBgb2NEYXRhZ3JpZEVkaXRJbnB1dC0ke2dyaWRJZH0tJHtjb2x1bW4uY29sdW1uS2V5fS0ke3Jvd0luZGV4fWAsXG4gICAgICBvcHRpb25zOiBvcHRzLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9ucy5nZXRJdGVtVmFsdWUocm93SW5kZXgsIGNvbCwgeyBzZWxlY3RPcHRpb25zIH0pLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9ucy5vbkNlbGxWYWx1ZUNoYW5nZShyb3dJbmRleCwgY29sLCBlZGl0VmFsdWVQYXJzZXIpLFxuICAgICAgb25CbHVyOiBmdW5jdGlvbnMub25DZWxsQmx1cihyb3dJbmRleCwgY29sKSxcbiAgICAgIG9uRm9jdXM6IGZ1bmN0aW9ucy5vbkNlbGxGb2N1cyhjZWxsTmFtZSwgY29sLmNvbXBvbmVudFR5cGUsIHJvd0luZGV4LCBjb2x1bW4uY29sdW1uS2V5KSxcbiAgICAgIG9uS2V5RG93bjogZnVuY3Rpb25zLm9uQ2VsbEtleURvd24ocm93SW5kZXgsIGNvbCksXG4gICAgICBpc1NlYXJjaGFibGU6IHNlbGVjdE9wdGlvbnMgJiYgc2VsZWN0T3B0aW9ucy5sZW5ndGggPiA5LFxuICAgICAgaXNDbGVhcmFibGU6ICFjb2wuaXNSZXF1aXJlZCxcbiAgICAgIGJhY2tTcGFjZVJlbW92ZXNWYWx1ZTogZmFsc2UsXG4gICAgICB0YWJTZWxlY3RzVmFsdWU6IGZhbHNlLFxuICAgICAgb3Blbk1lbnVPbkZvY3VzOiBmYWxzZSxcbiAgICAgIHJlZjogZnVuY3Rpb25zLmhhbmRsZUNlbGxSZWYocm93SW5kZXgsIGNvbCksXG4gICAgICBpc0Rpc2FibGVkOiBnZXRDb21wb25lbnREaXNhYmxlZFN0YXRlKHJvd0luZGV4LCBjb2wsIGNlbGxOYW1lKSxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgLi4uY29sLmVkaXRDb21wb25lbnRQcm9wcyxcbiAgICAgIC4uLnNlbGVjdFRyYW5zbGF0aW9ucyxcbiAgICB9O1xuXG4gICAgaWYgKGNvbC5pc0NyZWF0YWJsZVNlbGVjdCkgcmV0dXJuIGNyZWF0YWJsZVNlbGVjdFJlbmRlcih7IC4uLmZzUHJvcHMgfSk7XG4gICAgcmV0dXJuIHNlbGVjdFJlbmRlcih7IC4uLmZzUHJvcHMgfSk7XG4gIH0sXG5cbiAgY2VsbENyZWF0ZShcbiAgICBjb2wsXG4gICAgY29sdW1uLFxuICAgIHJvd0luZGV4LFxuICAgIHRhYkluZGV4LFxuICAgIGdyaWRJZCxcbiAgICBzZWxlY3RPcHRpb25zLFxuICAgIHNlbGVjdFRyYW5zbGF0aW9ucyxcbiAgICBlZGl0VmFsdWVQYXJzZXIsXG4gICAgZnVuY3Rpb25zLFxuICAgIGdldENvbXBvbmVudERpc2FibGVkU3RhdGUsXG4gICkge1xuICAgIGNvbnN0IGNlbGxOYW1lID0gJ2NyZWF0ZSc7XG4gICAgY29uc3Qgb3B0cyA9IGNvbC5jcmVhdGVTZWxlY3RPcHRpb25zTW9kICYmIHNlbGVjdE9wdGlvbnNcbiAgICAgID8gY29sLmNyZWF0ZVNlbGVjdE9wdGlvbnNNb2Qoc2VsZWN0T3B0aW9ucy5zbGljZSgpLCByb3dJbmRleCwgY29sKVxuICAgICAgOiBzZWxlY3RPcHRpb25zO1xuICAgIGNvbnN0IGZzUHJvcHMgPSB7XG4gICAgICBuYW1lOiBgb2NEYXRhZ3JpZENyZWF0ZUlucHV0LSR7Z3JpZElkfS0ke2NvbHVtbi5jb2x1bW5LZXl9LSR7cm93SW5kZXh9YCxcbiAgICAgIG9wdGlvbnM6IG9wdHMsXG4gICAgICB2YWx1ZTogZnVuY3Rpb25zLmdldEl0ZW1WYWx1ZShyb3dJbmRleCwgY29sLCB7IHNlbGVjdE9wdGlvbnMgfSksXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb25zLm9uQ2VsbFZhbHVlQ2hhbmdlKHJvd0luZGV4LCBjb2wsIGVkaXRWYWx1ZVBhcnNlciksXG4gICAgICBvbkJsdXI6IGZ1bmN0aW9ucy5vbkNlbGxCbHVyKHJvd0luZGV4LCBjb2wpLFxuICAgICAgb25LZXlEb3duOiBmdW5jdGlvbnMub25DZWxsS2V5RG93bihyb3dJbmRleCwgY29sKSxcbiAgICAgIG9uRm9jdXM6IGZ1bmN0aW9ucy5vbkNlbGxGb2N1cyhjZWxsTmFtZSwgY29sLmNvbXBvbmVudFR5cGUsIHJvd0luZGV4LCBjb2x1bW4uY29sdW1uS2V5KSxcbiAgICAgIGlzU2VhcmNoYWJsZTogc2VsZWN0T3B0aW9ucyAmJiBzZWxlY3RPcHRpb25zLmxlbmd0aCA+IDksXG4gICAgICBpc0NsZWFyYWJsZTogIWNvbC5pc1JlcXVpcmVkLFxuICAgICAgYmFja3NwYWNlUmVtb3Zlc1ZhbHVlOiBmYWxzZSxcbiAgICAgIHRhYlNlbGVjdHNWYWx1ZTogZmFsc2UsXG4gICAgICBvcGVuTWVudU9uRm9jdXM6IGZhbHNlLFxuICAgICAgcmVmOiBmdW5jdGlvbnMuaGFuZGxlQ2VsbFJlZihyb3dJbmRleCwgY29sKSxcbiAgICAgIGlzRGlzYWJsZWQ6IGdldENvbXBvbmVudERpc2FibGVkU3RhdGUocm93SW5kZXgsIGNvbCwgY2VsbE5hbWUpLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICAuLi5jb2wuY3JlYXRlQ29tcG9uZW50UHJvcHMsXG4gICAgICAuLi5zZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgfTtcblxuICAgIGlmIChjb2wuaXNDcmVhdGFibGVTZWxlY3QpIHJldHVybiBjcmVhdGFibGVTZWxlY3RSZW5kZXIoeyAuLi5mc1Byb3BzIH0pO1xuICAgIHJldHVybiBzZWxlY3RSZW5kZXIoeyAuLi5mc1Byb3BzIH0pO1xuICB9LFxuXG4gIGNlbGxGaWx0ZXIoXG4gICAgY29sLFxuICAgIGNvbHVtbixcbiAgICB0YWJJbmRleCxcbiAgICBncmlkSWQsXG4gICAgc2VsZWN0T3B0aW9ucyxcbiAgICBzZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgZWRpdFZhbHVlUGFyc2VyLFxuICAgIGZ1bmN0aW9ucyxcbiAgKSB7XG4gICAgY29uc3Qgb3B0cyA9IGNvbC5maWx0ZXJTZWxlY3RPcHRpb25zTW9kICYmIHNlbGVjdE9wdGlvbnNcbiAgICAgID8gY29sLmZpbHRlclNlbGVjdE9wdGlvbnNNb2Qoc2VsZWN0T3B0aW9ucy5zbGljZSgpLCBjb2wpXG4gICAgICA6IHNlbGVjdE9wdGlvbnM7XG4gICAgY29uc3QgZnNQcm9wcyA9IHtcbiAgICAgIG5hbWU6IGBvY0RhdGFncmlkRmlsdGVySW5wdXQtJHtncmlkSWR9LSR7Y29sdW1uLmNvbHVtbktleX1gLFxuICAgICAgb3B0aW9uczogb3B0cyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbnMuZ2V0SXRlbVZhbHVlKGNvbCwgeyBzZWxlY3RPcHRpb25zIH0pLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9ucy5vbkNlbGxWYWx1ZUNoYW5nZShjb2wsIGVkaXRWYWx1ZVBhcnNlciksXG4gICAgICBpc1NlYXJjaGFibGU6IHNlbGVjdE9wdGlvbnMgJiYgc2VsZWN0T3B0aW9ucy5sZW5ndGggPiA5LFxuICAgICAgaXNDbGVhcmFibGU6IHRydWUsXG4gICAgICB0YWJTZWxlY3RzVmFsdWU6IGZhbHNlLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICAuLi5jb2wuZmlsdGVyQ29tcG9uZW50UHJvcHMsXG4gICAgICAuLi5zZWxlY3RUcmFuc2xhdGlvbnMsXG4gICAgfTtcblxuICAgIHJldHVybiBzZWxlY3RSZW5kZXIoeyAuLi5mc1Byb3BzIH0pO1xuICB9LFxufTtcbiJdfQ==