import Utils from '../datagrid.utils';
export default {
  getAvailableColumns: function getAvailableColumns(columns) {
    return columns.map(function (col) {
      var value = Utils.getColumnKey(col);
      var label = col.header;
      var isLocked = col.isLocked;
      return {
        isLocked: isLocked,
        label: label,
        value: value
      };
    });
  },
  getSelectedColumns: function getSelectedColumns(columns, visibleColumns) {
    var selectedColumns = [];
    visibleColumns.forEach(function (value) {
      columns.forEach(function (col) {
        if (Utils.getColumnKey(col) === value) {
          var label = col.header;
          var isLocked = col.isLocked;
          selectedColumns.push({
            isLocked: isLocked,
            label: label,
            value: value
          });
        }
      });
    });
    return selectedColumns;
  },
  getHiddenColumns: function getHiddenColumns(availableColumns, selectedColumns) {
    var hiddenColumns = [];
    availableColumns.forEach(function (col) {
      if (selectedColumns.findIndex(function (i) {
        return i.value === col.value;
      }) === -1) {
        hiddenColumns.push(col.value);
      }
    });
    return hiddenColumns;
  },
  getColumnOrders: function getColumnOrders(selectedColumns) {
    return selectedColumns.map(function (col) {
      return col.value;
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kYXRhZ3JpZC9jb2x1bW4tc2V0dGluZ3MvY29sdW1uLXNldHRpbmdzLnV0aWxzLmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwiZ2V0QXZhaWxhYmxlQ29sdW1ucyIsImNvbHVtbnMiLCJtYXAiLCJjb2wiLCJ2YWx1ZSIsImdldENvbHVtbktleSIsImxhYmVsIiwiaGVhZGVyIiwiaXNMb2NrZWQiLCJnZXRTZWxlY3RlZENvbHVtbnMiLCJ2aXNpYmxlQ29sdW1ucyIsInNlbGVjdGVkQ29sdW1ucyIsImZvckVhY2giLCJwdXNoIiwiZ2V0SGlkZGVuQ29sdW1ucyIsImF2YWlsYWJsZUNvbHVtbnMiLCJoaWRkZW5Db2x1bW5zIiwiZmluZEluZGV4IiwiaSIsImdldENvbHVtbk9yZGVycyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixtQkFBbEI7QUFFQSxlQUFlO0FBQ2JDLEVBQUFBLG1CQUFtQixFQUFFLDZCQUFBQyxPQUFPO0FBQUEsV0FBSUEsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBQ0MsR0FBRCxFQUFTO0FBQ25ELFVBQU1DLEtBQUssR0FBR0wsS0FBSyxDQUFDTSxZQUFOLENBQW1CRixHQUFuQixDQUFkO0FBQ0EsVUFBTUcsS0FBSyxHQUFHSCxHQUFHLENBQUNJLE1BQWxCO0FBRm1ELFVBRzNDQyxRQUgyQyxHQUc5QkwsR0FIOEIsQ0FHM0NLLFFBSDJDO0FBSW5ELGFBQU87QUFBRUEsUUFBQUEsUUFBUSxFQUFSQSxRQUFGO0FBQVlGLFFBQUFBLEtBQUssRUFBTEEsS0FBWjtBQUFtQkYsUUFBQUEsS0FBSyxFQUFMQTtBQUFuQixPQUFQO0FBQ0QsS0FMK0IsQ0FBSjtBQUFBLEdBRGY7QUFPYkssRUFBQUEsa0JBQWtCLEVBQUUsNEJBQUNSLE9BQUQsRUFBVVMsY0FBVixFQUE2QjtBQUMvQyxRQUFNQyxlQUFlLEdBQUcsRUFBeEI7QUFDQUQsSUFBQUEsY0FBYyxDQUFDRSxPQUFmLENBQXVCLFVBQUNSLEtBQUQsRUFBVztBQUNoQ0gsTUFBQUEsT0FBTyxDQUFDVyxPQUFSLENBQWdCLFVBQUNULEdBQUQsRUFBUztBQUN2QixZQUFJSixLQUFLLENBQUNNLFlBQU4sQ0FBbUJGLEdBQW5CLE1BQTRCQyxLQUFoQyxFQUF1QztBQUNyQyxjQUFNRSxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksTUFBbEI7QUFEcUMsY0FFN0JDLFFBRjZCLEdBRWhCTCxHQUZnQixDQUU3QkssUUFGNkI7QUFHckNHLFVBQUFBLGVBQWUsQ0FBQ0UsSUFBaEIsQ0FBcUI7QUFBRUwsWUFBQUEsUUFBUSxFQUFSQSxRQUFGO0FBQVlGLFlBQUFBLEtBQUssRUFBTEEsS0FBWjtBQUFtQkYsWUFBQUEsS0FBSyxFQUFMQTtBQUFuQixXQUFyQjtBQUNEO0FBQ0YsT0FORDtBQU9ELEtBUkQ7QUFTQSxXQUFPTyxlQUFQO0FBQ0QsR0FuQlk7QUFvQmJHLEVBQUFBLGdCQUFnQixFQUFFLDBCQUFDQyxnQkFBRCxFQUFtQkosZUFBbkIsRUFBdUM7QUFDdkQsUUFBTUssYUFBYSxHQUFHLEVBQXRCO0FBQ0FELElBQUFBLGdCQUFnQixDQUFDSCxPQUFqQixDQUF5QixVQUFDVCxHQUFELEVBQVM7QUFDaEMsVUFBSVEsZUFBZSxDQUFDTSxTQUFoQixDQUEwQixVQUFBQyxDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDZCxLQUFGLEtBQVlELEdBQUcsQ0FBQ0MsS0FBcEI7QUFBQSxPQUEzQixNQUEwRCxDQUFDLENBQS9ELEVBQWtFO0FBQ2hFWSxRQUFBQSxhQUFhLENBQUNILElBQWQsQ0FBbUJWLEdBQUcsQ0FBQ0MsS0FBdkI7QUFDRDtBQUNGLEtBSkQ7QUFLQSxXQUFPWSxhQUFQO0FBQ0QsR0E1Qlk7QUE2QmJHLEVBQUFBLGVBQWUsRUFBRSx5QkFBQVIsZUFBZTtBQUFBLFdBQUlBLGVBQWUsQ0FBQ1QsR0FBaEIsQ0FBb0IsVUFBQUMsR0FBRztBQUFBLGFBQUlBLEdBQUcsQ0FBQ0MsS0FBUjtBQUFBLEtBQXZCLENBQUo7QUFBQTtBQTdCbkIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlscyBmcm9tICcuLi9kYXRhZ3JpZC51dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QXZhaWxhYmxlQ29sdW1uczogY29sdW1ucyA9PiBjb2x1bW5zLm1hcCgoY29sKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBVdGlscy5nZXRDb2x1bW5LZXkoY29sKTtcbiAgICBjb25zdCBsYWJlbCA9IGNvbC5oZWFkZXI7XG4gICAgY29uc3QgeyBpc0xvY2tlZCB9ID0gY29sO1xuICAgIHJldHVybiB7IGlzTG9ja2VkLCBsYWJlbCwgdmFsdWUgfTtcbiAgfSksXG4gIGdldFNlbGVjdGVkQ29sdW1uczogKGNvbHVtbnMsIHZpc2libGVDb2x1bW5zKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRDb2x1bW5zID0gW107XG4gICAgdmlzaWJsZUNvbHVtbnMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICAgIGlmIChVdGlscy5nZXRDb2x1bW5LZXkoY29sKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IGNvbC5oZWFkZXI7XG4gICAgICAgICAgY29uc3QgeyBpc0xvY2tlZCB9ID0gY29sO1xuICAgICAgICAgIHNlbGVjdGVkQ29sdW1ucy5wdXNoKHsgaXNMb2NrZWQsIGxhYmVsLCB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkQ29sdW1ucztcbiAgfSxcbiAgZ2V0SGlkZGVuQ29sdW1uczogKGF2YWlsYWJsZUNvbHVtbnMsIHNlbGVjdGVkQ29sdW1ucykgPT4ge1xuICAgIGNvbnN0IGhpZGRlbkNvbHVtbnMgPSBbXTtcbiAgICBhdmFpbGFibGVDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuICAgICAgaWYgKHNlbGVjdGVkQ29sdW1ucy5maW5kSW5kZXgoaSA9PiBpLnZhbHVlID09PSBjb2wudmFsdWUpID09PSAtMSkge1xuICAgICAgICBoaWRkZW5Db2x1bW5zLnB1c2goY29sLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGlkZGVuQ29sdW1ucztcbiAgfSxcbiAgZ2V0Q29sdW1uT3JkZXJzOiBzZWxlY3RlZENvbHVtbnMgPT4gc2VsZWN0ZWRDb2x1bW5zLm1hcChjb2wgPT4gY29sLnZhbHVlKSxcbn07XG4iXX0=